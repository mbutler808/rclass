<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ZOOL710 Data Science in R for Biologists</title>
<link>https://mbutler808.github.io/lectures.html</link>
<atom:link href="https://mbutler808.github.io/lectures.xml" rel="self" type="application/rss+xml"/>
<description>Course website for Data Science in R for Biologists (ZOOL 710) in Spring 2023</description>
<generator>quarto-1.2.313</generator>
<lastBuildDate>Thu, 26 Jan 2023 10:00:00 GMT</lastBuildDate>
<item>
  <title>Reproducible Research</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-01-26-reproducible-research/index.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>The shocking assertion will be that most statistics in most scientific papers has errors. —<em>Charles Geyer</em></p>
</blockquote>
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://rss.onlinelibrary.wiley.com/doi/epdf/10.1111/1740-9713.01522">Statistical programming, Small mistakes, big impacts</a> by Simon Schwab and Leonhard Held</li>
<li><a href="https://www.annualreviews.org/doi/abs/10.1146/annurev-publhealth-012420-105110">Reproducible Research: A Retrospective</a> by Roger Peng and Stephanie Hicks</li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="http://users.stat.umn.edu/~geyer/Sweave/" class="uri">http://users.stat.umn.edu/~geyer/Sweave/</a></li>
<li><a href="http://users.stat.umn.edu/~geyer/repro.pdf" class="uri">http://users.stat.umn.edu/~geyer/repro.pdf</a></li>
<li><a href="https://rdpeng.github.io/Biostat776" class="uri">https://rdpeng.github.io/Biostat776</a></li>
<li><a href="https://www.annualreviews.org/doi/abs/10.1146/annurev-publhealth-012420-105110">Reproducible Research: A Retrospective</a> by Roger Peng and Stephanie Hicks</li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know the difference between replication and reproducibility</li>
<li>Identify valid reasons why replication and/or reproducibility is not always possible</li>
<li>Identify the type of reproducibility</li>
<li>Identify key components to enable reproducible data analyses</li>
</ul>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>From a young age, we have learned that scientific conclusions should be <strong>reproducible</strong>. After all, isnʻt that what the methods section is for? We are taught to write methods sections so that any scientist could, in theory, repeat the experiment with the idea that if the phenomenon is true, they should obtain comparable results and more often than not should come to the same conclusions.</p>
<p><em>But how repeatable is modern science?</em> Many experiments are now so complex and so expensive that repeating them is not practical. However, it is even worse than that. As datasets get larger and analyses become ever more complex, there is a growing concern that even given the data, we still cannot necessarily repeat the analysis. This is called <strong>“the reproducbility crisis”</strong>.</p>
<p>Recently, there has been a lot of discussion of reproducibility in the media and in the scientific literature. The journal <em>Science</em> had a special issue on reproducibility and data replication.</p>
<ul>
<li><a href="https://www.science.org/toc/science/334/6060" class="uri">https://www.science.org/toc/science/334/6060</a></li>
</ul>
<p>Take for example a recent study by the <a href="https://doi.org/10.1073/pnas.2203150119">Crowdsourced Replication Initiative (2022)</a>. It was a massive effort by 166 coauthors published in PNAS to test repeatability:</p>
<ul>
<li>73 research teams from around the world analyzed the <strong>same social science data</strong>.</li>
<li>They investigated the <strong>same hypothesis</strong>: that more immigration will reduce public support for government provision of social policies.</li>
<li>Together they fit 1261 statistical models and came to widely varying concluisons.</li>
<li>A meta-analysis of the results by the PIs could not explain the variation in results. Even after accounting for the choices made by the research teams in designing their statistical tests, 95% of the total variation remained unexplained.</li>
<li>The authors claim that “a hidden universe of uncertainty remains.”</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/images/reproducible_study.png" class="img-fluid" style="width:100.0%"></p>
</div>
</div>
<p><a href="https://www.pnas.org/doi/10.1073/pnas.2203150119">Source: Breznau et al., 2022</a></p>
<p>This should be very disturbing. It was very disturbing to me! <a href="http://users.stat.umn.edu/~geyer/repro-paper.pdf">Greyer</a> notes that the meta-analysis did not investigate how much of the variability of results was due to outright error. He furthermore notes that while the meta-analysis was done in a reproducibly, the original 73 analyses were not. What does he mean?</p>
</section>
<section id="some-of-the-issues-from-a-statisticianʻs-perspective" class="level1">
<h1>Some of the issues from a statisticianʻs perspective</h1>
<p>Greyer provides nine ideas worth considering:</p>
<ol type="1">
<li>Most scientific papers that need statistics have conclusions that are not actually supported by the statistical calculations done, because of
<ol type="a">
<li>mathematical or computational error,</li>
<li>statistical procedures inappropriate for the data, or</li>
<li>statistical procedures that do not lead to the inferences claimed.</li>
</ol></li>
<li>Good computing practices — version control, well thought out testing, code reviews, literate programming — are essential to correct computing.</li>
<li>Failure to do all calculations from raw data to conclusions (every number or figure shown in a paper) in a way that is fully reproducible and available in a permanent public repository is, by itself, a questionable research practice.</li>
<li>Failure to do statistics as if it could have been pre-registered is a questionable research practice.</li>
<li>Journals that use P &lt; 0.05 as a criterion of publication are not scientific journals (publishing only one side of a story is as unscientific as it is possible to be).</li>
<li>Statistics should be adequately described, at least in the supplementary material.</li>
<li>Scientific papers whose conclusions depend on nontrivial statistics should have statistical referees, and those referees should be heeded.</li>
<li>Not all errors are describable by statistics. There is also what physicists call <em>systematic error</em> that is the same in every replication of an experiment. Physicists regularly attempt to quantify this. Others should too.</li>
</ol>
<p>At the very least scientists should use - version control, - software testing, - code reviews, - literate programming, and - all code available in a permanent public repository.</p>
<p>Some journals have specific policies to promote reproducibility in manuscripts that are published in their journals. For example, the Journal of American Statistical Association (JASA) requires authors to submit their code and data to reproduce their analyses and a set of Associate Editors of Reproducibility review those materials as part of the review process:</p>
<ul>
<li><a href="https://jasa-acs.github.io/repro-guide" class="uri">https://jasa-acs.github.io/repro-guide</a></li>
</ul>
</section>
<section id="recommendations" class="level1">
<h1>Recommendations</h1>
<p><a href="https://rss.onlinelibrary.wiley.com/doi/epdf/10.1111/1740-9713.01522">Discuss Table 1</a></p>
<section id="authors-and-readers" class="level3">
<h3 class="anchored" data-anchor-id="authors-and-readers">Authors and Readers</h3>
<p>It is important to realize that there are multiple players when you talk about reproducibility–there are different types of parties that have different types of interests. There are <strong>authors</strong> who produce research and they want to make their research reproducible. There are also <strong>readers</strong> of research and they want to reproduce that work. Everyone needs tools to make their lives easier.</p>
<p>One current <strong>challenge is that authors of research have to undergo considerable effort to make their results available to a wide audience</strong>.</p>
<ul>
<li>Publishing data and code today is not necessarily a trivial task. Although there are a number of resources available now, that were not available even five years ago, it is still a bit of a challenge to get things out on the web (or at least distributed widely).</li>
<li>Resources like <a href="https://github.com">GitHub</a>, <a href="https://kipoi.org">kipoi</a>, and <a href="http://rpubs.com">RPubs</a> and various data repositories have made a big difference, but there is still a ways to go with respect to building up the public reproducibility infrastructure.</li>
</ul>
<p>Furthermore, <strong>even when data and code are available</strong>, readers often have to download the data, download the code, and then they have to piece everything together, usually by hand. It’s <strong>not always an easy task to put the data and code together</strong>.</p>
<ul>
<li>Readers may not have the same computational resources that the original authors did.</li>
<li>If the original authors used an enormous computing cluster, for example, to do their analysis, the readers may not have that same enormous computing cluster at their disposal. It may be difficult for readers to reproduce the same results.</li>
</ul>
<p>Generally, the <strong>toolbox for doing reproducible research is small</strong>, although <strong>it’s definitely growing</strong>.</p>
<ul>
<li>In practice, authors often just throw things up on the web. There are journals and supplementary materials, but they are famously disorganized.</li>
<li>There are only a few central databases that authors can take advantage of to post their data and make it available. So if you are working in a field that has a central database that everyone uses, that is great. If you are not, then you have to assemble your own resources.</li>
</ul>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Summary
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p>The process of conducting and disseminating research can be depicted as a “data science pipeline”</p></li>
<li><p>Readers and consumers of data science research are typically not privy to the details of the data science pipeline</p></li>
<li><p>One view of reproducibility is that it gives research consumers partial access to the raw pipeline elements.</p></li>
</ul>
</div>
</div>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Why can replication be difficult to achieve? Why is reproducibility a reasonable minimum standard when replication is not possible?</p></li>
<li><p>What is needed to reproduce the results of a data analysis?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="http://users.stat.umn.edu/~geyer/repro-paper.pdf">Reproducibility and Error</a> by Charles J. Geyer</li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 1</category>
  <category>week 2</category>
  <category>R</category>
  <category>reproducibility</category>
  <guid>https://mbutler808.github.io/posts/2023-01-26-reproducible-research/index.html</guid>
  <pubDate>Thu, 26 Jan 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to git/GitHub</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-01-24-intro-git-github/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="lecture-materials" class="level1">
<h1>Lecture materials</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Helpful references for this lecture
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><a href="https://happygitwithr.com">Happy Git with R</a> from Jenny Bryan</li>
<li><a href="https://rafalab.github.io/dsbook/git.html">Chapter on git and GitHub in <code>dsbook</code></a> from Rafael Irizarry</li>
<li><a href="https://andreashandel.github.io/MADAcourse">GitHub introduction in module 1</a> from Andreas Handel</li>
</ol>
</div>
</div>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/</a></li>
<li><a href="https://andreashandel.github.io/MADAcourse/Tools_Github_Introduction.html" class="uri">https://andreashandel.github.io/MADAcourse/Tools_Github_Introduction.html</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p>Last time, you should have created and set up a GitHub account.</p>
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know what Git and GitHub are.</li>
<li>Know why one might want to use them.</li>
<li>Have created a repo and executed basic push/pull commands.</li>
</ul>
</div>
</div>
</section>
<section id="introduction-to-gitgithub" class="level1">
<h1>Introduction to git/GitHub</h1>
<p>This document gives a brief explanation of GitHub and how we will use it for this course.</p>
<section id="git" class="level2">
<h2 class="anchored" data-anchor-id="git">git</h2>
<p><strong>Git</strong> is software that implements what is called a <em>version control system</em> for a repository of files (also known as a <em>repo</em>). The main idea is that as you (and your collaborators) work on a project, the git software tracks, and records any changes made by anyone.</p>
<p><strong>GitHub</strong> is an online server and user interface that provides powerful tools for distribution of your repository, bug tracking, collaboration, and also allows you to create easy websites for each repository.</p>
<p><strong>Git</strong> and <strong>GitHub</strong> together provide an organized way to track your projects, and all of the tools you will need in this course are free.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/A-Solo-work-with-DIY-version-control-via-filename-B-Collaborative-work-with-DIY_W640.jpeg" class="img-fluid figure-img" style="width:80.0%"></p>
<p></p><figcaption class="figure-caption">Figure 1. Whether working solo (A) or collaborating in a group (B) version tracking by naming files is a mess when you want to retrace the steps of the analysis (C). Git and GitHub track all changes and the complete branching tree of the project (D). The commit history is a powerful tool to retrace the development of the project or can be used to roll back to any prior version.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>[<a href="https://peerj.com/preprints/3159/">Source: Jenny Bryan</a>]</p>
<p>It is very well suited for collaborative work, as it was developed by Linus Torvalds (in about 10 days of coding!) for collaborative software development of the Linux kernel <a href="https://www.linuxfoundation.org/blog/blog/10-years-of-git-an-interview-with-git-creator-linus-torvalds">pretty interesting interview with Torvalds</a>. What it did really well was <em>distributed control</em>, and allowing everyone to have their <em>own copy of the repository</em>.</p>
<p><em>Git</em>/<em>GitHub</em> is now the dominant version control system with <em>GitHub</em> hosting over 200 million repositories worldwide! It is used very broadly for all kinds of repos now including data science projects, book projects, courses, and anything that needs collaborative management of mostly text files.</p>
<p>Another great and fun read about Git/GitHub and why it is a great tool for data analysis is in this article by <a href="https://peerj.com/preprints/3159/">Jenny Bryan</a>.</p>
</section>
<section id="what-to-not-use-gitgithub-for" class="level2">
<h2 class="anchored" data-anchor-id="what-to-not-use-gitgithub-for">What to (not) use Git/GitHub for</h2>
<p><strong>GitHub is ideal if</strong> you have a project with (possibly many) smallish files, and most of those files are text files (such as R code, LaTeX, Quarto/(R)Markdown, etc.) and different people work on different parts of the project.</p>
<p><strong>GitHub is less useful if</strong> you have a lot of non-text files (e.g.&nbsp;Word or PowerPoint) and different team members might want to edit the same document at the same time. In that instance, a solution like Google Docs, Word+Dropbox, Word+Onedrive, etc. might be better.</p>
<p><strong>GitHub also has a problem with <em>large files</em></strong>. Anything above around 50MB can lead to very slow syncing and sometimes outright failure. Unfortunately, once GitHub has choked on a large file, it can be quite tricky to fix the repository to work again. <em>This is because the ENTIRE history is saved, including the addition of the huge file.</em> Therefore keep large (&gt;50MB) files out of your GitHub repositories. If you have to work with such files, try to reduce them first before placing into the GitHub repository. Or as alternative, place those files in another sync service (e.g.&nbsp;Dropbox, OneDrive, GoogleDrive) and load them from there.</p>
<p><strong>Finally, if you have <em>data</em></strong>, you need to be careful since by default, GitHub repositories (the GitHub name for your projects) are public and everyone can see them. You can set the repository to private, but you need to be careful that you don’t accidentally expose confidential data to the public. It is in general not a good idea to have confidential data on GitHub. First anonymize your data enough that it is not at risk of identifiability, then you can place it in a private repository. If you put it public, be very careful that you only make things public that are ok to be made public.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Git/GitHub has version control features like a turbo-charged version of “track changes” but more rigorous, powerful, and scaled up to multiple files</li>
<li>Great for solo or collaborative work</li>
<li>Saves the entire history of every change made</li>
<li>Allows for multiple verisions or “branches” to be developed and later merged</li>
<li>GitHub allows distributed collaboration (potentially among complete strangers) and has greatly promoted open-source software development, collaboration, distribution, and bug/issue tracking for users to get help</li>
<li>GitHub allows <em>webpages</em> for your projects or repositories</li>
</ul>
</div>
</div>
<p>Note that other interfaces to <em>Git</em> exist, e.g., <em>Bitbucket</em>, but <em>GitHub</em> is the most widely used one.</p>
</section>
<section id="why-use-gitgithub" class="level2">
<h2 class="anchored" data-anchor-id="why-use-gitgithub">Why use git/GitHub?</h2>
<p>You want to use <em>GitHub</em> to avoid this:</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/phdversioncontrol.gif" class="img-fluid figure-img" style="width:80.0%"></p>
<p></p><figcaption class="figure-caption">How not to use GitHub [image from PhD Comics]</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>[<a href="http://phdcomics.com/comics/archive_print.php?comicid=1531">Source: PhD Comics</a>]</p>
<p>To learn a bit more about Git/GitHub and why you might want to use it, <a href="https://peerj.com/preprints/3159/">read this article by Jenny Bryan</a>.</p>
<p><strong>Note her explanation of what’s special with the <code>README.md</code> file on GitHub.</strong></p>
</section>
<section id="how-to-use-gitgithub" class="level2">
<h2 class="anchored" data-anchor-id="how-to-use-gitgithub">How to use Git/GitHub</h2>
<p>Git/GitHub is fundamentally <strong>based on commands you type into the command line</strong>. Lots of online resources show you how to use the command line. This is the most powerful, and the way I almost always interact with git/GitHub. However, many folks find this the most confusing way to use git/GitHub. Alternatively, there are graphical interfaces.</p>
<ul>
<li><a href="https://desktop.github.com/">GitHub itself</a> provides a grapical interface with basic functionality.</li>
<li>RStudio also has <a href="https://happygitwithr.com/rstudio-git-github.html">Git/GitHub integration</a>. Of course this only works for R project GitHub integration.</li>
<li>There are also third party GitHub clients with many advanced features, most of which you won’t need initially, but might eventually.</li>
</ul>
<p><strong>Note</strong>: As student, you can (and should) upgrade to the Pro version of GitHub for free (i.e.&nbsp;access to unlimited private repositories is one benefit), see the <a href="https://education.github.com/pack">GitHub student developer pack</a> on how to do this.</p>
</section>
</section>
<section id="getting-started-with-git" class="level1">
<h1>Getting Started with git</h1>
<p>One of my favorite resources for getting started with git/GitHub is the Happy Git with R from Jenny Bryan:</p>
<ul>
<li><a href="https://happygitwithr.com" class="uri">https://happygitwithr.com</a></li>
</ul>
<p>It truly is one of the <strong>best resources</strong> out there for getting started with git/GitHub, especially with the integration to RStudio. Therefore, at this point, I will encourage all of you to go read through the online book.</p>
<p>Some of you may only need to skim it, others will need to spend some time reading through it. Either way, I will bet that you won’t regret the time investment.</p>
<section id="set-up-your-profile-in-git-on-your-computer" class="level2">
<h2 class="anchored" data-anchor-id="set-up-your-profile-in-git-on-your-computer">Set up your profile in git on your computer</h2>
<p>At some point you may want to make changes to your repository. Of course before GitHub allows anyone to make changes to your data, they will want to verify your identity (of course!)</p>
<p>In order for your computer to talk to GitHub smoothly, you will need to set up your username and email in the git profile stored on your computer. <strong>Be sure to match</strong> whatever username and email you used to setup your GitHub account. Easy directions are provided here <a href="https://happygitwithr.com/hello-git.html" class="uri">https://happygitwithr.com/hello-git.html</a></p>
</section>
<section id="set-up-your-personal-authentication-token-on-your-computer" class="level2">
<h2 class="anchored" data-anchor-id="set-up-your-personal-authentication-token-on-your-computer">Set up your Personal Authentication Token on your computer</h2>
<p>In addition to GitHub knowing who you are, they will want some credentials to authenticate you are really you. There are several ways to do this, but the easiest is the protocol for HTTP authentication. You will generate a personal access token for HTTPS from your GitHub account which will be stored on your personal machine. It is explained nicely here <a href="https://happygitwithr.com/https-pat.html" class="uri">https://happygitwithr.com/https-pat.html</a></p>
<p>You only have to do it once for each computer, then you can push and pull from GitHub to your heartʻs content. It really is a nice way to do things securely.</p>
</section>
</section>
<section id="using-gitgithub-in-our-course" class="level1">
<h1>Using git/GitHub in our course</h1>
<p>In this course, you will use git/GitHub in the following ways:</p>
<ol type="1">
<li>Project 0 (optional) - You will create a website introducing yourself to folks in the course and deploy it on GitHub.</li>
<li>Projects 1-4 - You can practice using git locally (on your compute environment) to track your changes over time and, if you wish (but highly suggested), you can practice pushing your project solutions to a private GitHub repository on your GitHub account (i.e.&nbsp;<code>git add</code>, <code>git commit</code>, <code>git push</code>, <code>git pull</code>, etc) .</li>
</ol>
<p>Learning these skills will be useful down the road if you ever work collaboratively on a project (i.e.&nbsp;writing code as a group). In this scenario, you will use the skills you have been practicing in your projects to work together as a team in a single GitHub repository.</p>
</section>
<section id="clone-a-repo-to-your-local-directory---easy" class="level1">
<h1>Clone a repo to your local directory - Easy!</h1>
<p>Cloning an existing repo from GitHub is easy. Letʻs clone the <strong>rclassdata</strong> repo to our local git folder within your Documents folder. 1. Go to <a href="https://github.com/mbutler808/rclassdata" class="uri">https://github.com/mbutler808/rclassdata</a> and click on the green <strong>&lt;&gt;Code</strong> button and copy the URL.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/github_cloning.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">Cloning from an existing repo</figcaption><p></p>
</figure>
</div>
</div>
</div>
<ol start="2" type="1">
<li>In your Terminal or CMD prompt, navigate to your git folder (create one in Documents if you donʻt have one already), and clone the repo:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;">pwd</span>  <span class="co" style="color: #5E5E5E;"># or dir on PC</span></span>
<span id="cb1-2"><span class="bu" style="color: null;">cd</span> ~/Documents/git  <span class="co" style="color: #5E5E5E;"># navigate to your git folder</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">git</span> clone https://github.com/mbutler808/rclassdata.git</span></code></pre></div>
</div>
<p>If you set up your personal access token, it should appear on your computer! <a href="https://happygitwithr.com/https-pat.html">If not, set it up following these instructions</a></p>
</section>
<section id="make-a-github-repo-started-from-your-local-files" class="level1">
<h1>Make a GitHub repo started from your local files</h1>
<p>Suppose you have some files on your computer and youʻd like to make them into a repo. For this example, weʻre going to make a repo called <strong>test</strong></p>
<ol type="1">
<li>Create a folder in your <code>Documents/git</code> directory called <code>test</code> and copy some files there.</li>
<li>Go to your GitHub account and create a new repository. Click on the small black + on the top right corner</li>
</ol>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/git_newrepo.png" class="img-fluid figure-img" style="width:50.0%"></p>
<p></p><figcaption class="figure-caption">Create a new repo button</figcaption><p></p>
</figure>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Give your new repo a name (“test”) and choose to create a blank repo with no README.md or .gitignore. We can add them later.</li>
</ol>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/git_create_new_repo.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">Set up a blank repo</figcaption><p></p>
</figure>
</div>
</div>
</div>
<ol start="4" type="1">
<li>You will see the following page giving you helpful hints for linking your GitHub repo with your local repo. We will follow the first set of instructions, slightly modified.</li>
</ol>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/images/github_quicksetup.png" class="img-fluid" style="width:100.0%"></p>
</div>
</div>
<p>Explantations for each line of code:</p>
<ul>
<li><code>echo "# test" &gt;&gt; README.md</code> Write <code># test</code> to <code>README.md</code> which will be created since it doesnʻt already exist</li>
<li><code>git init</code> Intializes the local repo to set up git tracking (only need to to this once)</li>
<li><code>git add .</code> Adds (. = all) our files and commits any changes to the repo</li>
<li><code>git commit -m "first commit"</code> Commit message</li>
<li><code>git branch -M main</code> Renames the local branch to main</li>
<li><code>git remote add origin URL</code> Connect the remote repo (=“origin” on GitHub) to our local repo. Be sure to copy the appropriate URL for your own GitHub repo.</li>
<li><code>git push -u origin main</code> Push our local changes (in main) up to the remote (to a parallel branch main on origin).</li>
</ul>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"# test"</span> <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> README.md</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">git</span> init</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"first commit"</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">git</span> branch <span class="at" style="color: #657422;">-M</span> main</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">git</span> remote add origin https://github.com/mbutler808/test.git</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">git</span> push <span class="at" style="color: #657422;">-u</span> origin main</span></code></pre></div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
GitHub requires authentication to overwrite your repository (this is a good thing 😃👍)
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Did <em>GitHub</em> complain that it doesnʻt know your <strong>username</strong> or <strong>email</strong>?</li>
</ul>
<p>This might be because the default info on your computer doesnʻt match what you used to register for your GitHub account. Not to worry, just set it to match your GitHub account here: <a href="https://happygitwithr.com/hello-git.html" class="uri">https://happygitwithr.com/hello-git.html</a></p>
<ul>
<li>Did <em>GitHub</em> complain that your <strong>authentication</strong> failed?</li>
</ul>
<p>Donʻt worry, you can set up your personal access token (I recommend the HTTPS protocol): <a href="https://happygitwithr.com/https-pat.html" class="uri">https://happygitwithr.com/https-pat.html</a> Nice bonus, you only have to do it once for each computer.</p>
</div>
</div>
<ol start="5" type="1">
<li>Check your remote repo. The files from your computer should be there!</li>
<li>Now try pushing up another change. Make some edit to one or more local files.</li>
<li>Add, Commit, Push:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"made a small change"</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">git</span> push origin main</span></code></pre></div>
</div>
<p>Check your remote repo. Did it go up? Well done! 😍</p>
<p>Your local files and your GitHub repository files are now synced!</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/With-Git-all-contributors-have-a-copy-of-the-repo-with-all-files-and-the-full-history_W640.jpeg" class="img-fluid figure-img" style="width:80.0%"></p>
<p></p><figcaption class="figure-caption">Everyone is one with the repo</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>[<a href="https://peerj.com/preprints/3159/">Source: Jenny Bryan</a>]</p>
</section>
<section id="a-word-about-merge-conflicts" class="level1">
<h1>A word about merge conflicts</h1>
<p>Sooner or later, you will encounter a merge conflict. That happens if the same file(s) changed both locally and on GitHub.com. That can happen if multiple people work on the same files, or if you work on multiple computers and forget to always push/pull before and after you work on a project. Donʻt get discouraged, this is solvable!</p>
<p>Sometimes you have to do it manually. Moving the offending files out of your local repository, then doing the merge and after that adding the updates again can help. If you know that one source is the definite one, you can force a push or pull. A more advanced approach is to use branches.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;">git</span> push <span class="at" style="color: #657422;">--force</span></span></code></pre></div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>The main danger is that a force push or pull will force git to write over a conflict, and can possibly destroy someone elseʻs work. If youʻre the only one on the repo, then itʻs only your changes that youʻll lose</li>
<li>Just be aware but donʻt be afraid to practice. You can always revert back.</li>
<li>See the help page for <a href="https://git-scm.com/docs/git-push">git push</a>. See the -f or –force flag. Itʻs terse computer help, but if you make the effort it will start to make sense.</li>
<li>Iʻll link a more tutorial type resource later</li>
</ul>
</div>
</div>
</section>
<section id="forking-a-repo" class="level1">
<h1>Forking a repo</h1>
<p>When you want to build on someone elseʻs repo, that is a great time to <strong>fork</strong> a repo. This happens when you donʻt have write permission to the repo, but you want provide suggestions (for example if you want to fix a bug). Or if you want to use that repo as a template or a launching off point for your own project.</p>
<p>After you fork and clone the repo to your computer, you can edit, add, and commit the changes. When you are ready to submit the suggestions to the repo owner, start a <strong>pull request</strong>. They will then read over your suggested edits, and if they approve they can merge the changes into the working repo.</p>
<p><strong>Forks</strong> are nice because they remain connected to the parent repo in GitHub. So you can seamlessly work on your own private copy and send it back to the original project when you are ready.</p>
<p><strong>Branches</strong> work in a similar way. The idea is simple. If you have a working repo, you donʻt want to made edits or experimental changes to <strong>main</strong> that may break the functionality. Branches are a way to make a “development branch” where you can work on your ideas in private without breaking anything. When youʻre sure you have everything ironed out and working, you can merge your branch back to <strong>main</strong>, and delete your branch. They are meant to be an ephemeral scratch copy to keep the project clean, organized, and working perfectly.</p>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>What is version control?</p></li>
<li><p>What is the difference between git and GitHub?</p></li>
<li><p>What are other version controls software/tools that are available besides git?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://rafalab.github.io/dsbook/git.html">git and GitHub in the <code>dsbook</code></a> by Rafael Irizarry</li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 1</category>
  <category>week 2</category>
  <category>programming</category>
  <category>version control</category>
  <category>git</category>
  <category>GitHub</category>
  <guid>https://mbutler808.github.io/posts/2023-01-24-intro-git-github/index.html</guid>
  <pubDate>Tue, 24 Jan 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to your computerʻs terminal utilities</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-01-19-your-computer-filesystems/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>For future lectures, Iʻll give you some reading or podcasts to prepare</strong></p>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://academind.com/tutorials/terminal-zsh-basics" class="uri">https://academind.com/tutorials/terminal-zsh-basics</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know the shell used in your computer`s operating system.</li>
<li>Know basic shell commands and when you might want to use them.</li>
<li>Know how to traverse your computer`s filesystem, grab input or put output anywhere.</li>
<li>Understand the difference between relative and absolute file paths.</li>
<li>Know how to create and manipulate files through the shell.</li>
</ul>
</div>
</div>
</section>
<section id="introduction-to-the-shell" class="level1">
<h1>Introduction to the shell</h1>
<p>This document gives a brief explanation of your computerʻs filesystems and how we will use the command line for this course.</p>
<section id="the-kernel" class="level2">
<h2 class="anchored" data-anchor-id="the-kernel">The kernel</h2>
<p>The <em>kernel</em> is the part of your computerʻs operating system that loads first once you start up. It is kind of like your computerʻs autonomic nervous system. It recognizes all of the physical hardware attached to it, enables communication between components (and device drivers), and monitors maintenance functions like turning on the fan when it gets hot, manages virtual memory, gives warnings when the hard drive gets full, manages multitasking, and manages security and file permissions. In the mac this is the XNU kernel, in modern Windows machines it is the Windows NT kernel.</p>
<div class="cell fig-cap-location-top">
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-01-19-your-computer-filesystems/https:/www.linuxandubuntu.com/ezoimgfmt/i0.wp.com/www.linuxandubuntu.com/wp-content/uploads/2019/07/macos-kernel-resources.jpg?w=1295&amp;ssl=1&amp;ezimgfmt=rs:275x519/rscb34/ngcb34/notWebP.png" class="img-fluid"></p>
</div>
</div>
<p>[<a href="https://www.linuxandubuntu.com/home/difference-between-linux-kernel-mac-kernel">Source: Map of MacOS: the heart of everything is called Darwin; and within it, we have separate system utilities (the shell) and the XNU kernel, which is composed in parts by the Mach kernel and by the BSD kernel.</a>]</p>
</section>
<section id="the-shell" class="level2">
<h2 class="anchored" data-anchor-id="the-shell">The shell</h2>
<p>The <strong>shell</strong> is another key part of the core operating system (note in the diagram above it is part of the <strong>System Utilities</strong>, and the partner of the kernel). The shell is a software (an app) that allows humans to control the computer. You are already familiar with the <em>GUI</em> interface, or the <em>Graphical User Interface</em>. It is important that you are comfortable using the <em>Command Line Interface</em> as well.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
There are many reasons to be proficient in the shell:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Data analysis increasingly uses many files. The shell provides a simple but very powerful means to do all kinds of operations on files: move, delete, organize, combine, rename, etc.</li>
<li>Using the shell encourages you to understand your computerʻs filesystem, and helps you to more precisely control input and output to any place along your file paths.</li>
<li>Shell operations are fast.</li>
<li>You can use wildcards to control matching or excluding many files.</li>
<li>The shell can be used to execute (run) software.</li>
<li>The shell is probably the oldest app, so it is very stable with lasting power.</li>
<li>It is part of the OS, so when your apps fail or you are having some issues, you would turn to the shell to kill troublesome processes (programs) or diagnose and fix the issues.</li>
</ul>
</div>
</div>
<p>Macs use the same terminal utilities as UNIX/Linux systems. On the Mac, the command line interface app is called <em>Terminal</em>, which you will find in your <em>Application</em> folder, in the <em>Utilities</em> subfolder (here is a screentshot of our GUI Interface).</p>
<div class="cell fig-cap-location-top">
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-01-19-your-computer-filesystems/terminal.png" class="img-fluid"></p>
</div>
</div>
<p>On a PC you would use the <em>Command Prompt</em> otherwise known as the <em>Windows Command Processor</em> or <em>CMD</em>. If you used a pre-Windows machine, you would be familiar with MS-DOS. To open CMD:</p>
<ol type="1">
<li>Open the Start Menu and type “command prompt” or</li>
<li>Press <strong>Win + R</strong> and type “cmd” in the run box or</li>
<li>Press <strong>Win + X</strong> and select Command Prompt from the menu.</li>
</ol>
<p>Note: you may see <em>Windows PowerShell</em> or <em>Windows Terminal</em> instead, these are similar apps.</p>
</section>
</section>
<section id="the-working-directory" class="level1">
<h1>The Working Directory</h1>
<p>By default, the working directory on a Mac and UNIX/Linux systems is your home user directory “~”. On a PC the default working directory may looks something like a subdirectory of your C drive “C:[Username]".</p>
<p>This is where you currently are in your computerʻs file structure.</p>
<p>First, lets check where we are by listing the files in our current directory. Note that some shell commands differ between different shells (i.e.&nbsp;UNIX vs.&nbsp;PC). Listing the contents of a directory is done with <strong>ls</strong> in UNIX and <strong>dir</strong> in PC:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Mac/UNIX</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">PC</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb1-1"><span class="fu" style="color: #4758AB;">ls</span></span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">dir</span></code></pre></div>
</div>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
An important principle of programming is <strong>VERIFICATION</strong>
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><strong>Always check that it worked</strong> – at each step!</li>
<li>You should check the new commands that you are learning against something that you KNOW WORKS.</li>
<li>Here, since you are familiar with the GUI, as you are doing these new command line operations, keep a GUI window open to verify.</li>
<li>You should also check on the command line by listing the directory after you add or move files etc.</li>
</ul>
</div>
</div>
<p>Please make a folder for your work in a convenient place and call it “Rclass”. On a Mac you may want to put it in “Documents”. Start by navigating into your Documents folder or other such folder where you want your Rclass work to be saved. <strong>cd</strong> is for <em>change directory</em>, and the syntax is <strong>cd Foldername</strong>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb3-1"><span class="bu" style="color: null;">cd</span> Documents</span></code></pre></div>
</section>
<section id="making-a-new-folder-from-the-command-line" class="level1">
<h1>Making a new folder from the command Line</h1>
<p>In both systems, the <strong>mkdir</strong> command for <em>make directory</em> will create a new folder, and <strong>cd</strong> will change directories. :</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb4-1"><span class="fu" style="color: #4758AB;">mkdir</span> Rclass</span>
<span id="cb4-2"><span class="bu" style="color: null;">cd</span> Rclass</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">ls</span>  <span class="co" style="color: #5E5E5E;"># or dir in PC</span></span></code></pre></div>
<p>You have now created the Rclass directory, changed directory again into Rclass, and listed files. (It should be empty.)</p>
<p>This seems like a lot of trouble, when you can just point and click in the GUI. But the beauty of the shell is its power. We can automate actions, execute code, and use wildcards to do many at once (coming up below).</p>
<p>Letʻs say you wanted to create files in a new subfolder. <strong>touch</strong> is a command that creates a new (empty) file, or alters the timestamp of existing files.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Mac/UNIX</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">PC</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb5-1"><span class="fu" style="color: #4758AB;">mkdir</span> shell</span>
<span id="cb5-2"><span class="bu" style="color: null;">cd</span> shell</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">touch</span> dat.txt  <span class="co" style="color: #5E5E5E;"># PC does not have the touch function</span></span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb6-1"><span class="fu" style="color: #4758AB;">mkdir</span> shell</span>
<span id="cb6-2"><span class="bu" style="color: null;">cd</span> shell</span>
<span id="cb6-3"><span class="bu" style="color: null;">type</span> nul <span class="op" style="color: #5E5E5E;">&gt;</span> dat.txt  <span class="co" style="color: #5E5E5E;"># for PC use type nul with pipe instead of touch</span></span></code></pre></div>
</div>
</div>
</div>
<p>Check that you have a subfolder within Rclass that has one file named dat.txt.</p>
<p>Suppose we wanted to create 10 files. You can so easily in the UNIX shell:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb7-1"><span class="fu" style="color: #4758AB;">touch</span> dat<span class="dt" style="color: #AD0000;">{</span><span class="dv" style="color: #AD0000;">1</span><span class="dt" style="color: #AD0000;">..</span><span class="dv" style="color: #AD0000;">10</span><span class="dt" style="color: #AD0000;">}</span>.txt  <span class="co" style="color: #5E5E5E;"># for PC type nul &gt; dat1.txt multiple times</span></span></code></pre></div>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Mac/UNIX</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">PC</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<p>To check your files timestamps list files with the -l flag:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb8-1"><span class="fu" style="color: #4758AB;">ls</span> <span class="at" style="color: #657422;">-l</span></span></code></pre></div>
<p>The -a flag shows hidden files. You can do both at once:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb9-1"><span class="fu" style="color: #4758AB;">ls</span> <span class="at" style="color: #657422;">-la</span></span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<p>The <strong>dir</strong> command provides the timestamp as well as other information.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb10-1"><span class="fu" style="color: #4758AB;">dir</span></span></code></pre></div>
</div>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Exercise:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Create 20 files with the .jpg file extension.</li>
<li>List your files now.</li>
<li>Create 2 subdirectories, one called “Data” and one called “Images”</li>
</ol>
</div>
</div>
</section>
<section id="more-useful-commands-move-copy-remove-and-friends" class="level1">
<h1>More useful commands <strong>move</strong> <strong>copy</strong> <strong>remove</strong> and friends</h1>
<p>Some additional very useful commands are those for moving, copying, and removing (deleting) files. These can operate on your current directory, or you can add the <em>path</em> to your file. For example, to move your file into the Data subdirectory:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb11-1"><span class="fu" style="color: #4758AB;">mv</span> dat1.txt Data/dat1.txt</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">ls</span></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;">ls</span> Data</span></code></pre></div>
<p>Anywhere where you can indicate a filename, you can also add a path to that file.</p>
<table class="table">
<colgroup>
<col style="width: 22%">
<col style="width: 25%">
<col style="width: 33%">
<col style="width: 18%">
</colgroup>
<thead>
<tr class="header">
<th>function</th>
<th>UNIX</th>
<th>Windows CMD</th>
<th>example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>move</td>
<td>mv filename newlocation</td>
<td>move filename newlocation</td>
<td>mv dat1.txt Data</td>
</tr>
<tr class="even">
<td>copy</td>
<td>cp filename newfilename</td>
<td>copy filename newfilename</td>
<td>cp dat1.txt catcat.txt</td>
</tr>
<tr class="odd">
<td>remove</td>
<td>rm filename</td>
<td>del filename</td>
<td>rm dat1.txt</td>
</tr>
<tr class="even">
<td>remove directory</td>
<td>rmdir Directory</td>
<td>rmdir Directory</td>
<td>rmdir Data</td>
</tr>
<tr class="odd">
<td>concatenate (combine)</td>
<td>cat file1 file2</td>
<td>cat file1 file2</td>
<td>cat dat1.txt dat2.txt</td>
</tr>
<tr class="even">
<td>concatenate to new file</td>
<td>cat file1 file2 &gt; file3</td>
<td>cat file1 file2 &gt; file3</td>
<td>cat dat1.txt dat2.txt &gt; alldat.txt</td>
</tr>
<tr class="odd">
<td>list files</td>
<td>ls</td>
<td>dir</td>
<td></td>
</tr>
<tr class="even">
<td>get working directory</td>
<td>pwd</td>
<td>cd</td>
<td></td>
</tr>
</tbody>
</table>
<p><em>Note: UNIX commands are case-sensitive, Windows commands are not.</em> <em>Apologies in advance for any Windows command errors - Iʻm really not an expert. Please let me know so I can fix it. Thank you!</em></p>
</section>
<section id="wildcards" class="level1">
<h1>Wildcards</h1>
<p>You can also select multiple files at once using wildcards. If you want to grab all of the .txt files, for example, you can do:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb12-1"><span class="fu" style="color: #4758AB;">cp</span> <span class="pp" style="color: #AD0000;">*</span>.txt Data</span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;">ls</span>  <span class="co" style="color: #5E5E5E;"># PC: use dir</span></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;">ls</span> Data <span class="co" style="color: #5E5E5E;"># PC: use dir Data</span></span></code></pre></div>
<p>And you should have copied <em>all</em> files that end in .txt into Data. You could alternatively used dat* which will select all files that begin with “dat” but can end in anything else. The * will match any characters (zero or more).</p>
<p>There are a lot of other wildcards that you can use.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Exercise:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Move all of your data files into Data, and all of your image files into Images.</li>
<li>Remove any straggler files from the top level of shell, if you used the copy command.</li>
<li>List files from shell, Data, and Images.</li>
</ol>
</div>
</div>
</section>
<section id="relative-paths-vs.-absolute-paths" class="level1">
<h1>Relative paths vs.&nbsp;Absolute paths</h1>
<p>In the Mac, there are two important <em>shortcuts</em>:</p>
<ul>
<li>“/” : The root directory of your entire computer, indicated by “/”.</li>
<li>“~” : The root of your user directory, which for me is “marguerite”. From the root directory, it will be “/Users/username”</li>
</ul>
<p>In PCs, your root user directory in CMD is usually something like:</p>
<ul>
<li>“C:\User\username" : this would be the root of your user Directory</li>
<li>The root of the C drive is “C:"</li>
</ul>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note:
</div>
</div>
<div class="callout-body-container callout-body">
<p>On PCs pay attention to the direction of the slashes when you type <strong>dir</strong> is it “/” or “\” ? When you type your filepaths, be sure to use the right type of slash.</p>
</div>
</div>
<p>Check out what is in these directories:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Mac/UNIX</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">PC</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb13-1"><span class="fu" style="color: #4758AB;">ls</span> /</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">ls</span> ~</span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<p>Shortcuts in Windows are called Windows Environment Path Variables:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb14-1"><span class="fu" style="color: #4758AB;">dir</span> %UserProfile%  <span class="co" style="color: #5E5E5E;"># is this C:\\Users\\{username} ?</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">dir</span> %SystemDrive%   <span class="co" style="color: #5E5E5E;"># is this C: ?</span></span></code></pre></div>
<p>With the advent of the OneDrive, there is now a parallel user directory in OneDrive that also has Documents, etc.</p>
<p>Donʻt get confused! “C:" drive is not the”OneDrive”. (the OneDrive is a location on your hard drive, sometimes on C:, sometimes on D:) Windows makes use of a lot of symbolic links to make it easier for the user. These are different directories, sometims on different drives or partitions, but to the user it looks like theyʻre in the same folder). Symbolic links can be generally used in filepaths, but it can be very confusing if you accidentally end up with a circular reference or when you need to find the actual location on the hard drive.</p>
<p>Use the “\ad” flag with <strong>dir</strong> to see all of the symbolic links too. They call these symbolic links <em>namespace junctions</em>.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb15-1"><span class="fu" style="color: #4758AB;">dir</span> %UserProfile% <span class="dt" style="color: #AD0000;">\\</span>ad</span></code></pre></div>
</div>
</div>
</div>
<p>You can use these as shortcuts as starting points for your path to basically write an absolute path. This becomes important when you write a script that may be moved to different locations or shared with different people on different computers.</p>
<p>For example, “cd ~/Documents” will take you to the Documents folder inside your user directory, regardless of where you are currently because it is an <strong>absolute path</strong>.</p>
<p>A <strong>relative path</strong> will traverse the file directory <em>relative</em> to where you are currently. For example “Documents” will start at current working directory and look for a subfolder called Documents:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb16-1"><span class="fu" style="color: #4758AB;">ls</span> Documents  <span class="co" style="color: #5E5E5E;"># relative path, is there a Documents folder here?</span></span></code></pre></div>
<p>In contrast, an absolute path will start from the very beginning of your root directory and contain the complete path.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb17-1"><span class="fu" style="color: #4758AB;">ls</span> <span class="pp" style="color: #AD0000;">~</span><span class="dt" style="color: #AD0000;">\D</span>ocuments <span class="co" style="color: #5E5E5E;"># this is an absolute path because ~ = "\Users\marguerite"</span></span></code></pre></div>
<p>On the Mac, an asbolute path will start with “" (or a shortcut that contains a starting”"), whereas on a PC an absolute path will start with “C:”</p>
</section>
<section id="navigating-your-filedirectories" class="level1">
<h1>Navigating your filedirectories</h1>
<section id="the-dots" class="level2">
<h2 class="anchored" data-anchor-id="the-dots">The dots</h2>
<ul>
<li>“.” is the current working directory (where you are currently)</li>
<li>“..” is the directory one level up</li>
<li>“./foldername” will take you to the folder one level down, for example “./Data”</li>
</ul>
<p>You can use these paths to move directories using <em>cd</em> or to list the contents of the directories using <em>ls</em> or to make new directories using <em>mkdir</em></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb18-1"><span class="fu" style="color: #4758AB;">ls</span> .</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">ls</span> ./Data</span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;">mkdir</span> ./Data/A</span></code></pre></div>
<p>Make multiple directories:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb19-1"><span class="fu" style="color: #4758AB;">mkdir</span> ./Data/B ./Data/C</span></code></pre></div>
<p>List the files one level up or two levels up:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb20-1"><span class="fu" style="color: #4758AB;">ls</span> ..  <span class="co" style="color: #5E5E5E;"># for PC use dir ..</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;">ls</span> ../..</span></code></pre></div>
<p>Up one level, and over to another directory:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb21-1"><span class="fu" style="color: #4758AB;">ls</span> ../AnotherDirectory</span></code></pre></div>
<p>You can wander anywhere along your computerʻs file directory! Just add more steps to the path.</p>
</section>
</section>
<section id="executing-software-from-the-command-line" class="level1">
<h1>Executing software from the command Line</h1>
<p>coming soon</p>
</section>
<section id="piping-commands" class="level1">
<h1>Piping commands</h1>
<p>You can redirect output using <em>&gt;</em> and <em>&lt;</em> with the point indicating the direction. Here is an example. First letʻs put some contents into the files, and check the contents with the command “less” (there is also “more”):</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb22-1"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"A"</span> <span class="op" style="color: #5E5E5E;">&gt;</span> dat1.txt</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;">less</span> dat1.txt</span></code></pre></div>
<p><em>&gt;</em> pipes (or sends) output to the file named “dat1.txt”. If the file doesnʻt exist, it will create it. If it already exists, it will <em>replace</em> the file.</p>
<p>If you want to add on to the file, use “&gt;&gt;”</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb23-1"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Another letter B"</span> <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> dat1.txt</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;">less</span> dat1.txt</span></code></pre></div>
<p>Output to multiple files:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb24-1"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"c"</span> <span class="op" style="color: #5E5E5E;">&gt;</span>dat2.txt <span class="op" style="color: #5E5E5E;">&gt;</span>dat3.txt</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;">less</span> dat2.txt</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;">less</span> dat3.txt</span></code></pre></div>
<p>Concatenate (combine) multiple files using <em>cat</em> and send it to file</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb25-1"><span class="fu" style="color: #4758AB;">cat</span> dat1.txt dat2.txt dat3.txt</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;">cat</span> dat1.txt dat2.txt dat3.txt <span class="op" style="color: #5E5E5E;">&gt;</span>all.txt</span>
<span id="cb25-3"><span class="fu" style="color: #4758AB;">less</span> all.txt</span></code></pre></div>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>What is a command line interface?</p></li>
<li><p>How can using the command line help with file organization or reorganization?</p></li>
<li><p>What is the importance of choosing a good file naming system?</p></li>
<li><p>What is the difference between a relative path and an absolute path?</p></li>
</ol>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
For additional practice:
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Practice making directories with subdirectories A, B, etc. with several levels A1 A2 etc.</p></li>
<li><p>Practice moving files between different directories and at different levels.</p></li>
<li><p>Practice moving junk lying around in your downloads folder into the trash using the command line (or at least putting them into a common folder “opala” folder which you can then manually put into the trash). (FYI on the Mac Trash is in “~/.Trash” so it is a hidden folder)</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://academind.com/tutorials/terminal-zsh-basics">A tutorial for zsh on Macs</a></li>
<li><a href="https://www.educative.io/blog/bash-shell-command-cheat-sheet">Bash shell cheat sheet (mostly works for zsh too)</a></li>
<li><a href="https://www.makeuseof.com/tag/a-beginners-guide-to-the-windows-command-line/">A tutorial for CMD on PCs</a></li>
<li><a href="https://serverspace.us/support/help/windows-cmd-commands-cheat-sheet/">Windows CMD cheat sheet</a></li>
</ul>
</div>
</div>
</section>
<section id="rtistry" class="level2">
<h2 class="anchored" data-anchor-id="rtistry">rtistry</h2>
<div class="cell fig-cap-location-top">
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-01-19-your-computer-filesystems/https:/github.com/djnavarro/art/raw/master/static/gallery/flametree/extra/001_flametree_20_13.jpg" class="img-fluid"></p>
</div>
</div>
<p>[‘Flametree’ from Danielle Navarro <a href="https://art.djnavarro.net" class="uri">https://art.djnavarro.net</a>]</p>


</section>
</section>

 ]]></description>
  <category>module 1</category>
  <category>week 1</category>
  <category>programming</category>
  <category>filesystem</category>
  <category>shell</category>
  <guid>https://mbutler808.github.io/posts/2023-01-19-your-computer-filesystems/index.html</guid>
  <pubDate>Thu, 19 Jan 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-01-17-the-big-picture/index.html</link>
  <description><![CDATA[ undefined ]]></description>
  <category>module 1</category>
  <category>week 1</category>
  <category>introduction</category>
  <guid>https://mbutler808.github.io/posts/2023-01-17-the-big-picture/index.html</guid>
  <pubDate>Tue, 17 Jan 2023 10:00:00 GMT</pubDate>
  <media:content url="https://mbutler808.github.io/posts/2023-01-17-the-big-picture/whole-game.png" medium="image" type="image/png" height="49" width="144"/>
</item>
<item>
  <title>Literate Statistical Programming</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-01-26-intro-quarto/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://rafalab.github.io/dsbook/reproducible-projects-with-rstudio-and-r-markdown.html" class="uri">https://rafalab.github.io/dsbook/reproducible-projects-with-rstudio-and-r-markdown.html</a></li>
<li><a href="https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown" class="uri">https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-literate-statistical-programming.html" class="uri">https://rdpeng.github.io/Biostat776/lecture-literate-statistical-programming.html</a></li>
<li><a href="https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown" class="uri">https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to define literate programming</li>
<li>Recognize differences between available tools to for literate programming</li>
<li>Know how to efficiently work within RStudio for efficient literate programming</li>
<li>Create a R Markdown document</li>
</ul>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
</section>
<section id="the-data-science-pipeline" class="level1">
<h1>The Data Science Pipeline</h1>
<p>The basic issue is when you read a description of a data analysis, such as in an article or a technical report, for the most part, what you get is the report and nothing else.</p>
<p>Of course, everyone knows that behind the scenes <strong>there’s a lot that went into this article</strong> and that is what I call the <strong>data science pipeline</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/dspipeline.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The Data Science Pipeline</figcaption><p></p>
</figure>
</div>
<p>One basic idea to make writing reproducible reports easier is what’s known as <em>literate statistical programming</em> (or sometimes called <a href="http://www.r-project.org/conferences/DSC-2001/Proceedings/Rossini.pdf">literate statistical practice</a>). This comes from the idea of <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a> in the area of writing computer programs.</p>
<p>The idea is to <strong>think of a report or a publication as a stream of text and code</strong>.</p>
<ul>
<li><p>The text is readable by people and the code is readable by computers.</p></li>
<li><p>The analysis is described in a series of text and code chunks.</p></li>
<li><p>Each kind of code chunk will do something like load some data or compute some results.</p></li>
<li><p>Each text chunk will relay something in a human readable language.</p></li>
</ul>
<p>There might also be <strong>presentation code</strong> that formats tables and figures and there’s article text that explains what’s going on around all this code. This stream of text and code is a literate statistical program or a literate statistical analysis.</p>
<section id="weaving-and-tangling" class="level3">
<h3 class="anchored" data-anchor-id="weaving-and-tangling">Weaving and Tangling</h3>
<p>Literate programs by themselves are a bit difficult to work with, but they can be processed in two important ways.</p>
<p>Literate programs can be <strong>weaved</strong> to produce human readable documents like PDFs or HTML web pages, and they can <strong>tangled</strong> to produce machine-readable “documents”, or in other words, machine readable code.</p>
<p>The basic idea behind literate programming in order to generate the different kinds of output you might need, <strong>you only need a single source document</strong>—you can weave and tangle to get the rest.</p>
<p>In order to use a system like this you need a documentational language, that’s human readable, and you need a programming language that’s machine readable (or can be compiled/interpreted into something that’s machine readable).</p>
</section>
<section id="sweave" class="level3">
<h3 class="anchored" data-anchor-id="sweave">Sweave</h3>
<p>One of the original literate programming systems in R that was designed to do this was called Sweave. Sweave enables users to combine R code with a documentation program called LaTeX.</p>
<p><strong>Sweave files ends a <code>.Rnw</code></strong> and have R code weaved through the document:</p>
<pre><code>&lt;&lt;plot1, height=4, width=5, eval=FALSE&gt;&gt;=
data(airquality)
plot(airquality$Ozone ~ airquality$Wind)
@</code></pre>
<p>Once you have created your <code>.Rnw</code> file, Sweave will process the file, executing the R chunks and replacing them with output as appropriate before creating the PDF document.</p>
<p>It was originally developed by Fritz Leisch, who is a core member of R, and the code base is still maintained by R Core. The Sweave system comes with any installation of R.</p>
<p>There are many limitations to the original Sweave system.</p>
<ul>
<li>One of the limitations is that it is <strong>focused primarily on LaTeX</strong>, which is not a documentation language that many people are familiar with.</li>
<li>Therefore, it <strong>can be difficult to learn this type of markup language</strong> if you’re not already in a field that uses it regularly.</li>
<li>Sweave also <strong>lacks a lot of features that people find useful</strong> like caching, and multiple plots per page and mixing programming languages.</li>
</ul>
<p>Instead, folks have <strong>moved towards using something called knitr</strong>, which offers everything Sweave does, plus it extends it further.</p>
<ul>
<li>With Sweave, additional tools are required for advanced operations, whereas knitr supports more internally. We’ll discuss knitr below.</li>
</ul>
</section>
<section id="rmarkdown" class="level3">
<h3 class="anchored" data-anchor-id="rmarkdown">rmarkdown</h3>
<p>Another choice for literate programming is to build documents based on <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> language. A markdown file is a plain text file that is typically given the extension <code>.md.</code>. The <a href="https://CRAN.R-project.org/package=rmarkdown"><code>rmarkdown</code></a> R package takes a R Markdown file (<code>.Rmd</code>) and weaves together R code chunks like this:</p>
<pre><code>```{r plot1, height=4, width=5, eval=FALSE, echo=TRUE}
data(airquality)
plot(airquality$Ozone ~ airquality$Wind)
```</code></pre>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The best resource for learning about R Markdown this by Yihui Xie, J. J. Allaire, and Garrett Grolemund:</p>
<ul>
<li><a href="https://bookdown.org/yihui/rmarkdown" class="uri">https://bookdown.org/yihui/rmarkdown</a></li>
</ul>
<p>The R Markdown Cookbook by Yihui Xie, Christophe Dervieux, and Emily Riederer is really good too:</p>
<ul>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook" class="uri">https://bookdown.org/yihui/rmarkdown-cookbook</a></li>
</ul>
<p>The authors of the 2nd book describe the motivation for the 2nd book as:</p>
<blockquote class="blockquote">
<p>“However, we have received comments from our readers and publisher that it would be beneficial to provide more practical and relatively short examples to show the interesting and useful usage of R Markdown, because it can be daunting to find out how to achieve a certain task from the aforementioned reference book (put another way, that book is too dry to read). As a result, this cookbook was born.”</p>
</blockquote>
</div>
</div>
<p>Because this is lecture is built in a <code>.qmd</code> file (which is very similar to a <code>.Rmd</code> file), let’s demonstrate how this work. I am going to change <code>eval=FALSE</code> to <code>eval=TRUE</code>.</p>
<div class="cell" height="4" width="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">data</span>(airquality)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">plot</span>(airquality<span class="sc" style="color: #5E5E5E;">$</span>Ozone <span class="sc" style="color: #5E5E5E;">~</span> airquality<span class="sc" style="color: #5E5E5E;">$</span>Wind)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-01-26-intro-quarto/index_files/figure-html/plot2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Why do we not see the back ticks ``` anymore in the code chunk above that made the plot?</li>
<li>What do you think we should do if we want to have the code executed, but we want to hide the code that made it?</li>
</ol>
</div>
</div>
<p>Before we leave this section, I find that there is quite a bit of terminology to understand the magic behind <code>rmarkdown</code> that can be confusing, so let’s break it down:</p>
<ul>
<li><a href="https://pandoc.org">Pandoc</a>. Pandoc is a command line tool with no GUI that converts documents (e.g.&nbsp;from number of different markup formats to many other formats, such as .doc, .pdf etc). It is completely independent from R (but does come bundled with RStudio).</li>
<li><a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> (<strong>markup language</strong>). Markdown is a lightweight <a href="https://en.wikipedia.org/wiki/Markup_language">markup language</a> with plain text formatting syntax designed so that it can be converted to HTML and many other formats. A markdown file is a plain text file that is typically given the extension <code>.md.</code> It is completely independent from R.</li>
<li><a href="https://CRAN.R-project.org/package=markdown"><code>markdown</code></a> (<strong>R package</strong>). <code>markdown</code> is an R package which converts <code>.md</code> files into HTML. It is no longer recommended for use has been surpassed by <a href="https://CRAN.R-project.org/package=rmarkdown"><code>rmarkdown</code></a> (discussed below).</li>
<li>R Markdown (<strong>markup language</strong>). R Markdown is an extension of the markdown syntax. R Markdown files are plain text files that typically have the file extension <code>.Rmd</code>.</li>
<li><a href="https://CRAN.R-project.org/package=rmarkdown"><code>rmarkdown</code></a> (<strong>R package</strong>). The R package <code>rmarkdown</code> is a library that uses pandoc to process and convert <code>.Rmd</code> files into a number of different formats. This core function is <code>rmarkdown::render()</code>. <strong>Note</strong>: this package only deals with the markdown language. If the input file is e.g.&nbsp;<code>.Rhtml</code> or <code>.Rnw</code>, then you need to use <code>knitr</code> prior to calling pandoc (see below).</li>
</ul>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Check out the R Markdown Quick Tour for more:</p>
<ul>
<li><a href="https://rmarkdown.rstudio.com/authoring_quick_tour.html" class="uri">https://rmarkdown.rstudio.com/authoring_quick_tour.html</a></li>
</ul>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-01-26-intro-quarto/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/rmarkdown_rockstar.png" class="img-fluid figure-img" style="width:80.0%"></p>
<p></p><figcaption class="figure-caption">Artwork by Allison Horst on RMarkdown</figcaption><p></p>
</figure>
</div>
</section>
<section id="knitr" class="level3">
<h3 class="anchored" data-anchor-id="knitr">knitr</h3>
<p>One of the alternative that has come up in recent times is something called <code>knitr</code>.</p>
<ul>
<li>The <code>knitr</code> package for R takes a lot of these ideas of literate programming and updates and improves upon them.</li>
<li><code>knitr</code> still uses R as its programming language, but it allows you to mix other programming languages in.</li>
<li>You can also use a variety of documentation languages now, such as LaTeX, markdown and HTML.</li>
<li><code>knitr</code> was developed by Yihui Xie while he was a graduate student at Iowa State and it has become a very popular package for writing literate statistical programs.</li>
</ul>
<p>Knitr takes a plain text document with embedded code, executes the code and ‘knits’ the results back into the document.</p>
<p>For for example, it converts</p>
<ul>
<li>An R Markdown (<code>.Rmd)</code> file into a standard markdown file (<code>.md</code>)</li>
<li>An <code>.Rnw</code> (Sweave) file into to <code>.tex</code> format.</li>
<li>An <code>.Rhtml</code> file into to <code>.html</code>.</li>
</ul>
<p>The core function is <code>knitr::knit()</code> and by default this will look at the input document and try and guess what type it is e.g.&nbsp;<code>Rnw</code>, <code>Rmd</code> etc.</p>
<p>This core function performs three roles:</p>
<ul>
<li>A <strong>source parser</strong>, which looks at the input document and detects which parts are code that the user wants to be evaluated.</li>
<li>A <strong>code evaluator</strong>, which evaluates this code</li>
<li>An <strong>output renderer</strong>, which writes the results of evaluation back to the document in a format which is interpretable by the raw output type. For instance, if the input file is an <code>.Rmd</code>, the output render marks up the output of code evaluation in <code>.md</code> format.</li>
</ul>
<div class="cell" data-layout-align="center" data-preview="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-01-26-intro-quarto/https:/d33wubrfki0l68.cloudfront.net/61d189fd9cdf955058415d3e1b28dd60e1bd7c9b/9791d/images/rmarkdownflow.png" class="img-fluid figure-img" style="width:60.0%"></p>
<p></p><figcaption class="figure-caption">Converting a Rmd file to many outputs using knitr and pandoc</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>[<a href="https://rmarkdown.rstudio.com/authoring_quick_tour.html">Source</a>]</p>
<p>As seen in the figure above, from there pandoc is used to convert e.g.&nbsp;a <code>.md</code> file into many other types of file formats into a <code>.html</code>, etc.</p>
<p>So in summary:</p>
<blockquote class="blockquote">
<p>“R Markdown stands on the shoulders of knitr and Pandoc. The former executes the computer code embedded in Markdown, and converts R Markdown to Markdown. The latter renders Markdown to the output format you want (such as PDF, HTML, Word, and so on).”</p>
</blockquote>
<p>[<a href="https://bookdown.org/yihui/rmarkdown/">Source</a>]</p>
</section>
</section>
<section id="create-and-knit-your-first-r-markdown-document" class="level1">
<h1>Create and Knit Your First R Markdown Document</h1>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dY9KNat_vYs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>When creating your first R Markdown document, in RStudio you can</p>
<ol type="1">
<li><p>Go to File &gt; New File &gt; R Markdown…</p></li>
<li><p>Feel free to edit the Title</p></li>
<li><p>Make sure to select “Default Output Format” to be HTML</p></li>
<li><p>Click “OK”. RStudio creates the R Markdown document and places some boilerplate text in there just so you can see how things are setup.</p></li>
<li><p>Click the “Knit” button (or go to File &gt; Knit Document) to make sure you can create the HTML output</p></li>
</ol>
<p>If you successfully knit your first R Markdown document, then congratulations!</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-01-26-intro-quarto/https:/media.giphy.com/media/L4ZZNbDpOCfiX8uYSd/giphy.gif" class="img-fluid figure-img" style="width:60.0%"></p>
<p></p><figcaption class="figure-caption">Mission accomplished!</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="websites-and-books-in-r-markdown" class="level1 page-columns page-full">
<h1>Websites and Books in R Markdown</h1>
<p>Now that you are on the road to using R Markdown documents, it is important to know about other wonderful things you do with these documents. For example, let’s say you have multiple <code>.Rmd</code> documents that you want to put together into a website, blog, book, etc.</p>
<p>There are primarily two ways to build multiple <code>.Rmd</code> documents together:</p>
<ol type="1">
<li><a href="https://bookdown.org/yihui/blogdown/"><strong>blogdown</strong></a> for building websites</li>
<li><a href="https://bookdown.org/yihui/bookdown/"><strong>bookdown</strong></a> for authoring books</li>
</ol>
<p>In this section, we briefly introduce both packages, but it’s worth mentioning that the <a href="https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html"><strong>rmarkdown</strong> package also has a built-in site generator</a> to build websites.</p>
<section id="blogdown" class="level3">
<h3 class="anchored" data-anchor-id="blogdown">blogdown</h3>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-01-26-intro-quarto/https:/bookdown.org/yihui/blogdown/images/logo.png" class="img-fluid figure-img" style="width:30.0%"></p>
<p></p><figcaption class="figure-caption">blogdown logo</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>[<a href="https://bookdown.org/yihui/bookdown/images/logo.png">Source</a>]</p>
<p>The <code>blogdown</code> R package is built on top of R Markdown, supports multi-page HTML output to write a blog post or a general page in an Rmd document, or a plain Markdown document.</p>
<ul>
<li>These source documents (e.g.&nbsp;<code>.Rmd</code> or <code>.md</code>) are built into a static website (i.e.&nbsp;a bunch of static HTML files, images and CSS files).</li>
<li>Using this folder of files, it is very easy to publish it to any web server as a website.</li>
<li>Also, it is easy to maintain because it is only a single folder.</li>
</ul>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example, my personal website was built in blogdown:</p>
<ul>
<li><a href="https://www.stephaniehicks.com" class="uri">https://www.stephaniehicks.com</a></li>
</ul>
<p>Other really great examples can be found here:</p>
<ul>
<li><a href="https://awesome-blogdown.com" class="uri">https://awesome-blogdown.com</a></li>
</ul>
</div>
</div>
<p>Other advantages include the content likely being reproducible, easier to maintain, and easy to convert pages to e.g.&nbsp;PDF or other formats in the future if you do not want to convert to HTML files.</p>
<p>Because it is based on the Markdown syntax, it is easy to write technical documents, including math equations, insert figures or tables with captions, cross-reference with figure or table numbers, add citations, and present theorems or proofs.</p>
<p>Here’s a video you can watch of someone making a blogdown website.</p>
<p align="center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/AADnslLpzJ4" frameborder="0" allowfullscreen="">
</iframe>
</p>
<p>[<a href="https://www.youtube.com/watch?v=AADnslLpzJ4">Source</a> on YouTube]</p>
</section>
<section id="bookdown" class="level3">
<h3 class="anchored" data-anchor-id="bookdown">bookdown</h3>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-01-26-intro-quarto/https:/bookdown.org/yihui/bookdown/images/logo.png" class="img-fluid figure-img" style="width:30.0%"></p>
<p></p><figcaption class="figure-caption">book logo</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>[<a href="https://bookdown.org/yihui/bookdown/images/logo.png">Source</a>]</p>
<p>Similar to <code>blogdown</code>, the <code>bookdown</code> R package is built on top of R Markdown, but also offers features like multi-page HTML output, numbering and cross-referencing figures/tables/sections/equations, inserting parts/appendices, and imported the GitBook style (<a href="https://www.gitbook.com" class="uri">https://www.gitbook.com</a>) to create elegant and appealing HTML book pages. Share</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example, the previous version of this course was built in bookdown:</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776" class="uri">https://rdpeng.github.io/Biostat776</a></li>
</ul>
<p>Another example is the <a href="https://jhudatascience.org/tidyversecourse/">Tidyverse Skills for Data Science</a> book that the JHU Data Science Lab wrote. The github repo that contains all the <code>.Rmd</code> files can be found <a href="https://github.com/jhudsl/tidyversecourse">here</a>.</p>
<ul>
<li><a href="https://jhudatascience.org/tidyversecourse" class="uri">https://jhudatascience.org/tidyversecourse</a></li>
<li><a href="https://github.com/jhudsl/tidyversecourse" class="uri">https://github.com/jhudsl/tidyversecourse</a></li>
</ul>
</div>
</div>
<p><strong>Note</strong>: Even though the word “book” is in “bookdown”, this package is not only for books. It really can be anything that consists of multiple <code>.Rmd</code> documents meant to be read in a linear sequence such as course dissertation/thesis, handouts, study notes, a software manual, a thesis, or even a diary.</p>
<ul>
<li>https://bookdown.org/yihui/rmarkdown/basics-examples.html#examples-books</li>
</ul>
</section>
<section id="distill" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="distill">distill</h3>
<p>There is another great way to build blogs or websites using the <a href="https://rstudio.github.io/distill/">distill for R Markdown</a>.</p>
<ul>
<li><a href="https://rstudio.github.io/distill" class="uri">https://rstudio.github.io/distill</a></li>
</ul>
<p>Distill for R Markdown combines the technical authoring features of the <a href="https://github.com/distillpub/template">Distill web framework</a> (optimized for scientific and technical communication) with <a href="https://rmarkdown.rstudio.com">R Markdown</a>, enabling a fully reproducible workflow based on literate programming <span class="citation" data-cites="knuth1984">(Knuth 1984)</span>.</p>
<p>Distill articles include:</p>
<ul>
<li>Reader-friendly typography that adapts well to mobile devices.</li>
<li>Features essential to technical writing like LaTeX math, citations, and footnotes.</li>
<li>Flexible figure layout options (e.g.&nbsp;displaying figures at a larger width than the article text).</li>
<li>Attractively rendered tables with optional support for pagination.</li>
<li>Support for a wide variety of diagramming tools for illustrating concepts. The ability to incorporate JavaScript and D3-based interactive visualizations.</li>
<li>A variety of ways to publish articles, including support for publishing sets of articles as a Distill website or as a Distill blog.</li>
</ul>
<p>The course website from last year was built in Distill for R Markdown:</p>
<ul>
<li>Website: <a href="https://stephaniehicks.com/jhustatcomputing2021" class="uri">https://stephaniehicks.com/jhustatcomputing2021</a></li>
<li>Github: <a href="https://github.com/stephaniehicks/jhustatcomputing2021" class="uri">https://github.com/stephaniehicks/jhustatcomputing2021</a></li>
</ul>
<p>Some other cool things about distill is the use of footnotes and asides.</p>
<p>For example <sup>1</sup>. The number of the footnote will be automatically generated.</p>
<p>You can also optionally include notes in the gutter of the article (immediately to the right of the article text). To do this use the aside tag.</p>
<aside>
This content will appear in the gutter of the article.
</aside>
<p>You can also include figures in the gutter. Just enclose the code chunk which generates the figure in an aside tag</p>
</section>
</section>
<section id="tips-and-tricks-in-r-markdown-in-rstudio" class="level1">
<h1>Tips and tricks in R Markdown in RStudio</h1>
<p>Here are shortcuts and tips on efficiently using RStudio to improve how you write code.</p>
<section id="run-code" class="level3">
<h3 class="anchored" data-anchor-id="run-code">Run code</h3>
<p>If you want to run a code chunk:</p>
<pre><code>command + Enter on Mac
Ctrl + Enter on Windows</code></pre>
</section>
<section id="insert-a-comment-in-r-and-r-markdown" class="level3">
<h3 class="anchored" data-anchor-id="insert-a-comment-in-r-and-r-markdown">Insert a comment in R and R Markdown</h3>
<p>To insert a comment:</p>
<pre><code>command + Shift + C on Mac
Ctrl + Shift + C on Windows</code></pre>
<p>This shortcut can be used both for:</p>
<ul>
<li>R code when you want to comment your code. It will add a <code>#</code> at the beginning of the line</li>
<li>for text in R Markdown. It will add <code>&lt;!--</code> and <code>--&gt;</code> around the text</li>
</ul>
<p>Note that if you want to comment more than one line, select all the lines you want to comment then use the shortcut. If you want to uncomment a comment, apply the same shortcut.</p>
</section>
<section id="knit-a-r-markdown-document" class="level3">
<h3 class="anchored" data-anchor-id="knit-a-r-markdown-document">Knit a R Markdown document</h3>
<p>You can knit R Markdown documents by using this shortcut:</p>
<pre><code>command + Shift + K on Mac
Ctrl + Shift + K on Windows</code></pre>
</section>
<section id="code-snippets" class="level3">
<h3 class="anchored" data-anchor-id="code-snippets">Code snippets</h3>
<p>Code snippets is usually a few characters long and is used as a shortcut to insert a common piece of code. You simply type a few characters then press <code>Tab</code> and it will complete your code with a larger code. <code>Tab</code> is then used again to navigate through the code where customization is required. For instance, if you type <code>fun</code> then press <code>Tab</code>, it will auto-complete the code with the required code to create a function:</p>
<pre><code>name &lt;- function(variables) {

}</code></pre>
<p>Pressing <code>Tab</code> again will jump through the placeholders for you to edit it. So you can first edit the name of the function, then the variables and finally the code inside the function (try by yourself!).</p>
<p>There are many code snippets by default in RStudio. Here are the code snippets I use most often:</p>
<ul>
<li><code>lib</code> to call <code>library()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(package)</span></code></pre></div>
</div>
<ul>
<li><code>mat</code> to create a matrix</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">matrix</span>(data, <span class="at" style="color: #657422;">nrow =</span> rows, <span class="at" style="color: #657422;">ncol =</span> cols)</span></code></pre></div>
</div>
<ul>
<li><code>if</code>, <code>el</code>, and <code>ei</code> to create conditional expressions such as <code>if() {}</code>, <code>else {}</code> and <code>else if () {}</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="cf" style="color: #003B4F;">if</span> (condition) {</span>
<span id="cb10-2"></span>
<span id="cb10-3">}</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb10-6"></span>
<span id="cb10-7">}</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (condition) {</span>
<span id="cb10-10"></span>
<span id="cb10-11">}</span></code></pre></div>
</div>
<ul>
<li><code>fun</code> to create a function</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(variables) {</span>
<span id="cb11-2"></span>
<span id="cb11-3">}</span></code></pre></div>
</div>
<ul>
<li><code>for</code> to create for loops</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="cf" style="color: #003B4F;">for</span> (variable <span class="cf" style="color: #003B4F;">in</span> vector) {</span>
<span id="cb12-2"></span>
<span id="cb12-3">}</span></code></pre></div>
</div>
<ul>
<li><code>ts</code> to insert a comment with the current date and time (useful if you have very long code and share it with others so they see when it has been edited)</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Tue Jan 21 20:20:14 2020 ------------------------------</span></span></code></pre></div>
</div>
<p>You can see all default code snippets and add yours by clicking on Tools &gt; Global Options… &gt; Code (left sidebar) &gt; Edit Snippets…</p>
</section>
<section id="ordered-list-in-r-markdown" class="level3">
<h3 class="anchored" data-anchor-id="ordered-list-in-r-markdown">Ordered list in R Markdown</h3>
<p>In R Markdown, when creating an ordered list such as this one:</p>
<ol type="1">
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ol>
<p>Instead of bothering with the numbers and typing</p>
<pre><code>1. Item 1
2. Item 2
3. Item 3</code></pre>
<p>you can simply type</p>
<pre><code>1. Item 1
1. Item 2
1. Item 3</code></pre>
<p>for the exact same result (try it yourself or check the code of this article!). This way you do not need to bother which number is next when creating a new item.</p>
<p>To go even further, any numeric will actually render the same result as long as the first item is the number you want to start from. For example, you could type:</p>
<pre><code>1. Item 1
7. Item 2
3. Item 3</code></pre>
<p>which renders</p>
<ol type="1">
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ol>
<p>However, I suggest always using the number you want to start from for all items because if you move one item at the top, the list will start with this new number. For instance, if we move <code>7. Item 2</code> from the previous list at the top, the list becomes:</p>
<pre><code>7. Item 2
1. Item 1
3. Item 3</code></pre>
<p>which incorrectly renders</p>
<ol start="7" type="1">
<li>Item 2</li>
<li>Item 1</li>
<li>Item 3</li>
</ol>
</section>
<section id="new-code-chunk-in-r-markdown" class="level3">
<h3 class="anchored" data-anchor-id="new-code-chunk-in-r-markdown">New code chunk in R Markdown</h3>
<p>When editing R Markdown documents, you will need to insert a new R code chunk many times. The following shortcuts will make your life easier:</p>
<pre><code>command + option + I on Mac (or command + alt + I depending on your keyboard)
Ctrl + ALT + I on Windows</code></pre>
</section>
<section id="reformat-code" class="level3">
<h3 class="anchored" data-anchor-id="reformat-code">Reformat code</h3>
<p>A clear and readable code is always easier and faster to read (and look more professional when sharing it to collaborators). To automatically apply the most common coding guidelines such as white spaces, indents, etc., use:</p>
<pre><code>cmd + Shift + A on Mac
Ctrl + Shift + A on Windows</code></pre>
<p>So for example the following code which does not respect the guidelines (and which is not easy to read):</p>
<pre><code>1+1
  for(i in 1:10){if(!i%%2){next}
print(i)
 }</code></pre>
<p>becomes much more neat and readable:</p>
<pre><code>1 + 1
for (i in 1:10) {
  if (!i %% 2) {
    next
  }
  print(i)
}</code></pre>
</section>
<section id="rstudio-addins" class="level3">
<h3 class="anchored" data-anchor-id="rstudio-addins">RStudio addins</h3>
<p>RStudio addins are extensions which provide a simple mechanism for executing advanced R functions from within RStudio. In simpler words, when executing an addin (by clicking a button in the Addins menu), the corresponding code is executed without you having to write the code. RStudio addins have the advantage that they allow you to execute complex and advanced code much more easily than if you would have to write it yourself.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>For more information about RStudio addins, check out</strong>:</p>
<ul>
<li><a href="https://rstudio.github.io/rstudioaddins" class="uri">https://rstudio.github.io/rstudioaddins</a></li>
<li><a href="https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown" class="uri">https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown</a></li>
</ul>
</div>
</div>
</section>
<section id="others" class="level3">
<h3 class="anchored" data-anchor-id="others">Others</h3>
<p>Similar to many other programs, you can also use:</p>
<ul>
<li><code>command + Shift + N</code> on Mac and <code>Ctrl + Shift + N</code> on Windows to open a new R Script</li>
<li><code>command + S</code> on Mac and <code>Ctrl + S</code> on Windows to save your current script or R Markdown document</li>
</ul>
<p>Check out Tools –&gt; Keyboard Shortcuts Help to see a long list of these shortcuts.</p>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
</section>
<section id="questions-1" class="level3 questions">
<h3 class="anchored" data-anchor-id="questions-1">Questions</h3>
<ol type="1">
<li><p>What is literate programming?</p></li>
<li><p>What was the first literate statistical programming tool to weave together a statistical language (R) with a markup language (LaTeX)?</p></li>
<li><p>What is <code>knitr</code> and how is different than other literate statistical programming tools?</p></li>
<li><p>Where can you find a list of other commands that help make your code writing more efficient in RStudio?</p></li>
</ol>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://indrajeetpatil.github.io/RmarkdownTips/">RMarkdown Tips and Tricks</a> by Indrajeet Patil</li>
<li><a href="https://bookdown.org/yihui/rmarkdown" class="uri">https://bookdown.org/yihui/rmarkdown</a></li>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook" class="uri">https://bookdown.org/yihui/rmarkdown-cookbook</a></li>
</ul>
</div>
</div>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-knuth1984" class="csl-entry">
Knuth, Donald E. 1984. <span>“Literate Programming.”</span> <em>Comput. J.</em> 27 (2): 97–111. <a href="https://doi.org/10.1093/comjnl/27.2.97">https://doi.org/10.1093/comjnl/27.2.97</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This will become a hover-able footnote↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>module 1</category>
  <category>week 1</category>
  <category>R Markdown</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2023-01-26-intro-quarto/index.html</guid>
  <pubDate>Thu, 01 Sep 2022 10:00:00 GMT</pubDate>
  <media:content url="https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/rmarkdown_rockstar.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
