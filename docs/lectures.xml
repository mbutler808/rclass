<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ZOOL710 Data Science in R for Biologists</title>
<link>https://mbutler808.github.io/lectures.html</link>
<atom:link href="https://mbutler808.github.io/lectures.xml" rel="self" type="application/rss+xml"/>
<description>Course website for Data Science in R for Biologists (ZOOL 710) in Spring 2023</description>
<generator>quarto-1.2.313</generator>
<lastBuildDate>Tue, 25 Apr 2023 10:00:00 GMT</lastBuildDate>
<item>
  <title>The ggtree-verse</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-25-ggtree/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>References for this Material:</p>
<ul>
<li>Treedata book by Guangchuang Yu <span class="citation" data-cites="Yu:2022">(Yu 2022)</span> <a href="https://yulab-smu.top/treedata-book/" class="uri">https://yulab-smu.top/treedata-book/</a></li>
<li><a href="https://bioconnector.github.io/workshops/r-ggtree.html" class="uri">https://bioconnector.github.io/workshops/r-ggtree.html</a></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning Objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand information content of phylogenetically structured data</li>
<li>Understand particular R tree formats in ape, phylobase, and ouch</li>
<li>Be able to hand-make trees</li>
<li>Be able to import trees from nexus, newick, and other major formats in use today</li>
<li>Be able to convert trees from one format to another</li>
<li>Be able to perform basic tree manipulations</li>
</ul>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
R packages you will need
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>ape</code></li>
<li><code>ggtree</code></li>
<li><code>tidytree</code></li>
<li><code>treeio</code></li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p><code>ggtree</code> is a powerful phylogenetic tree plotting package, that is used alongside <code>treeio</code> and <code>tidytree</code> packages to import/export and to manipulate phylogenetic trees, respectively. These packages allow you to subset or combine trees with data, annotate, and plot in so many different ways using the grammar of graphics.</p>
<p>Because itʻs written in the style of <code>ggplot2</code> and the <code>tidyverse</code>, there are a lot of functions to remember, and now there are also multiple object types. The key to working effectively with <code>ggtree</code> is to be aware of what type of object you are working with, whether it is a <code>dataframe</code>, a <code>tibble</code>, a <code>phylo</code> tree, a <code>treedata</code> tibble, or <code>ggtree</code> object. It is easy to convert between these at will if you know what you are dealing with.</p>
</section>
<section id="phylo---treedata" class="level1">
<h1>phylo -&gt; treedata</h1>
<p>Functions like <code>read.tree</code> amd <code>read.nexus</code>, etc. will read in objects of class <code>phylo</code> (they are actually referencing the ape function).</p>
<p>To show this, letʻs first generate a random tree using <code>ape::rtree()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">require</span>(ape)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">require</span>(ggtree)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">require</span>(treeio)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">tree <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rtree</span>(<span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">class</span>(tree)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "phylo"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">plot</span>(tree)  <span class="co" style="color: #5E5E5E;"># ape plotting function</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Note: <code>ggtree</code> can also accept <code>phylo</code> objects as arguments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">ggtree</span>(tree)  <span class="co" style="color: #5E5E5E;"># ggtree plotting function</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>To save as newick and nexus formats, <code>treeio</code> has the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">treeio<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">write.nexus</span>(tree, <span class="at" style="color: #657422;">file=</span><span class="st" style="color: #20794D;">"tree.nex"</span>)</span>
<span id="cb6-2">treeio<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">write.tree</span>(tree, <span class="at" style="color: #657422;">file=</span><span class="st" style="color: #20794D;">"tree.tree"</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">list.files</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "_index.qmd"         "anolis.SSD.raw.csv" "bigtree.nex"       
 [4] "ggtree_functions.R" "ggtree.R"           "index_files"       
 [7] "index.qmd"          "index.rmarkdown"    "tree.nex"          
[10] "tree.tree"         </code></pre>
</div>
</div>
<p>Take a look at these files. They should be in nexus and newick formats, respectively.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">tree_nex <span class="ot" style="color: #003B4F;">&lt;-</span> treeio<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read.nexus</span>(<span class="at" style="color: #657422;">file=</span><span class="st" style="color: #20794D;">"tree.nex"</span>)</span>
<span id="cb8-2">tree_new <span class="ot" style="color: #003B4F;">&lt;-</span> treeio<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read.newick</span>(<span class="at" style="color: #657422;">file=</span><span class="st" style="color: #20794D;">"tree.tree"</span>)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">class</span>(tree_nex)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "phylo"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">class</span>(tree_new)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "phylo"</code></pre>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you have trees from <code>iqtree</code>, <code>BEAST</code> etc., you should use the specialized read functions because they will capture the metadata embedded in the treeformat including support values.</p>
</div>
</div>
<section id="coverting-between-data-types" class="level2">
<h2 class="anchored" data-anchor-id="coverting-between-data-types">Coverting between data types</h2>
<p>The main functions for coersion are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">as.phylo</span> (tree)  <span class="co" style="color: #5E5E5E;"># to phylo</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Phylogenetic tree with 20 tips and 19 internal nodes.

Tip labels:
  t20, t10, t3, t7, t6, t18, ...

Rooted; includes branch lengths.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">as.treedata</span>(tree) <span class="co" style="color: #5E5E5E;"># to treedata</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'treedata' S4 object'.

...@ phylo:

Phylogenetic tree with 20 tips and 19 internal nodes.

Tip labels:
  t20, t10, t3, t7, t6, t18, ...

Rooted; includes branch lengths.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">treedata <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.treedata</span>(tree)  </span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">as_tibble</span>(treedata)  <span class="co" style="color: #5E5E5E;"># to tibble</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 39 × 4
   parent  node branch.length label
    &lt;int&gt; &lt;int&gt;         &lt;dbl&gt; &lt;chr&gt;
 1     22     1       0.915   t20  
 2     26     2       0.532   t10  
 3     26     3       0.847   t3   
 4     25     4       0.118   t7   
 5     28     5       0.690   t6   
 6     28     6       0.725   t18  
 7     29     7       0.261   t14  
 8     31     8       0.00314 t9   
 9     31     9       0.0128  t4   
10     30    10       0.289   t12  
# … with 29 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="simulate-phenotypic-data" class="level1">
<h1>Simulate phenotypic data</h1>
<section id="add-tiplabels" class="level3">
<h3 class="anchored" data-anchor-id="add-tiplabels">Add tiplabels</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">ggtree</span>(tree) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_tiplab</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="get-the-tip-labels" class="level3">
<h3 class="anchored" data-anchor-id="get-the-tip-labels">Get the tip labels</h3>
<p>There is a function <code>get_taxa_name()</code> which is very handy, but NOTE: its argument is a <code>ggtree</code> object, not a <code>treedata</code> object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggtree</span>(tree) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_tiplab</span>()</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">get_taxa_name</span>(p)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "t4"  "t9"  "t12" "t14" "t18" "t6"  "t3"  "t10" "t7"  "t17" "t15" "t13"
[13] "t11" "t5"  "t2"  "t16" "t20" "t1"  "t8"  "t19"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">taxa <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_taxa_name</span>(p)</span></code></pre></div>
</div>
<p>Simulate a data matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(taxa)</span>
<span id="cb22-2">size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="at" style="color: #657422;">mean=</span><span class="dv" style="color: #AD0000;">20</span>, <span class="at" style="color: #657422;">sd=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb22-3">habitat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"desert"</span>, <span class="st" style="color: #20794D;">"grassland"</span>, <span class="st" style="color: #20794D;">"forest"</span>, <span class="st" style="color: #20794D;">"intertidal"</span>), <span class="at" style="color: #657422;">size=</span>n, <span class="at" style="color: #657422;">replace=</span>T)</span>
<span id="cb22-4">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>( <span class="st" style="color: #20794D;">"label"</span><span class="ot" style="color: #003B4F;">=</span> taxa, size, habitat)</span>
<span id="cb22-5">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   label      size    habitat
1     t4 13.190731     desert
2     t9 19.541849  grassland
3    t12 24.957978 intertidal
4    t14 14.831695     forest
5    t18 21.221452     desert
6     t6 10.671196 intertidal
7     t3 15.308488 intertidal
8    t10 19.347808     desert
9     t7 21.088887     forest
10   t17  7.394603     desert
11   t15 14.215988 intertidal
12   t13 11.341547     desert
13   t11 17.769369 intertidal
14    t5 13.667986  grassland
15    t2 18.265933  grassland
16   t16 18.950921     desert
17   t20 21.236842 intertidal
18    t1 17.947431  grassland
19    t8 11.629983 intertidal
20   t19 13.964597     forest</code></pre>
</div>
</div>
<p>See our ggtree as a treedata object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">as.treedata</span>(p) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as.data.frame  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   parent node branch.length label
1      22    1   0.914660785   t20
2      26    2   0.531915339   t10
3      26    3   0.847355583    t3
4      25    4   0.117541116    t7
5      28    5   0.689902873    t6
6      28    6   0.725284685   t18
7      29    7   0.260759907   t14
8      31    8   0.003144709    t9
9      31    9   0.012793490    t4
10     30   10   0.289318340   t12
11     33   11   0.102822345   t16
12     33   12   0.361748627    t2
13     34   13   0.406217780    t5
14     36   14   0.855577735   t13
15     37   15   0.122123984   t15
16     37   16   0.055801166   t17
17     35   17   0.411075242   t11
18     38   18   0.613953796   t19
19     39   19   0.453259011    t8
20     39   20   0.470733995    t1
21     21   21            NA  &lt;NA&gt;
22     21   22   0.768506521  &lt;NA&gt;
23     22   23   0.153267556  &lt;NA&gt;
24     23   24   0.854931734  &lt;NA&gt;
25     24   25   0.451706708  &lt;NA&gt;
26     25   26   0.354669122  &lt;NA&gt;
27     24   27   0.472259514  &lt;NA&gt;
28     27   28   0.512345967  &lt;NA&gt;
29     27   29   0.681458147  &lt;NA&gt;
30     29   30   0.226860373  &lt;NA&gt;
31     30   31   0.391176049  &lt;NA&gt;
32     23   32   0.034940638  &lt;NA&gt;
33     32   33   0.130967953  &lt;NA&gt;
34     32   34   0.677282662  &lt;NA&gt;
35     34   35   0.356319352  &lt;NA&gt;
36     35   36   0.147734449  &lt;NA&gt;
37     36   37   0.980167842  &lt;NA&gt;
38     21   38   0.107984108  &lt;NA&gt;
39     38   39   0.106352382  &lt;NA&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">  <span class="co" style="color: #5E5E5E;"># ggtree -&gt; treedata -&gt; tibble -&gt; dataframe</span></span></code></pre></div>
</div>
</section>
</section>
<section id="merge-tree-with-data" class="level1">
<h1>Merge tree with data</h1>
<p>Now that we have a matching key in both the tree and data objects, we can join the tree with the dataframe by those matching labels using <code>ggtree</code>ʻs <code>full_join</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">ttree <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">full_join</span>(tree, dat, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"label"</span>) </span>
<span id="cb27-2">ttree</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'treedata' S4 object'.

...@ phylo:

Phylogenetic tree with 20 tips and 19 internal nodes.

Tip labels:
  t20, t10, t3, t7, t6, t18, ...

Rooted; includes branch lengths.

with the following features available:
  'size', 'habitat'.

# The associated data tibble abstraction: 39 × 5
# The 'node', 'label' and 'isTip' are from the phylo tree.
    node label isTip  size habitat   
   &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;chr&gt;     
 1     1 t20   TRUE   21.2 intertidal
 2     2 t10   TRUE   19.3 desert    
 3     3 t3    TRUE   15.3 intertidal
 4     4 t7    TRUE   21.1 forest    
 5     5 t6    TRUE   10.7 intertidal
 6     6 t18   TRUE   21.2 desert    
 7     7 t14   TRUE   14.8 forest    
 8     8 t9    TRUE   19.5 grassland 
 9     9 t4    TRUE   13.2 desert    
10    10 t12   TRUE   25.0 intertidal
# … with 29 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">ttree <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as.data.frame</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   parent node branch.length label      size    habitat
1      22    1   0.914660785   t20 21.236842 intertidal
2      26    2   0.531915339   t10 19.347808     desert
3      26    3   0.847355583    t3 15.308488 intertidal
4      25    4   0.117541116    t7 21.088887     forest
5      28    5   0.689902873    t6 10.671196 intertidal
6      28    6   0.725284685   t18 21.221452     desert
7      29    7   0.260759907   t14 14.831695     forest
8      31    8   0.003144709    t9 19.541849  grassland
9      31    9   0.012793490    t4 13.190731     desert
10     30   10   0.289318340   t12 24.957978 intertidal
11     33   11   0.102822345   t16 18.950921     desert
12     33   12   0.361748627    t2 18.265933  grassland
13     34   13   0.406217780    t5 13.667986  grassland
14     36   14   0.855577735   t13 11.341547     desert
15     37   15   0.122123984   t15 14.215988 intertidal
16     37   16   0.055801166   t17  7.394603     desert
17     35   17   0.411075242   t11 17.769369 intertidal
18     38   18   0.613953796   t19 13.964597     forest
19     39   19   0.453259011    t8 11.629983 intertidal
20     39   20   0.470733995    t1 17.947431  grassland
21     21   21            NA  &lt;NA&gt;        NA       &lt;NA&gt;
22     21   22   0.768506521  &lt;NA&gt;        NA       &lt;NA&gt;
23     22   23   0.153267556  &lt;NA&gt;        NA       &lt;NA&gt;
24     23   24   0.854931734  &lt;NA&gt;        NA       &lt;NA&gt;
25     24   25   0.451706708  &lt;NA&gt;        NA       &lt;NA&gt;
26     25   26   0.354669122  &lt;NA&gt;        NA       &lt;NA&gt;
27     24   27   0.472259514  &lt;NA&gt;        NA       &lt;NA&gt;
28     27   28   0.512345967  &lt;NA&gt;        NA       &lt;NA&gt;
29     27   29   0.681458147  &lt;NA&gt;        NA       &lt;NA&gt;
30     29   30   0.226860373  &lt;NA&gt;        NA       &lt;NA&gt;
31     30   31   0.391176049  &lt;NA&gt;        NA       &lt;NA&gt;
32     23   32   0.034940638  &lt;NA&gt;        NA       &lt;NA&gt;
33     32   33   0.130967953  &lt;NA&gt;        NA       &lt;NA&gt;
34     32   34   0.677282662  &lt;NA&gt;        NA       &lt;NA&gt;
35     34   35   0.356319352  &lt;NA&gt;        NA       &lt;NA&gt;
36     35   36   0.147734449  &lt;NA&gt;        NA       &lt;NA&gt;
37     36   37   0.980167842  &lt;NA&gt;        NA       &lt;NA&gt;
38     21   38   0.107984108  &lt;NA&gt;        NA       &lt;NA&gt;
39     38   39   0.106352382  &lt;NA&gt;        NA       &lt;NA&gt;</code></pre>
</div>
</div>
<p>And thatʻs what our <code>treedata</code> object looks like flattened out!</p>
<section id="subsetting-the-tree" class="level2">
<h2 class="anchored" data-anchor-id="subsetting-the-tree">Subsetting the tree</h2>
<p>Functions: <code>drop.tip()</code> and <code>keep.tip()</code></p>
<p>Suppose we want to drop all of the even tips:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">todrop <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"t"</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span><span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb31-2">todrop</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "t2"  "t4"  "t6"  "t8"  "t10" "t12" "t14" "t16" "t18" "t20"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">smalltree <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop.tip</span>(ttree, todrop)</span>
<span id="cb33-2">smalltree</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'treedata' S4 object'.

...@ phylo:

Phylogenetic tree with 10 tips and 9 internal nodes.

Tip labels:
  t3, t7, t9, t5, t13, t15, ...

Rooted; includes branch lengths.

with the following features available:
  'size', 'habitat'.

# The associated data tibble abstraction: 19 × 5
# The 'node', 'label' and 'isTip' are from the phylo tree.
    node label isTip  size habitat   
   &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;chr&gt;     
 1     1 t3    TRUE  15.3  intertidal
 2     2 t7    TRUE  21.1  forest    
 3     3 t9    TRUE  19.5  grassland 
 4     4 t5    TRUE  13.7  grassland 
 5     5 t13   TRUE  11.3  desert    
 6     6 t15   TRUE  14.2  intertidal
 7     7 t17   TRUE   7.39 desert    
 8     8 t11   TRUE  17.8  intertidal
 9     9 t19   TRUE  14.0  forest    
10    10 t1    TRUE  17.9  grassland 
# … with 9 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;">ggtree</span>(smalltree) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_tiplab</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>drop.tip</code> keeps all of the metadata! <code>keep.tip</code> is imported from <code>ape</code> so it has to be converted to <code>phylo</code> and then the data joined again after.</p>
</section>
<section id="plotting-with-node-labels" class="level2">
<h2 class="anchored" data-anchor-id="plotting-with-node-labels">Plotting with node labels</h2>
<p>The geometries <code>geom_text()</code> and <code>geom_node()</code> are helpful for labelling all of the nodes. The function <code>geom_tiplab()</code> labels only the tips.</p>
<p>Add node labels so you know what the internal node numbers are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">ggtree</span>(smalltree) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb36-2">    <span class="fu" style="color: #4758AB;">geom_tiplab</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-3">    <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>node), <span class="at" style="color: #657422;">hjust=</span><span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">3</span>)    <span class="co" style="color: #5E5E5E;"># node numbers</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Note: The tiplabels and the node labels crashed!</p>
<p>There are also <code>2</code> versions: <code>geom_text2()</code> and <code>geom_node2()</code> that allow subsetting the nodes, when you want the geometry to apply to only some of the nodes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;">ggtree</span>(smalltree) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb37-2">    <span class="fu" style="color: #4758AB;">geom_tiplab</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-3">    <span class="fu" style="color: #4758AB;">geom_text2</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>node, <span class="at" style="color: #657422;">subset=</span><span class="sc" style="color: #5E5E5E;">!</span>isTip), <span class="at" style="color: #657422;">hjust=</span><span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">3</span>)    <span class="co" style="color: #5E5E5E;"># node numbers</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>isTip</code> is a column of the ggtree object, so it is inherited when we provide the ggtree object.</p>
</section>
<section id="plotting-with-alternative-tip-labels" class="level2">
<h2 class="anchored" data-anchor-id="plotting-with-alternative-tip-labels">Plotting with alternative tip labels</h2>
<p>The dataframe portion of the treedata object can hold any number of columns of metadata. Perhaps you have some real names in a different column (like a display name), it is easy to swap out the tip labels. Here letʻs just use the <code>habitat</code> column</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">ggtree</span>(smalltree) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb38-2">    <span class="fu" style="color: #4758AB;">geom_tiplab</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>habitat)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb38-3">    <span class="fu" style="color: #4758AB;">geom_text2</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>node, <span class="at" style="color: #657422;">subset=</span><span class="sc" style="color: #5E5E5E;">!</span>isTip), <span class="at" style="color: #657422;">hjust=</span><span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">3</span>)    <span class="co" style="color: #5E5E5E;"># node numbers</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="when-your-tip-labels-get-cut-off" class="level2">
<h2 class="anchored" data-anchor-id="when-your-tip-labels-get-cut-off">When your tip labels get cut off</h2>
<p>Add an x scale (usually time):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;">ggtree</span>(smalltree) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb39-2">    <span class="fu" style="color: #4758AB;">geom_tiplab</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>habitat)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb39-3">    <span class="fu" style="color: #4758AB;">geom_text2</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>node, <span class="at" style="color: #657422;">subset=</span><span class="sc" style="color: #5E5E5E;">!</span>isTip), <span class="at" style="color: #657422;">hjust=</span><span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span>   <span class="co" style="color: #5E5E5E;"># node numbers</span></span>
<span id="cb39-4">    <span class="fu" style="color: #4758AB;">theme_tree2</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>You can increase the size of the plot area to accommodate the longer labels:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;">ggtree</span>(smalltree) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb40-2">    <span class="fu" style="color: #4758AB;">geom_tiplab</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>habitat)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-3">    <span class="fu" style="color: #4758AB;">geom_text2</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>node, <span class="at" style="color: #657422;">subset=</span><span class="sc" style="color: #5E5E5E;">!</span>isTip), <span class="at" style="color: #657422;">hjust=</span><span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span>   <span class="co" style="color: #5E5E5E;"># node numbers</span></span>
<span id="cb40-4">    <span class="fu" style="color: #4758AB;">theme_tree2</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-5">    <span class="fu" style="color: #4758AB;">xlim</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="tree-layouts" class="level1">
<h1>Tree layouts</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;">require</span>(cowplot)</span>
<span id="cb41-2"></span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;">plot_grid</span>(</span>
<span id="cb41-4">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree),</span>
<span id="cb41-5">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">branch.length=</span><span class="st" style="color: #20794D;">'none'</span>),</span>
<span id="cb41-6">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"dendrogram"</span>),</span>
<span id="cb41-7">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"roundrect"</span>),</span>
<span id="cb41-8">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"ellipse"</span>),</span>
<span id="cb41-9">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"ellipse"</span>, <span class="at" style="color: #657422;">branch.length=</span><span class="st" style="color: #20794D;">"none"</span>),</span>
<span id="cb41-10">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"circular"</span>),</span>
<span id="cb41-11">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">branch.length=</span><span class="st" style="color: #20794D;">'none'</span>, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">'circular'</span>),</span>
<span id="cb41-12">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"fan"</span>, <span class="at" style="color: #657422;">open.angle=</span><span class="dv" style="color: #AD0000;">120</span>),</span>
<span id="cb41-13">  <span class="fu" style="color: #4758AB;">ggtree</span>(ttree, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"inward_circular"</span>)</span>
<span id="cb41-14">)</span></code></pre></div>
</div>
</section>
<section id="plotting-data-on-the-tree" class="level1">
<h1>Plotting data on the tree</h1>
<p><code>geom_facet()</code> and <code>facet_plot()</code> are general methods to link graphical layers to a tree.</p>
<p>These functions require an input dataframe with the first column containing the taxon labels (the key which matches to the tip labels of the phylogeny).</p>
<p>Internally these functions reorder the input data based on the tree structure so that you donʻt have to worry about the order of the rows.</p>
<p>Multiple layers can be added to the same dataset. Also different datasets can be added to the same figure.</p>
<p>A table of the <strong>geom layers</strong> that work with <code>geom_facet</code> is <a href="https://yulab-smu.top/treedata-book/figures-and-tables.html#tab:facet-geom">provided here</a>.</p>
<section id="example-plot-smalltree-with-size-in-a-barplot" class="level2">
<h2 class="anchored" data-anchor-id="example-plot-smalltree-with-size-in-a-barplot">Example: plot <code>smalltree</code> with <code>size</code> in a barplot</h2>
<p>First make a tibble to attach to the tree. As of this writing, <code>geom_facet</code> will not accept a <code>treedata</code> object. It wants a dataframe or tibble of only the tips. But this is easy to make from the treedata. We just have to filter out the non-tip rows, then rearrange the columns to put the labels first:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;">require</span>(ggplot2)</span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;">require</span>(dplyr)</span>
<span id="cb42-3"></span>
<span id="cb42-4">smdat <span class="ot" style="color: #003B4F;">&lt;-</span> smalltree <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb42-5">           as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb42-6">           <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(label)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb42-7">           <span class="fu" style="color: #4758AB;">relocate</span>(label, <span class="at" style="color: #657422;">.before=</span><span class="dv" style="color: #AD0000;">1</span>) </span></code></pre></div>
</div>
<p>We can then add the barplot as a panel next to the tree plot using <code>geom_facet</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;">ggtree</span>(smalltree) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb43-2">    <span class="fu" style="color: #4758AB;">geom_tiplab</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb43-3">    <span class="fu" style="color: #4758AB;">theme_tree2</span>()  <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb43-4">    <span class="fu" style="color: #4758AB;">geom_facet</span>(<span class="at" style="color: #657422;">panel =</span> <span class="st" style="color: #20794D;">"Size"</span>, </span>
<span id="cb43-5">               <span class="at" style="color: #657422;">data=</span>smdat, </span>
<span id="cb43-6">               <span class="at" style="color: #657422;">geom =</span> geom_col, </span>
<span id="cb43-7">               <span class="at" style="color: #657422;">mapping=</span><span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> smdat<span class="sc" style="color: #5E5E5E;">$</span>size), </span>
<span id="cb43-8">               <span class="at" style="color: #657422;">orientation =</span> <span class="st" style="color: #20794D;">'y'</span>, </span>
<span id="cb43-9">               <span class="at" style="color: #657422;">width =</span> .<span class="dv" style="color: #AD0000;">6</span>, </span>
<span id="cb43-10">               <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"blue"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The arguments for geom_facet() are:</p>
<ul>
<li><code>panel</code> : The name of the panel, displayed on top</li>
<li><code>data</code> : a <code>tibble</code> or <code>dataframe</code> containing the metadata to plot. Must have as the first column the tip labels that are found in the phylogenetic tree.</li>
<li><code>geom</code> : a <a href="https://yulab-smu.top/treedata-book/figures-and-tables.html#tab:facet-geom">geom layer</a> specifying the style of plot</li>
<li><code>mapping</code> : the aesthetic mapping. I should not have to supply the <code>smdat$</code> here but it wonʻt work otherwise.</li>
<li>any additional parameters for the plot</li>
</ul>
</section>
</section>
<section id="a-tree-panel-and-annotation-example-from-the-tree-data-book" class="level1">
<h1>A tree-panel and annotation example from the Tree Data Book:</h1>
<p>This example plots a phylogeny alongside SNP (single nucleotide polymorphism) data and a barplot of some simulated data <span class="citation" data-cites="Yu:2022">(Yu 2022)</span>.</p>
<section id="the-operator-for-ggtree-objects" class="level2">
<h2 class="anchored" data-anchor-id="the-operator-for-ggtree-objects">The %+&gt;% operator for ggtree objects</h2>
<p>The %+&gt;% operator is used to add data (<code>dataframe</code>, <code>tibble</code>) to a <code>ggtree</code> object:</p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb44-1"><span class="ex" style="color: null;">my_ggtree</span> <span class="op" style="color: #5E5E5E;">&lt;</span>- my_ggtree %<span class="op" style="color: #5E5E5E;">&lt;</span>+% new_data</span></code></pre></div>
<p>The result is a combined object that can be used for plotting, but it does not modify the original <code>treedata</code> object (which is a different object from the <code>ggtree</code> object). The <code>full_join()</code> function can be used to combine a tree with data to produce a new <code>treedata</code> object.</p>
</section>
<section id="example-of-the-operator-to-add-data-to-a-ggtree-object." class="level2">
<h2 class="anchored" data-anchor-id="example-of-the-operator-to-add-data-to-a-ggtree-object.">Example of the %+&gt;% operator to add data to a ggtree object.</h2>
<p>The package <code>TDbook</code> is the data accompanyment to <span class="citation" data-cites="Yu:2022">(Yu 2022)</span>ʻs <a href="https://yulab-smu.top/treedata-book/index.html">Tree Data book</a>. It is available on CRAN so you can install it with the usual <code>install.packages("TDbook")</code> function call.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">require</span>(ggtree)</span>
<span id="cb45-2"><span class="fu" style="color: #4758AB;">require</span>(ggplot2)</span>
<span id="cb45-3"><span class="fu" style="color: #4758AB;">require</span>(dplyr)</span>
<span id="cb45-4"><span class="fu" style="color: #4758AB;">require</span>(TDbook)</span>
<span id="cb45-5"></span>
<span id="cb45-6"><span class="co" style="color: #5E5E5E;"># load `tree_boots`, `df_tip_data`, and `df_inode_data` from 'TDbook'</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggtree</span>(tree_boots) <span class="sc" style="color: #5E5E5E;">%&lt;+%</span> df_tip_data <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">xlim</span>(<span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb46-2">p2 <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_tiplab</span>(<span class="at" style="color: #657422;">offset =</span> .<span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">hjust =</span> .<span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-3">    <span class="fu" style="color: #4758AB;">geom_tippoint</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">shape =</span> trophic_habit, <span class="at" style="color: #657422;">color =</span> trophic_habit, </span>
<span id="cb46-4">                <span class="at" style="color: #657422;">size =</span> mass_in_kg)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb46-5">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"right"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb46-6">    <span class="fu" style="color: #4758AB;">scale_size_continuous</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb46-7"></span>
<span id="cb46-8">p2 <span class="sc" style="color: #5E5E5E;">%&lt;+%</span> df_inode_data <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb46-9">    <span class="fu" style="color: #4758AB;">geom_label</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> vernacularName.y, <span class="at" style="color: #657422;">fill =</span> posterior)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb46-10">    <span class="fu" style="color: #4758AB;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;">colors =</span> RColorBrewer<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">brewer.pal</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">"YlGnBu"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 7 rows containing missing values (`geom_label()`).</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<section id="explore-df_info" class="level3">
<h3 class="anchored" data-anchor-id="explore-df_info">Explore <code>df_info</code></h3>
<p><code>df_info</code> A dataframe containing sampling info for the tips of the tree. 386 rows and 6 variables, with the first column being taxa labels (<code>id</code>).</p>
<p><code>df_alleles</code> The allele table with original raw data to be processed to SNP data. It is a table of nucleotides with 386 rows x 385 variables. The first row contains tips labels. Column names are non-sense. The rownames (exept for the first one) contains the snp position along the genome.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## load `tree_nwk`, `df_info`, `df_alleles`, and `df_bar_data` from 'TDbook'</span></span>
<span id="cb48-2">tree <span class="ot" style="color: #003B4F;">&lt;-</span> tree_nwk</span>
<span id="cb48-3">snps <span class="ot" style="color: #003B4F;">&lt;-</span> df_alleles</span>
<span id="cb48-4">snps_strainCols <span class="ot" style="color: #003B4F;">&lt;-</span> snps[<span class="dv" style="color: #AD0000;">1</span>,] </span>
<span id="cb48-5">snps<span class="ot" style="color: #003B4F;">&lt;-</span>snps[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,] <span class="co" style="color: #5E5E5E;"># drop strain names</span></span>
<span id="cb48-6"><span class="fu" style="color: #4758AB;">colnames</span>(snps) <span class="ot" style="color: #003B4F;">&lt;-</span> snps_strainCols</span>
<span id="cb48-7"></span>
<span id="cb48-8">gapChar <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"?"</span></span>
<span id="cb48-9">snp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">t</span>(snps)  <span class="co" style="color: #5E5E5E;"># not rectangular!</span></span>
<span id="cb48-10">lsnp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">apply</span>(snp, <span class="dv" style="color: #AD0000;">1</span>, <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb48-11">        x <span class="sc" style="color: #5E5E5E;">!=</span> snp[<span class="dv" style="color: #AD0000;">1</span>,] <span class="sc" style="color: #5E5E5E;">&amp;</span> x <span class="sc" style="color: #5E5E5E;">!=</span> gapChar <span class="sc" style="color: #5E5E5E;">&amp;</span> snp[<span class="dv" style="color: #AD0000;">1</span>,] <span class="sc" style="color: #5E5E5E;">!=</span> gapChar</span>
<span id="cb48-12">    })  <span class="co" style="color: #5E5E5E;"># different from row 1, not missing</span></span>
<span id="cb48-13">lsnp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(lsnp) </span>
<span id="cb48-14">lsnp<span class="sc" style="color: #5E5E5E;">$</span>pos <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">rownames</span>(lsnp))  <span class="co" style="color: #5E5E5E;"># position from rownames</span></span>
<span id="cb48-15">lsnp <span class="ot" style="color: #003B4F;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gather</span>(lsnp, name, value, <span class="sc" style="color: #5E5E5E;">-</span>pos)  </span>
<span id="cb48-16">snp_data <span class="ot" style="color: #003B4F;">&lt;-</span> lsnp[lsnp<span class="sc" style="color: #5E5E5E;">$</span>value, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>, <span class="st" style="color: #20794D;">"pos"</span>)] <span class="co" style="color: #5E5E5E;"># only TRUEs</span></span></code></pre></div>
</div>
<p><code>snp_data</code> A dataframe containing SNP position data. 6482 x 2. The first column contains taxa labels coresponding to the tips of the tree (<code>name</code>). There are multiple rows per taxon, the second colum is the position <code>pos</code> of the snp in the genome. This is used as the x-variable in the plot.</p>
<p>In the dataframe <code>snp_data</code> the rows are ordered by position along the sequence (the x-dimension of this data), but the first column is the strain (taxon) name which matches the tips in the phylogenetic tree.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## visualize the tree </span></span>
<span id="cb49-2">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggtree</span>(tree) </span>
<span id="cb49-3"></span>
<span id="cb49-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## attach the sampling information data set </span></span>
<span id="cb49-5"><span class="do" style="color: #5E5E5E;
font-style: italic;">## and add symbols colored by location</span></span>
<span id="cb49-6">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">%&lt;+%</span> df_info <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_tippoint</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>location))</span>
<span id="cb49-7">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="add-snp-and-trait-plots-aligned-to-the-tree" class="level3">
<h3 class="anchored" data-anchor-id="add-snp-and-trait-plots-aligned-to-the-tree">Add SNP and Trait plots aligned to the tree</h3>
<p>Use <code>geom_facet</code> with reference to the respective dataframes/tibbles to add plots alignted to the tree. For the SNP plot, we will use <code>geom_point</code> which allows x-y plotting, with x-coordinate determined by <code>pos</code> and the y-coordinate aligned with the taxon. The symbol is the vertical line <code>|</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## visualize SNP and Trait data using dot and bar charts,</span></span>
<span id="cb50-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## and align them based on tree structure</span></span>
<span id="cb50-3">p1 <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_facet</span>(<span class="at" style="color: #657422;">panel =</span> <span class="st" style="color: #20794D;">"SNP"</span>, <span class="at" style="color: #657422;">data =</span> snp_data, <span class="at" style="color: #657422;">geom =</span> geom_point, </span>
<span id="cb50-4">               <span class="at" style="color: #657422;">mapping=</span><span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> pos, <span class="at" style="color: #657422;">color =</span> location), <span class="at" style="color: #657422;">shape =</span> <span class="st" style="color: #20794D;">'|'</span>) </span>
<span id="cb50-5">p1</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>df_bar_data</code> is some simulated data with an <code>id</code> column specifying the taxon names, and a <code>dummy_bar_value</code> containing some data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">p1 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_facet</span>(<span class="at" style="color: #657422;">panel =</span> <span class="st" style="color: #20794D;">"Trait"</span>, <span class="at" style="color: #657422;">data =</span> df_bar_data, <span class="at" style="color: #657422;">geom =</span> geom_col, </span>
<span id="cb51-2">                <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> dummy_bar_value, <span class="at" style="color: #657422;">color =</span> location, </span>
<span id="cb51-3">                <span class="at" style="color: #657422;">fill =</span> location), <span class="at" style="color: #657422;">orientation =</span> <span class="st" style="color: #20794D;">'y'</span>, <span class="at" style="color: #657422;">width =</span> .<span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb51-4">    <span class="fu" style="color: #4758AB;">theme_tree2</span>(<span class="at" style="color: #657422;">legend.position=</span><span class="fu" style="color: #4758AB;">c</span>(.<span class="dv" style="color: #AD0000;">05</span>, .<span class="dv" style="color: #AD0000;">85</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-25-ggtree/index_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
</section>
<section id="example-datasets" class="level1">
<h1>Example datasets</h1>
<p>save to your working directory:</p>
<p><a href="bigtree.nex">bigtree.nex</a><br>
<a href="anolis.SSD.raw.csv">anolis.SSD.raw.csv</a><br>
<a href="ggtree.R">ggtree.R</a></p>
<p>This is an example of a typical workflow. We have carefully collected phenotypic data, and someone has published a massive phylogeny. We need to subset the tree to just the taxa we want to work on.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Yu:2022" class="csl-entry">
Yu, G. 2022. <em>Data Integration, Manipulation and Visualization of Phylogenetic Trees</em>. A Chapman &amp; Hall Book. CRC Press. <a href="https://yulab-smu.top/treedata-book/">https://yulab-smu.top/treedata-book/</a>.
</div>
</div></section></div> ]]></description>
  <category>module 7</category>
  <category>week 13</category>
  <category>phylogenetic trees</category>
  <category>phylo</category>
  <category>ggtree</category>
  <category>treedata</category>
  <guid>https://mbutler808.github.io/posts/2023-04-25-ggtree/index.html</guid>
  <pubDate>Tue, 25 Apr 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to OU Models</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-27-intro-OU-models/index.html</link>
  <description><![CDATA[ 




<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning Objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Goals:</strong> - Approaches for adaptive evolution (<code>ouch</code>, <code>slouch</code>, others) - Model-based vs statistical approaches</p>
<p><strong>Concepts:</strong> - Model comparison tools in R - Process-based models</p>
</div>
</div>
</section>
<section id="introduction-to-ou-models" class="level1">
<h1>Introduction to OU Models</h1>
<section id="the-ou-model-for-comparative-analysis" class="level2">
<h2 class="anchored" data-anchor-id="the-ou-model-for-comparative-analysis">The OU Model for Comparative Analysis</h2>
<p>A Brownian motion process can be described using the following differential equation:</p>
<p><span id="eq-bm"><img src="https://latex.codecogs.com/png.latex?%0A%20%20dX(t)%20=%20%5Csigma%5C,dB(t).%0A%5Ctag%7B1%7D"></span></p>
<p>If we imagine the phenotype <img src="https://latex.codecogs.com/png.latex?X"> as changing through time <img src="https://latex.codecogs.com/png.latex?t">, this equation says that in a small increment of time, the change will be proportional to the parameter <img src="https://latex.codecogs.com/png.latex?%5Csigma">. Here, <img src="https://latex.codecogs.com/png.latex?dB(t)"> is a sample from a Brownian (white noise) process.</p>
<p>A small step towards reality is the OU Process:</p>
<p><span id="eq-basic_ou"><img src="https://latex.codecogs.com/png.latex?%0A%20%20dX(t)%20=%20%5Calpha%5C,(%5Ctheta%20-%20X(t))%5C,dt%20+%20%5Csigma%5C,dB(t).%0A%5Ctag%7B2%7D"></span></p>
<p>Eq.~@ref(eq:basic_ou) expresses the amount of change in character <img src="https://latex.codecogs.com/png.latex?X"> over the course of a small increment of time: specifically, <img src="https://latex.codecogs.com/png.latex?dX(t)"> is the infinitesimal change in the character <img src="https://latex.codecogs.com/png.latex?X"> over the infinitesimal interval from time <img src="https://latex.codecogs.com/png.latex?t"> to time <img src="https://latex.codecogs.com/png.latex?t+dt">. The term <img src="https://latex.codecogs.com/png.latex?dB(t)"> is <em>white noise</em>; that is, the random variables <img src="https://latex.codecogs.com/png.latex?dB(t)"> are independent and identically-distributed normal random variables, each with mean zero and variance <img src="https://latex.codecogs.com/png.latex?dt">. The parameter <img src="https://latex.codecogs.com/png.latex?%5Calpha"> measures the strength of selection. When <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%200">, the deterministic part of the OU model is diminished and Equation&nbsp;2 approaches the familiar BM model of pure drift,</p>
</section>
<section id="ouch-package" class="level2">
<h2 class="anchored" data-anchor-id="ouch-package"><code>ouch</code> package</h2>
<p>See <code>ouch</code> lecture.</p>
<p>Good starting points available in package <code>ouch</code>:<br>
- <code>?bimac</code> help page for <em>Bimaculatus</em> character displacement dataset<br>
- <code>example(bimac)</code> example of bimac analysis - <code>?anolis.ssd</code> help page for <em>Anolis</em> sexual size dimorphism dataset</p>
<p><code>ouch</code> is a package designed to test adaptive hypotheses using variations of the OU process, including BM <span class="citation" data-cites="Butler:2004 King:2022">(Butler and King 2004; King and Butler 2022)</span>. OUCH implements a model that fits <em>alpha</em> and <em>sigma</em> parameters to the entire phylogeny, but allows the user to specify which branches belong to different selective regimes. The location of the optima are also fit.</p>
<section id="the-data" class="level3">
<h3 class="anchored" data-anchor-id="the-data">The Data</h3>
<p>The data in OUCH are most easily assembled as a data frame. Load the built in example from ouch and then print it to the screen (I only printed the head of the dataset here):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">require</span>(ouch)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">data</span>(bimac)</span>
<span id="cb1-3">bimac</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ouch</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  node spcode species island size ancestor time OU.1   OU.3 OU.4  OU.LP
1    1   &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;   NA       NA    0   ns medium  anc medium
2    2   &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;   NA        1   12   ns medium  anc medium
3    3   &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;   NA        2   32   ns medium  anc  small
4    4   &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;   NA        3   34   ns medium  anc  small
5    5   &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;   NA        4   36   ns medium  anc  small
6    6   &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;   NA        3   36   ns medium  anc  small</code></pre>
</div>
</div>
<p>NOTE: a very important detail about <code>ouch</code> is that it matches trees with data and regimes using the node labels stored in the rownames of the objects you pass to the <code>ouch</code> functions. So it is important to make sure that your dataframes and vectors are appropriately named. <em>The dataframe bimac already has the correct row names</em>, but we do so here just to illustrate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">rownames</span>(bimac) <span class="ot" style="color: #003B4F;">&lt;-</span> bimac<span class="sc" style="color: #5E5E5E;">$</span>node</span></code></pre></div>
</div>
<p><code>ouch</code> was designed around a rectangular data model, so although the tree object is not a dataframe internally, it still helps us to build the data as a dataframe before making the <code>ouchtree</code> objects. The central organizing element is the <code>node</code>: it has a node number (usually an integer but it is actually a unique character string), an <code>ancestor</code> to which it is joined by a branch, a <code>time</code> since the root of the tree, and optional <code>label</code> such as a species name.</p>
</section>
<section id="the-hypotheses" class="level3">
<h3 class="anchored" data-anchor-id="the-hypotheses">The hypotheses</h3>
<p><em>The hypotheses which we use are assigned by painting particular regimes on branches</em>. It is convenient to represent each model or hypothesis as a column on the dataframe, with the regime assigned to the node (that is, it is assigned to the branch connecting the node to its ancestor).</p>
<p>Make an <code>ouchtree</code> object using the <code>ouchtree</code> constructor. <code>with</code> is a very nice function to create a small local environment so that you can use a dataframe’s elements directly without using the <code>bimac$</code> prefix.</p>
<p>It is similar to an <code>attach</code> but it is temporary – only lasting as long as the call itself. I like it much better than <code>attach</code> because I sometimes forget what I’ve attached and run into problems later. Also, with <code>attach</code>, you are actually working with a copy of the original dataframe object, so updating values is tricky. With <code>with</code>, it is more clear what’s going on, and I don’t tend to make those mistakes.</p>
<div class="cell" data-fig="true">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">tree <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>(bimac, <span class="fu" style="color: #4758AB;">ouchtree</span>(node,ancestor,time<span class="sc" style="color: #5E5E5E;">/</span><span class="fu" style="color: #4758AB;">max</span>(time),species))</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">plot</span>(tree)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-27-intro-OU-models/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ouch</code> fits the OU model Eq.~@ref(eq:basic_ou) along each branch of the phylogeny. While <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are held constant across the entire tree, the optima along each branch <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> are allowed to vary. Users can then paint various combinations of optima on the tree to reflect various biological scenarios.</p>
<p>For example, the dataset <code>bimac</code> was used to test the hypothesis of character displacement using an interspecific daaset of body sizes and sympatry/allopatry <span class="citation" data-cites="Butler:2004">Butler and King (2004)</span>. The analysis tested several different models, which are included with <code>bimac</code>. They are: OU.1 or global optimum, OU.3 or small, medium, and large regimes depending on the body size of the observed species (terminal branches only, internal branches painted medium, OU.4 or the same as OU.3 but with internal branches given their own unique regime called ancestral, and OU.LP based on a linear parsimony reconstruction of the colonization events (i.e., that as species came into sympatry, they diverged in body size).</p>
</section>
<section id="plotting-ouchtrees" class="level3">
<h3 class="anchored" data-anchor-id="plotting-ouchtrees">Plotting <code>ouchtree</code>s</h3>
<p>You can plot the regime paintings on the tree, and set options such as line widths for prettier plots. <code>ouch</code> has a very nice feature which allows plotting of the alternative models on one plot.</p>
<div class="cell" data-fig="true">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">plot</span>(tree, <span class="at" style="color: #657422;">regimes=</span>bimac[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"OU.1"</span>, <span class="st" style="color: #20794D;">"OU.3"</span>, <span class="st" style="color: #20794D;">"OU.4"</span>, <span class="st" style="color: #20794D;">"OU.LP"</span>)], <span class="at" style="color: #657422;">lwd=</span><span class="dv" style="color: #AD0000;">6</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-27-intro-OU-models/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Remember that you can pass a single vector or a data frame to the regimes parameter, but it must have the appropriate row names or names in the case of a vector. The regimes are not part of the ouchtree object, because they represent our hypothesis of evolution along the tree, rather than the tree itself. It is part of the original dataframe from which we derived the tree, so remember to refer to <code>bimac</code> when passing the regimes to the <code>plot</code> function.</p>
</section>
<section id="fitting-models" class="level3">
<h3 class="anchored" data-anchor-id="fitting-models">Fitting models</h3>
<p>There are two main model fitting functions in <code>ouch</code>, <code>brown</code>, which fits Brownian motion models, and <code>hansen</code>, which fits OU models to comparative data. The call to <code>brown</code> is particularly simple, as it takes only the data and the tree:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">brown</span>(<span class="fu" style="color: #4758AB;">log</span>(bimac[<span class="st" style="color: #20794D;">'size'</span>]),tree)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
call:
brown(data = log(bimac["size"]), tree = tree)
   nodes ancestors     times             labels     size
1      1      &lt;NA&gt; 0.0000000               &lt;NA&gt;       NA
2      2         1 0.3157895               &lt;NA&gt;       NA
3      3         2 0.8421053               &lt;NA&gt;       NA
4      4         3 0.8947368               &lt;NA&gt;       NA
5      5         4 0.9473684               &lt;NA&gt;       NA
6      6         3 0.9473684               &lt;NA&gt;       NA
7      7         1 0.2105263               &lt;NA&gt;       NA
8      8         7 0.3421053               &lt;NA&gt;       NA
9      9         8 0.4736842               &lt;NA&gt;       NA
10    10         9 0.6052632               &lt;NA&gt;       NA
11    11        10 0.7368421               &lt;NA&gt;       NA
12    12         9 0.7368421               &lt;NA&gt;       NA
13    13         8 0.5789474               &lt;NA&gt;       NA
14    14        13 0.6842105               &lt;NA&gt;       NA
15    15        14 0.8947368               &lt;NA&gt;       NA
16    16        15 0.9473684               &lt;NA&gt;       NA
17    17         7 0.7368421               &lt;NA&gt;       NA
18    18        17 0.7894737               &lt;NA&gt;       NA
19    19        18 0.8947368               &lt;NA&gt;       NA
20    20        19 0.9473684               &lt;NA&gt;       NA
21    21        20 0.9736842               &lt;NA&gt;       NA
22    22        19 0.9473684               &lt;NA&gt;       NA
23    23         2 1.0000000       Anolis pogus 2.602690
24    24         4 1.0000000   Anolis schwartzi 2.660260
25    25         5 1.0000000   Anolis schwartzi 2.660260
26    26         5 1.0000000   Anolis schwartzi 2.653242
27    27         6 1.0000000     Anolis wattsii 2.674149
28    28         6 1.0000000     Anolis wattsii 2.701361
29    29        10 1.0000000 Anolis bimaculatus 3.161247
30    30        11 1.0000000 Anolis bimaculatus 3.299534
31    31        11 1.0000000 Anolis bimaculatus 3.328627
32    32        12 1.0000000      Anolis leachi 3.353407
33    33        12 1.0000000      Anolis leachi 3.360375
34    34        13 1.0000000     Anolis nubilus 3.049273
35    35        14 1.0000000     Anolis sabanus 2.906901
36    36        15 1.0000000  Anolis gingivinus 2.980619
37    37        16 1.0000000  Anolis gingivinus 2.933857
38    38        16 1.0000000  Anolis gingivinus 2.975530
39    39        17 1.0000000    Anolis oculatus 3.104587
40    40        18 1.0000000     Anolis ferreus 3.346389
41    41        20 1.0000000     Anolis lividus 2.928524
42    42        21 1.0000000  Anolis marmoratus 2.939162
43    43        21 1.0000000  Anolis marmoratus 2.990720
44    44        22 1.0000000 Anolis terraealtae 3.058707
45    45        22 1.0000000 Anolis terraealtae 3.068053

sigma squared:
           [,1]
[1,] 0.04311003

theta:
NULL
   loglik  deviance       aic     aic.c       sic       dof 
 17.33129 -34.66257 -30.66257 -30.06257 -28.39158   2.00000 </code></pre>
</div>
</div>
<p>What is returned is an object of class <code>browntree</code>. It contains all input including the function call, the tree and data), as well as the parameter estimate for <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and the model fit statistics including: the log-likelihood, the deviance (<img src="https://latex.codecogs.com/png.latex?-2*log(L)">), the information criteria <img src="https://latex.codecogs.com/png.latex?AIC">, <img src="https://latex.codecogs.com/png.latex?AIC_c"> (corrected for small sample size), and <img src="https://latex.codecogs.com/png.latex?SIC">, and the model degrees of freedom.</p>
<p>It is a good practice to save this, as it encapsulates the analysis. From this, we can rerun the model fit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">h1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">brown</span>(<span class="fu" style="color: #4758AB;">log</span>(bimac[<span class="st" style="color: #20794D;">'size'</span>]),tree)</span></code></pre></div>
</div>
<p><code>hansen</code> models are slightly more complex. In addition to <img src="https://latex.codecogs.com/png.latex?%5Csigma">, we are now fitting <img src="https://latex.codecogs.com/png.latex?%5Calpha">, the strength of selection, and all of the optima <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> specified by our model. This maximum-likelihood search now requires an initial guess. If you have no idea, a good starting guess is 1. If you want to be sure, you can intiate searches with different starting guesses. You can also specify alternative optimization algorithms and increase or decrease the relative tolerance, which is the stringency by which convergence is assessed. Typically, the default is roughly <code>reltol=1e-8</code>, and the limit of machine precision is in the neighborhood of <code>reltol=1e-15</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">h2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hansen</span>(<span class="fu" style="color: #4758AB;">log</span>(bimac[<span class="st" style="color: #20794D;">'size'</span>]),</span>
<span id="cb10-2">             tree,</span>
<span id="cb10-3">             bimac[<span class="st" style="color: #20794D;">'OU.1'</span>],</span>
<span id="cb10-4">             <span class="at" style="color: #657422;">sqrt.alpha=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-5">             <span class="at" style="color: #657422;">sigma=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-6">h3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hansen</span>(<span class="fu" style="color: #4758AB;">log</span>(bimac[<span class="st" style="color: #20794D;">'size'</span>]),</span>
<span id="cb10-7">             tree,bimac[<span class="st" style="color: #20794D;">'OU.3'</span>], </span>
<span id="cb10-8">             <span class="at" style="color: #657422;">sqrt.alpha=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-9">             <span class="at" style="color: #657422;">sigma=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-10">h4 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hansen</span>(<span class="fu" style="color: #4758AB;">log</span>(bimac[<span class="st" style="color: #20794D;">'size'</span>]),</span>
<span id="cb10-11">             tree,</span>
<span id="cb10-12">             bimac[<span class="st" style="color: #20794D;">'OU.4'</span>], </span>
<span id="cb10-13">             <span class="at" style="color: #657422;">sqrt.alpha=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-14">             <span class="at" style="color: #657422;">sigma=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-15">h5 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hansen</span>(<span class="fu" style="color: #4758AB;">log</span>(bimac[<span class="st" style="color: #20794D;">'size'</span>]),</span>
<span id="cb10-16">             tree,</span>
<span id="cb10-17">             bimac[<span class="st" style="color: #20794D;">'OU.LP'</span>], </span>
<span id="cb10-18">             <span class="at" style="color: #657422;">sqrt.alpha=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-19">             <span class="at" style="color: #657422;">sigma=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-20">             <span class="at" style="color: #657422;">reltol=</span><span class="fl" style="color: #AD0000;">1e-5</span>)</span></code></pre></div>
</div>
</section>
<section id="hansentree-and-ouchtree-methods" class="level3">
<h3 class="anchored" data-anchor-id="hansentree-and-ouchtree-methods"><code>hansentree</code> and <code>ouchtree</code> methods</h3>
<p>We can see the model results by typing <code>h5</code>, which will execute the <code>print</code> method for this class. You could also use the <code>attributes</code> function, but this will dump too much information. <code>ouchtree</code> objects and the classes derived from them contain information that is used in internal calculations of the algorithms, not of general interest to users.</p>
<p>Additional accessor functions include:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">coef</span>(h5)    <span class="co" style="color: #5E5E5E;"># the coefficients of the fitted model</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$sqrt.alpha
[1] 1.61658

$sigma
[1] 0.2249274

$theta
$theta$size
   large   medium    small 
3.355087 3.040729 2.565249 


$alpha.matrix
        [,1]
[1,] 2.61333

$sigma.sq.matrix
           [,1]
[1,] 0.05059232</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">logLik</span>(h5)   <span class="co" style="color: #5E5E5E;"># the log-likelihood value</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 24.81823</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">summary</span>(h5) <span class="co" style="color: #5E5E5E;"># (not printed) everything except the tree+data</span></span></code></pre></div>
</div>
<p>We can now generate a table of our model fits:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">    <span class="co" style="color: #5E5E5E;"># just the model fit statistics on a single line</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">summary</span>(h5)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'aic'</span>, <span class="st" style="color: #20794D;">'aic.c'</span>, <span class="st" style="color: #20794D;">'sic'</span>, <span class="st" style="color: #20794D;">'dof'</span>)])  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      aic     aic.c       sic       dof 
-39.63645 -36.10704 -33.95898   5.00000 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">h <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(h1, h2, h3, h4, h5)   <span class="co" style="color: #5E5E5E;"># store fitted models in a list</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">names</span>(h) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'BM'</span>, <span class="st" style="color: #20794D;">'OU.1'</span>, <span class="st" style="color: #20794D;">'OU.3'</span>, <span class="st" style="color: #20794D;">'OU.4'</span>, <span class="st" style="color: #20794D;">'OU.LP'</span>)</span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;">sapply</span>( h, <span class="cf" style="color: #003B4F;">function</span>(x)</span>
<span id="cb18-4">             <span class="fu" style="color: #4758AB;">unlist</span>(</span>
<span id="cb18-5">                <span class="fu" style="color: #4758AB;">summary</span>(x)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'aic'</span>, <span class="st" style="color: #20794D;">'aic.c'</span>, <span class="st" style="color: #20794D;">'sic'</span>, <span class="st" style="color: #20794D;">'dof'</span>)]</span>
<span id="cb18-6">             ) </span>
<span id="cb18-7">      )                         <span class="co" style="color: #5E5E5E;"># table with all models</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             BM      OU.1      OU.3      OU.4     OU.LP
aic   -30.66257 -25.39364 -29.15573 -35.22319 -39.63645
aic.c -30.06257 -24.13048 -25.62631 -29.97319 -36.10704
sic   -28.39158 -21.98715 -23.47826 -28.41022 -33.95898
dof     2.00000   3.00000   5.00000   6.00000   5.00000</code></pre>
</div>
</div>
<p>By storing the model fits in a list, we can use apply methods to get the statistics from all the models at once. <code>sapply</code> returns a matrix if possible.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">h.ic <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>( h, <span class="cf" style="color: #003B4F;">function</span>(x) </span>
<span id="cb20-2">                     <span class="fu" style="color: #4758AB;">unlist</span>(</span>
<span id="cb20-3">                      <span class="fu" style="color: #4758AB;">summary</span>(x)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'aic'</span>, <span class="st" style="color: #20794D;">'aic.c'</span>, <span class="st" style="color: #20794D;">'sic'</span>, <span class="st" style="color: #20794D;">'dof'</span>)]</span>
<span id="cb20-4">                     ) </span>
<span id="cb20-5">               )  </span>
<span id="cb20-6"><span class="fu" style="color: #4758AB;">print</span>( h.ic, <span class="at" style="color: #657422;">digits =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         BM  OU.1  OU.3  OU.4 OU.LP
aic   -30.7 -25.4 -29.2 -35.2 -39.6
aic.c -30.1 -24.1 -25.6 -30.0 -36.1
sic   -28.4 -22.0 -23.5 -28.4 -34.0
dof     2.0   3.0   5.0   6.0   5.0</code></pre>
</div>
</div>
</section>
<section id="simulation-and-bootstrap-methods" class="level3">
<h3 class="anchored" data-anchor-id="simulation-and-bootstrap-methods">Simulation and bootstrap methods:</h3>
<p><code>simulate</code> generates random deviates or sets of simulated tip data based on the fitted model. The input is a fitted model <code>hansentree</code> or <code>browntree</code>, and the output is a list of dataframes, each comparable to the original data. These can then be used to refit the model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">h5.sim <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">simulate</span>(<span class="at" style="color: #657422;">object =</span> h5, <span class="at" style="color: #657422;">nsim=</span><span class="dv" style="color: #AD0000;">10</span>)   <span class="co" style="color: #5E5E5E;"># saves 10 sets of simulated data</span></span>
<span id="cb22-2">                                  <span class="co" style="color: #5E5E5E;">#  based on OU.LP</span></span></code></pre></div>
</div>
<p><code>update</code> refits the model, with one or more parameters changed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">summary</span>( <span class="fu" style="color: #4758AB;">update</span>( <span class="at" style="color: #657422;">object =</span> h5, </span>
<span id="cb23-2">                 <span class="at" style="color: #657422;">data =</span> h5.sim[[<span class="dv" style="color: #AD0000;">1</span>]] </span>
<span id="cb23-3">                )  <span class="co" style="color: #5E5E5E;"># fit the first dataset</span></span>
<span id="cb23-4">        )   </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$call
hansen(data = data, tree = object, regimes = regimes, sqrt.alpha = sqrt.alpha, 
    sigma = sigma)

$conv.code
[1] 0

$optimizer.message
NULL

$alpha
         [,1]
[1,] 7.518533

$sigma.squared
         [,1]
[1,] 0.147433

$optima
$optima$size
   large   medium    small 
3.227890 3.025055 2.702505 


$loglik
[1] 21.57065

$deviance
[1] -43.14129

$aic
[1] -33.14129

$aic.c
[1] -29.61188

$sic
[1] -27.46382

$dof
[1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">h5.sim.fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>( h5.sim, </span>
<span id="cb25-2">                      <span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">update</span>(h5, x)</span>
<span id="cb25-3">                    ) <span class="co" style="color: #5E5E5E;"># fit all 10 simulations</span></span></code></pre></div>
</div>
<p><code>bootstrap</code> is a convenience function for generating parametric bootstraps of the parameter estimates. It takes the fitted model, performs the simulations, refits, and outputs a dataframe of parameter estimates.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">bootstrap</span>( <span class="at" style="color: #657422;">object =</span> h5, <span class="at" style="color: #657422;">nboot=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      alpha sigma.squared optima.size.large optima.size.medium
1  4.314375    0.05269199          3.251418           3.000098
2  3.413239    0.04215836          3.309926           2.956670
3  7.709968    0.06632372          3.273562           3.070939
4  2.766781    0.02691600          3.394636           3.025804
5  3.715158    0.06536193          3.340144           3.052428
6  4.525718    0.04019941          3.303909           2.996026
7  3.614497    0.04792204          3.433925           3.035024
8  7.648233    0.06990530          3.307988           2.953451
9  2.219933    0.06286895          3.345550           3.005724
10 5.982860    0.08044119          3.226410           3.046734
   optima.size.small   loglik       aic     aic.c       sic dof
1           2.643785 28.31241 -46.62481 -43.09540 -40.94734   5
2           2.621137 28.94706 -47.89411 -44.36470 -42.21664   5
3           2.590975 31.00525 -52.01050 -48.48109 -46.33303   5
4           2.633032 32.49237 -54.98475 -51.45534 -49.30728   5
5           2.615143 24.58665 -39.17330 -35.64389 -33.49583   5
6           2.550247 31.83803 -53.67606 -50.14665 -47.99859   5
7           2.635848 27.93108 -45.86215 -42.33274 -40.18468   5
8           2.564476 30.32028 -50.64057 -47.11115 -44.96309   5
9           2.539223 21.17698 -32.35395 -28.82454 -26.67648   5
10          2.675224 26.36369 -42.72739 -39.19797 -37.04991   5</code></pre>
</div>
</div>
</section>
<section id="painting-regimes-on-trees" class="level3">
<h3 class="anchored" data-anchor-id="painting-regimes-on-trees"><code>paint</code>ing regimes on trees</h3>
<p>A new function in <code>ouch</code> is <code>paint</code>. Previously, it was up to users to set up regimes manually by editing spreadsheets. <code>paint</code> helps with this task by specifying the regimes on particular species, subtrees, or particular branches.</p>
<p>There are two parameters to <code>paint</code>, <code>subtrees</code>, which paints the entire subtree which descends from the node, and <code>branch</code>, which paints the branch connecting the node to it’s ancestor. For either, you specify the node label (remember it’s a character and needs to be quoted), and set it equal to the name of the regime you want to specify.</p>
<p>Let’s try it on the <code>bimac</code> tree and try to recreate the OU.LP regime:</p>
<div class="cell" data-fig="true">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">plot</span>(tree, <span class="at" style="color: #657422;">node.names=</span>T)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-27-intro-OU-models/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Paint the subtrees first, take a look:</p>
<div class="cell" data-fig="true">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">ou.lp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paint</span>( tree, </span>
<span id="cb29-2">                <span class="at" style="color: #657422;">subtree=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"medium"</span>,<span class="st" style="color: #20794D;">"9"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"large"</span>,<span class="st" style="color: #20794D;">"2"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"small"</span>) </span>
<span id="cb29-3">               )</span>
<span id="cb29-4"><span class="fu" style="color: #4758AB;">plot</span>(tree, <span class="at" style="color: #657422;">regimes=</span>ou.lp, <span class="at" style="color: #657422;">node.names=</span>T)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-27-intro-OU-models/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>But there was an independent switch from medium to large at species gm, or node 38, and the node connecting 9 to its ancestor:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">ou.lp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paint</span>( tree, </span>
<span id="cb30-2">                <span class="at" style="color: #657422;">subtree=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'medium'</span>,<span class="st" style="color: #20794D;">"9"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'large'</span>,<span class="st" style="color: #20794D;">"2"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'small'</span>),</span>
<span id="cb30-3">                <span class="at" style="color: #657422;">branch=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"38"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'large'</span>,<span class="st" style="color: #20794D;">"2"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'medium'</span>)</span>
<span id="cb30-4">              )  </span></code></pre></div>
</div>
<p>Compare it to the original OU.LP from above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">plot</span>(tree, <span class="at" style="color: #657422;">regimes=</span>ou.lp, <span class="at" style="color: #657422;">node.names=</span>T)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-27-intro-OU-models/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can create alternative paintings of the regimes to test against the data. Suppose we wanted to add a clade specific hypothesis that diverged in a similar time period (this is a completely made-up hypothesis, just for example):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">ou.clades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paint</span>( tree, </span>
<span id="cb32-2">                    <span class="at" style="color: #657422;">subtree=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"A"</span>,<span class="st" style="color: #20794D;">"7"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"B"</span>, <span class="st" style="color: #20794D;">"8"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"C"</span>), </span>
<span id="cb32-3">                    <span class="at" style="color: #657422;">branch=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"8"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"C"</span>, <span class="st" style="color: #20794D;">"7"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"C"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"A"</span>)</span>
<span id="cb32-4">                   )</span>
<span id="cb32-5"><span class="fu" style="color: #4758AB;">plot</span>(tree, <span class="at" style="color: #657422;">regimes=</span>ou.clades, <span class="at" style="color: #657422;">node.names=</span>T)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-27-intro-OU-models/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Run the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">h6 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hansen</span>( </span>
<span id="cb33-2">              <span class="fu" style="color: #4758AB;">log</span>(bimac[<span class="st" style="color: #20794D;">'size'</span>]),</span>
<span id="cb33-3">              tree, </span>
<span id="cb33-4">              <span class="at" style="color: #657422;">regimes=</span>ou.clades, </span>
<span id="cb33-5">              <span class="at" style="color: #657422;">sqrt.alpha=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb33-6">              <span class="at" style="color: #657422;">sigma=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb33-7">            )</span></code></pre></div>
</div>
<p>Rebuild our table and compare models:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">h <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">append</span>(h, h6)         <span class="co" style="color: #5E5E5E;"># append (add on) new model results to our list h</span></span>
<span id="cb34-2"><span class="fu" style="color: #4758AB;">names</span>(h)[<span class="fu" style="color: #4758AB;">length</span>(h)] <span class="ot" style="color: #003B4F;">&lt;-</span> ou.clades    <span class="co" style="color: #5E5E5E;"># add the name of the new model</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in names(h)[length(h)] &lt;- ou.clades: number of items to replace is not a
multiple of replacement length</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">names</span>(h)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "BM"    "OU.1"  "OU.3"  "OU.4"  "OU.LP" "1"    </code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">h.ic <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>( h, <span class="cf" style="color: #003B4F;">function</span>(x) </span>
<span id="cb38-2">                     <span class="fu" style="color: #4758AB;">unlist</span>(</span>
<span id="cb38-3">                        <span class="fu" style="color: #4758AB;">summary</span>(x)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'aic'</span>, <span class="st" style="color: #20794D;">'aic.c'</span>, <span class="st" style="color: #20794D;">'sic'</span>, <span class="st" style="color: #20794D;">'dof'</span>)]</span>
<span id="cb38-4">                     ) </span>
<span id="cb38-5">               )  </span>
<span id="cb38-6"><span class="fu" style="color: #4758AB;">print</span>( h.ic, <span class="at" style="color: #657422;">digits =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         BM  OU.1  OU.3  OU.4 OU.LP     1
aic   -30.7 -25.4 -29.2 -35.2 -39.6 -30.7
aic.c -30.1 -24.1 -25.6 -30.0 -36.1 -27.1
sic   -28.4 -22.0 -23.5 -28.4 -34.0 -25.0
dof     2.0   3.0   5.0   6.0   5.0   5.0</code></pre>
</div>
</div>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Butler:2004" class="csl-entry">
Butler, Marguerite A., and Aaron A. King. 2004. <span>“Phylogenetic Comparative Analysis: A Modeling Approach for Adaptive Evolution.”</span> <em>American Naturalist</em> 164: 683–95. <a href="https://doi.org/10.1086/426002">https://doi.org/10.1086/426002</a>.
</div>
<div id="ref-King:2022" class="csl-entry">
King, Aaron A., and Marguerite A. Butler. 2022. <em>Ouch: Ornstein-Uhlenbeck Models for Phylogenetic Comparative Hypotheses</em>. <a href="https://kingaa.github.io/ouch/">https://kingaa.github.io/ouch/</a>.
</div>
</div></section></div> ]]></description>
  <category>module 8</category>
  <category>week 15</category>
  <category>comparative analysis</category>
  <category>phylogenetic trees</category>
  <category>Ornstein Uhlenbeck</category>
  <category>Brownian motion</category>
  <guid>https://mbutler808.github.io/posts/2023-04-27-intro-OU-models/index.html</guid>
  <pubDate>Tue, 25 Apr 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>All about trees</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-18-Tree-Formats/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>References for this Material:</p>
<ul>
<li>This was adapted from the chapter “All about trees” written by Brian OʻMeara from the manual “Getting started in R for Phylogenetics” by Marguerite A. Butler, Brian C. O’Meara, Jason Pienaar, Michael Alfaro, Graham Slater, and Todd Oakley</li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning Objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand information content of phylogenetically structured data</li>
<li>Understand particular R tree formats in ape, phylobase, and ouch</li>
<li>Be able to hand-make trees</li>
<li>Be able to import trees from nexus, newick, and other major formats in use today</li>
<li>Be able to convert trees from one format to another</li>
<li>Be able to perform basic tree manipulations</li>
</ul>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
R packages you will need
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>ape</code></li>
<li><code>ouch</code></li>
</ul>
</div>
</div>
</section>
<section id="tree-vocabulary" class="level1">
<h1>Tree vocabulary</h1>
<p>In nature, a tree is a large perennial woody plant. It has roots, a main trunk, branches, and leaves. In graph theory, a tree is a network where there is only one path between any two nodes (in other words, a network with no loops or cycles).</p>
<p>In phylogenetics, we use ideas and terminology from both graph theory and nature:</p>
<ul>
<li><strong>Terminal taxa</strong> are also known as <strong>leaves</strong>, <strong>terminals</strong>, <strong>OTU</strong>s (“<strong>Operational Taxonomic Units</strong>”), <strong>tips</strong>, or simply <strong>taxa</strong>.</li>
<li><strong>Branches</strong> are also called <strong>edges</strong> or <strong>internodes</strong>.</li>
<li><strong>Internal</strong> nodes (places where two or more branches connect) are also known as <strong>vertices</strong> and sometimes simply <strong>nodes</strong> (technically, leaves are also nodes).</li>
<li>A <strong>rooted</strong> tree has one node designated as the <strong>root</strong>, and all other nodes are descended from this root. Traditionally, the root node has at least two descendants; it may also have a subtending branch (an ancestral branch).</li>
<li>An <strong>unrooted</strong> tree has no root designated, making the oldest ancestor ambiguous.<br>
</li>
<li>A tree where every internal node has two and only two descendants is known as a <strong>binary</strong> or <strong>bifurcating</strong> tree.</li>
<li>A tree where at least one internal node has more than two descendants is said to be <strong>multifurcating</strong>; such a node is a <strong>polytomy</strong>.</li>
<li>Trees in phylogenetics generally represent either <strong>species trees</strong> (a history of the splitting of interbreeding populations) or <strong>gene trees</strong> (a history of the coalescence of gene copies). In both cases, it is generally believed that the true process is bifurcating, so that each split results in two descendants. Thus, polytomies on trees are generally taken as representing <em>uncertainty in the relationships</em>. However in the case of adaptive radiations, and other <strong>rapidly speciating processes</strong>, the true process may be approaching multifurcation.</li>
<li><strong>Branches</strong> may have <strong>lengths</strong>; these lengths may correspond to <em>time</em>, <em>amount of change</em> (e.g., mutations) in some set of characters, <em>number of speciation events</em>, or some other measure.</li>
<li>A tree where all <strong>branch lengths</strong> from root to tips are equal is known as an <strong>ultrametric</strong> tree.</li>
<li>A tree without branch lengths is known as a <strong>topology</strong>.</li>
<li>A <strong>monophyletic clade</strong> is an ancestor and all its descendants.</li>
<li>Any <strong>edge</strong> or <strong>branch</strong> corresponds to a <strong>bipartition</strong>: <em>a division of the tree into two parts connected by that edge</em> (if a root were inserted on the edge, then each of those parts would be a clade).</li>
</ul>
</section>
<section id="newick-format" class="level1">
<h1>Newick format</h1>
<p>A very basic tree format is <strong>Newick</strong> (<code>.tree</code>), named after the <a href="https://www.newicks.com">seafood restaurant</a> in New Hampshire where it was formalized in 1986 by James Archie, William H. E. Day, Joseph Felsenstein, Wayne Maddison, Christopher Meacham, F. James Rohlf, and David Swofford - the second meeting was at the restaurant; it is also called New Hampshire format for that reason). It is widely used in graph theory as well. It is simply a string. Each nesting on the tree corresponds to a parenthetical statement. For example, for this tree (drawn brute-force):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-04-18-Tree-Formats/http:/www.newicks.com/Web2014/Ed7.1.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Photo from the Newick restaurant <a href="https://www.newicks.com">home page</a></figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">require</span>(ape)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">require</span>(ouch)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">require</span>(phylobase)</span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># simpletree &lt;- rcoal(length(LETTERS[1:7]), rooted = TRUE, tip.label = LETTERS[1:7], br = "coalescent")</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">simpletree<span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">structure</span>(<span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb1-7">    <span class="at" style="color: #657422;">edge =</span> <span class="fu" style="color: #4758AB;">matrix</span>(</span>
<span id="cb1-8">      <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">13</span>, </span>
<span id="cb1-9">        <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>),</span>
<span id="cb1-10">      <span class="at" style="color: #657422;">nrow=</span>12L), </span>
<span id="cb1-11">    <span class="at" style="color: #657422;">tip.label =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"A"</span>, <span class="st" style="color: #20794D;">"B"</span>, <span class="st" style="color: #20794D;">"C"</span>, <span class="st" style="color: #20794D;">"D"</span>, <span class="st" style="color: #20794D;">"E"</span>, <span class="st" style="color: #20794D;">"F"</span>, <span class="st" style="color: #20794D;">"G"</span>), </span>
<span id="cb1-12">    <span class="at" style="color: #657422;">Nnode =</span> 6L</span>
<span id="cb1-13">  ), </span>
<span id="cb1-14">    <span class="at" style="color: #657422;">class =</span> <span class="st" style="color: #20794D;">"phylo"</span>)</span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;">plot</span>(simpletree,<span class="at" style="color: #657422;">no.margin=</span><span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div id="fig-simpletree" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-04-18-Tree-Formats/index_files/figure-html/fig-simpletree-1.png" class="img-fluid figure-img" width="672"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: A simple tree</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Taxa G and F form a <strong>clade</strong>, as do G, F, and E, as do A and B, and so forth. Thus, to create a Newick string, just go down the tree, nesting as you go:</p>
<p><strong>(G,F)</strong></p>
<p><strong>((G,F),E)</strong></p>
<p>other side:</p>
<p><strong>(A,B)</strong></p>
<p><strong>(C,D)</strong></p>
<p><strong>((A,B),(C,D))</strong></p>
<p>all together:</p>
<p><strong>(((G,F),E),((A,B),(C,D)))</strong></p>
<p>And that’s it (it will be clearer in the lecture) If a tree has branch lengths, these are entered following the descendant clade. For example, if the branch leading to G has length 1.0, we would write <code>G:1.0</code> rather than just <code>G</code>. If the tree is ultrametric, and the branch below the common ancestor of G and F is of length <code>1.1</code>, and the branch below that of length <code>3.5</code>, we could write (note: a semicolon <code>;</code> ends the newick string):</p>
<p><code>((G:1.0,F:1.0):1.1,E:2.1):3.5;</code></p>
<p>One aspect of the Newick (and most tree) representation is that there are many ways of representing the same tree. At every node, one can rotate the descendant branches (switching the left and right positions) and get the same tree (for example, imagine switching the G and E labels). Thus, the Newick strings</p>
<p><strong>((G,F),E)</strong></p>
<p>and</p>
<p><strong>((F,G),E)</strong></p>
<p>describe the same trees, though it might not be easy to tell at first glance. This is generally an issue for any tree representation. While Newick strings are compact and easy to understand, they also don’t lend themselves to easy <em>tree traversal</em> (moving up or down the tree). In most analysis software that performs computations along trees, some other representation is used.</p>
</section>
<section id="nexus-more-soon" class="level1">
<h1>NEXUS – More soon</h1>
<p>The NEXUS format (<code>*.nex</code> or <code>*.nxs</code>) is widely used in bioinformatics. Many phylogenetics programs use nexus format including <img src="https://latex.codecogs.com/png.latex?PAUP%5E*">, MrBayes, Mesquite, MacClade, etc., and many more can read nexus.</p>
<p>One of the key features is that it is very <em>extensible</em> with information in <strong>blocks</strong>. We will only be concerned with blocks of DNA sequence data, but any type of information can be added. This flexibilityy, however, can be a curse when you encounter new extensions to the format that your code did not anticipate. However, for the most part we will be using packages that read in nexus so you can reasonable hope that someone has dealt with the headache for you.</p>
<p>Nexus files are often used as inputs to phylogenetic programs. In that case, they typically only have a TAXA block and a DATA block. In our IQTREE2 example we also had a partition file in nexus format. But they can also return the output of the phylogenetic reconstruction, in that case they will have a TREES block as well.</p>
<section id="nexus-syntax" class="level3">
<h3 class="anchored" data-anchor-id="nexus-syntax">Nexus syntax:</h3>
<p>A NEXUS file begins with <code>#NEXUS</code> on the first line.</p>
<p><strong>Blocks</strong> of information follow, tyically on multiple lines, enclosed by a <strong>BEGIN blockname;</strong> and <strong>END;</strong> (Key words are case-insensitive).</p>
<p>Comments are enclosed by square brackets <code>[comments]</code></p>
<p>Typical blocks:</p>
<ul>
<li><strong>TAXA</strong>: The taxa block contains the names of the taxa.</li>
<li><strong>DATA</strong>: The data block contains a data matrix (we will use DNA sequences).</li>
<li><strong>TREES</strong>: The trees block contains one or more phylogenetic trees in newick format.</li>
</ul>
<p>For example <a href="https://en.wikipedia.org/wiki/Nexus_file">From Wikipedia</a>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">#NEXUS</span></span>
<span id="cb2-2"><span class="ex" style="color: null;">Begin</span> TAXA<span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-3">  <span class="ex" style="color: null;">Dimensions</span> ntax=4<span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-4">  <span class="ex" style="color: null;">TaxLabels</span> SpaceDog SpaceCat SpaceOrc SpaceElf<span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-5"><span class="ex" style="color: null;">End</span><span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="ex" style="color: null;">Begin</span> data<span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-8">  <span class="ex" style="color: null;">Dimensions</span> nchar=15<span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-9">  <span class="ex" style="color: null;">Format</span> datatype=dna missing=<span class="pp" style="color: #AD0000;">?</span> gap=- matchchar=.<span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-10">  <span class="ex" style="color: null;">Matrix</span></span>
<span id="cb2-11">    <span class="bu" style="color: null;">[</span> When a position <span class="er" style="color: #AD0000;">is</span> <span class="ex" style="color: null;">a</span> <span class="st" style="color: #20794D;">"matchchar"</span>, it means that it is the same as the first entry at the same position. ]</span>
<span id="cb2-12">    <span class="ex" style="color: null;">SpaceDog</span>   atgctagctagctcg</span>
<span id="cb2-13">    <span class="ex" style="color: null;">SpaceCat</span>   ......<span class="pp" style="color: #AD0000;">??</span>...-.a.</span>
<span id="cb2-14">    <span class="ex" style="color: null;">SpaceOrc</span>   ...t.......-.g. [ same as atgttagctag-tgg ]</span>
<span id="cb2-15">    <span class="ex" style="color: null;">SpaceElf</span>   ...t.......-.a.           </span>
<span id="cb2-16">  <span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-17"><span class="ex" style="color: null;">End</span><span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="ex" style="color: null;">BEGIN</span> TREES<span class="kw" style="color: #003B4F;">;</span></span>
<span id="cb2-20">  <span class="ex" style="color: null;">Tree</span> tree1 = <span class="er" style="color: #AD0000;">(</span><span class="kw" style="color: #003B4F;">((</span><span class="ex" style="color: null;">SpaceDog,SpaceCat</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,SpaceOrc,SpaceElf</span><span class="kw" style="color: #003B4F;">));</span></span>
<span id="cb2-21"><span class="ex" style="color: null;">END</span><span class="kw" style="color: #003B4F;">;</span> </span></code></pre></div>
</section>
</section>
<section id="phylo-ape-5.0-or-above" class="level1">
<h1><code>phylo</code> (<code>ape</code> 5.0 or above)</h1>
<p>The <a href="http://ape-package.ird.fr"><code>ape</code> package</a> <span class="citation" data-cites="Paradis:2019">(Paradis and Schliep 2019)</span> uses a different representation of trees. It uses R <code>structures</code>, <code>lists</code>, <code>matrices</code>, and <code>vectors</code> to store a tree. Each node in the tree receives a number. For example, here is the tree from before in <code>ape</code> format.</p>
<p>Here is <code>simpletree</code> with the node numbers printed. It is printed with the following commands:</p>
<div class="cell" data-caption="A simple tree with ape's numbering of nodes included">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">plot</span>(simpletree,<span class="at" style="color: #657422;">no.margin=</span><span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">nodelabels</span>()</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">tiplabels</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-18-Tree-Formats/index_files/figure-html/simpletreeplotnodelabels-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>For a tree with <strong>N tips</strong>, the tips have <strong>numbers 1…N</strong> and the <strong>nodes</strong> have <strong>numbers greater than N</strong> (this is in contrast to how this was done in early (&lt;1.9) versions of <code>ape</code>). These numbers are used to store information about the tree’s structure.</p>
<p>To do this, a matrix is created, with height corresponding to the number of internal and terminal nodes and width 2. The first column of the matrix has the node at the beginning of the branch, the second has the node at the end of the branch. For example, for our simple tree, this matrix is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">simpletree<span class="sc" style="color: #5E5E5E;">$</span>edge</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2]
 [1,]    8    9
 [2,]    9   10
 [3,]   10    1
 [4,]   10    2
 [5,]    9   11
 [6,]   11    3
 [7,]   11    4
 [8,]    8   12
 [9,]   12    5
[10,]   12   13
[11,]   13    6
[12,]   13    7</code></pre>
</div>
</div>
<p>This alone is enough for a basic topology. However, it might be nice to know what the taxa actually are, rather than just numbers. To do this, a character vector with as many entries as the number of tips is used. In the example tree, this is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">simpletree<span class="sc" style="color: #5E5E5E;">$</span>tip.label</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "A" "B" "C" "D" "E" "F" "G"</code></pre>
</div>
</div>
<p>It’s possible that internal nodes have labels, too (for example, the most recent common ancestor of a set of birds might be labeled Aves). If so, an optional <code>node.label</code> is used. If branch lengths are known, they are included as the numeric vector <code>edge.length</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">simpletree<span class="sc" style="color: #5E5E5E;">$</span>edge.length</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 1.5 1.0 0.5 0.5 1.0 0.5 0.5 2.0 1.0 0.5 0.5 0.5</code></pre>
</div>
</div>
<p>Finally, there are a few other elements (<code>Nnode</code>, the number of internal nodes; <code>class=phylo</code>) to set the class. To dump the the internal representation of phylo tree to screen, you can use <code>unclass()</code> which strips the class attribute (the S4 analog is <code>attributes</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">unclass</span>(simpletree)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$edge
      [,1] [,2]
 [1,]    8    9
 [2,]    9   10
 [3,]   10    1
 [4,]   10    2
 [5,]    9   11
 [6,]   11    3
 [7,]   11    4
 [8,]    8   12
 [9,]   12    5
[10,]   12   13
[11,]   13    6
[12,]   13    7

$tip.label
[1] "A" "B" "C" "D" "E" "F" "G"

$Nnode
[1] 6

$edge.length
 [1] 1.5 1.0 0.5 0.5 1.0 0.5 0.5 2.0 1.0 0.5 0.5 0.5</code></pre>
</div>
</div>
<p><code>phylo</code> trees are S3 objects. We’ll be learning more about them later, but an important thing to know is that you directly access any element of them by using the <code>$</code> operator (as was done above). Optional elements, or even elements of your own devising, can be added to them, too, using the same operator.</p>
</section>
<section id="ouchtree-ouch-version-2.0-or-above" class="level1">
<h1>ouchtree (<code>ouch</code> version 2.0 or above)</h1>
<p><code>OUCH</code> <span class="citation" data-cites="Butler:2004">King and Butler (2022)</span> uses a different tree structure than does <code>ape</code>. First, <code>OUCH</code>’s is an S4 class, rather than S3. There are several differences between them, which you’ll learn later. There are two main distinctions that will be important now. It helps to have a metaphor: think of a car. The S3 representation of a car is all the parts, neatly disassembled and laid out. The S4 representation of a car is a closed box. With S3, you can look at and manipulate any part of the car directly and manipulate it (using the <code>$</code> operator). You could check the amount of gas in the tank by directly accessing the gas. With S4, you should use a method, if one exists, to access and manipulate elements. For example, you could check the gas in the tank using the fuel gauge, if the fuel gauge method exists and works properly. S3 objects can be built up piecemeal, and there aren’t built-in checks to make sure that everything is correct: if you forget to add a wheel element to the S3 char, you won’t know there’s a problem until some function tries to access it and fails. S4 objects are instantiated once, when you pass them all the initialization info they need (they often have defaults, and often have internal consistency checks). <code>OUCH</code> uses the <code>ouchtree</code> class as a basic tree class, then derives other classes from this for storing information on analyses. The <code>ouchtree</code> class is:</p>
<p><code>setClass(</code></p>
<p><code>'ouchtree',</code></p>
<p><code>representation=representation(</code></p>
<p><code>nnodes = 'integer',</code></p>
<p><code>nodes = 'character',</code></p>
<p><code>ancestors = 'character',</code></p>
<p><code>nodelabels = 'character',</code></p>
<p><code>times = 'numeric',</code></p>
<p><code>root = 'integer',</code></p>
<p><code>nterm = 'integer',</code></p>
<p><code>term = 'integer',</code></p>
<p><code>anc.numbers = 'integer',</code></p>
<p><code>lineages = 'list',</code></p>
<p><code>epochs = 'list',</code></p>
<p><code>branch.times = 'matrix',</code></p>
<p><code>depth = 'numeric'</code></p>
<p><code>)</code></p>
<p><code>)</code></p>
<p>At first glance, it looks like creating a new <code>ouchtree</code> object will be a lot of work: there are 13 different elements, some of them vectors, built in the class. However, with S4 objects, the beauty of constructors comes into play. The constructor function for a new <code>ouchtree</code> is just the function</p>
<p><code>ouchtree(nodes, ancestors, times, labels = as.character(nodes))</code></p>
<p><strong>The <code>ouchtree</code> function only has four arguments</strong>, one of them optional. Using the function and these elements, all the other elements of the class are initialized.</p>
<ul>
<li>The first element is <code>nodes</code>, a character vector of node ids (including internal nodes). Unlike <code>ape</code>, the leaves do not need to have smaller ids than internal nodes.</li>
<li>The second argument is <code>ancestors</code>, a character vector of node ids of the ancestors for the nodes in the <code>nodes</code> vector. The <code>nodes</code> and <code>ancestors</code> vectors almost correspond to the second and first columns of the <code>ape</code> <code>edge</code> matrix, respectively, with the exception that <code>ouchtree</code> includes the root node with an ancestor of <code>NA</code>.</li>
<li>The third element, <code>times</code>, represents the height of each node from the root. Remember that <code>ape</code>’s <code>edge.length</code> vector has the length of the branch subtending each node; instead, <code>ouchtree</code> has the sum of the lengths of all branches connecting a given node to the root. Again, the root node is included in <code>ouchtree</code> (with height 0) but not in ape.</li>
<li>The fourth argument, <code>labels</code>, is a vector of labels for both tips and internal nodes. If internal nodes do not have names, they get a label of <code>&lt;NA&gt;</code>.</li>
</ul>
<p>For example, our example tree, when converted to ouchtree format, is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">attributes</span>(simpletreeouch)<span class="sc" style="color: #5E5E5E;">$</span>nodes</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">attributes</span>(simpletreeouch)<span class="sc" style="color: #5E5E5E;">$</span>ancestors</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] NA  "3" "1" "6" "6" "1" "2" "2" "3" "4" "4" "5" "5"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">attributes</span>(simpletreeouch)<span class="sc" style="color: #5E5E5E;">$</span>times</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0.0000000 0.8333333 0.6666667 0.8333333 0.8333333 0.5000000 1.0000000
 [8] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">attributes</span>(simpletreeouch)<span class="sc" style="color: #5E5E5E;">$</span>nodelabels</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] ""  ""  ""  ""  ""  ""  "G" "F" "E" "D" "C" "B" "A"</code></pre>
</div>
</div>
<p>One other element of <code>ouchtree</code>, created on initialization, is a matrix showing shared amount of time on a tree between two tips (which may be the same tip). This, multiplied by a rate parameter, becomes a variance-covariance matrix under a Brownian motion model, which we’ll be discussing in the course.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">attributes</span>(simpletreeouch)<span class="sc" style="color: #5E5E5E;">$</span>branch.times</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
[1,] 1.0000000 0.8333333 0.6666667 0.0000000 0.0000000 0.0000000 0.0000000
[2,] 0.8333333 1.0000000 0.6666667 0.0000000 0.0000000 0.0000000 0.0000000
[3,] 0.6666667 0.6666667 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[4,] 0.0000000 0.0000000 0.0000000 1.0000000 0.8333333 0.5000000 0.5000000
[5,] 0.0000000 0.0000000 0.0000000 0.8333333 1.0000000 0.5000000 0.5000000
[6,] 0.0000000 0.0000000 0.0000000 0.5000000 0.5000000 1.0000000 0.8333333
[7,] 0.0000000 0.0000000 0.0000000 0.5000000 0.5000000 0.8333333 1.0000000</code></pre>
</div>
</div>
<p>The entire content of the <code>simpletreeouch</code> object can be dumped to screen using the following command (not executed here to save paper):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">attributes</span>(simpletreeouch)</span></code></pre></div>
</div>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Butler:2004" class="csl-entry">
Butler, Marguerite A., and Aaron A. King. 2004. <span>“Phylogenetic Comparative Analysis: A Modeling Approach for Adaptive Evolution.”</span> <em>American Naturalist</em> 164: 683–95. <a href="https://doi.org/10.1086/426002">https://doi.org/10.1086/426002</a>.
</div>
<div id="ref-King:2022" class="csl-entry">
King, Aaron A., and Marguerite A. Butler. 2022. <em>Ouch: Ornstein-Uhlenbeck Models for Phylogenetic Comparative Hypotheses</em>. <a href="https://kingaa.github.io/ouch/">https://kingaa.github.io/ouch/</a>.
</div>
<div id="ref-Paradis:2019" class="csl-entry">
Paradis, Emmanuel, and Klaus Schliep. 2019. <span>“Ape 5.0: An Environment for Modern Phylogenetics and Evolutionary Analyses in <span>R</span>.”</span> <em>Bioinformatics</em> 35: 526–28. <a href="https://doi.org/10.1093/bioinformatics/bty633">https://doi.org/10.1093/bioinformatics/bty633</a>.
</div>
</div></section></div> ]]></description>
  <category>module 7</category>
  <category>week 13</category>
  <category>phylogenetic trees</category>
  <category>nexus</category>
  <category>fasta</category>
  <category>newick</category>
  <category>beast</category>
  <category>iqtree</category>
  <guid>https://mbutler808.github.io/posts/2023-04-18-Tree-Formats/index.html</guid>
  <pubDate>Tue, 18 Apr 2023 10:00:00 GMT</pubDate>
  <media:content url="https://www.newicks.com" medium="image"/>
</item>
<item>
  <title>Setting Up for IQTREE2</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-13-iqtree-setup/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>References for this Material:</p>
<ul>
<li>The Gene Tree species tree tutorial by Minh Bui <a href="http://www.iqtree.org/workshop/molevol2022" class="uri">http://www.iqtree.org/workshop/molevol2022</a></li>
<li>Many pages on Stack Overflow</li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand where user-installed software goes on your computer</li>
<li>Be able to install software and update the search paths to run from the command line</li>
<li>Run iqtree2 from the command line on your own computer</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>In the next session we will learn how to use <a href="www.iqtree.org">IQTREE2</a> to infer phylogenetic trees (both species trees and gene trees), and compute several concordance factors. Please follow these instructions to install all of the software and ensure it is in working order before the next class. We will use R to read in and explore the output from IQTREE.</p>
</section>
<section id="setup-iqtree-software" class="level1">
<h1>Setup iqtree software</h1>
<ul>
<li>Download <a href="https://github.com/iqtree/iqtree2/releases/tag/v2.1.2">iqtree version 2.1.2</a> and install the binary for your platform <em>following the instructions below</em>.</li>
<li>As of this writing, IQTREE2 v2.1.2 is the latest stable release version, the preview versions (e.g., 2.2.2.3) are in beta testing.</li>
<li>If you donʻt want to install IQTREE, try the webserver: <a href="http://iqtree.cibiv.univie.ac.at" class="uri">http://iqtree.cibiv.univie.ac.at</a></li>
</ul>
<section id="windows-users" class="level3">
<h3 class="anchored" data-anchor-id="windows-users">Windows users</h3>
<p>Move the IQTREE2 directory to <code>C:\Program Files</code>, this is where your software applicaiton files are stored. You can move it using your GUI, or using Git-Bash. Then update your computerʻs search paths so that you can run iqtree2 from the command line from any directory.</p>
<p><strong>Using the GUI</strong>, Move this directory to <code>C:\Program Files</code>, so the path to the iqtree binary should be <code>C:\Program Files\iqtree-2.1.2-Windows\bin\iqtree2.exe</code>. We are writing to Program Files, which is a protected folder so it will ask you to grant Adminstrator priviledges.</p>
<p>OR - <strong>Using Git-Bash</strong>:</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Installing Git-Bash
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you need to install Git-Bash, download it from here: <a href="https://gitforwindows.org" class="uri">https://gitforwindows.org</a> <strong>Choose these components during installation:</strong></p>
<ul>
<li>Windows Explorer Integration
<ul>
<li>Git Bash Here</li>
<li>Git GUI Here</li>
</ul></li>
<li>Git LFS</li>
<li>Associate .git* configuration files with the default text editor</li>
<li>Associate .sh files to be run with Bash</li>
<li>Add a Git Bash profile to Windows Terminal</li>
</ul>
</div>
</div>
<p>To write files to the <code>C:\Program Files\</code> directory, you will have to <strong>run Git-Bash as administrator</strong>, so do the following:</p>
<ol type="1">
<li>Click the Windows Start button and type <code>Git-Bash</code>.</li>
<li>You should see several options under <code>Git-Bash</code> on the right. Click on “Run as administrator”. If you donʻt see the options, click on the little “&gt;” to the right of Git Bash, and this sub menu should appear. Use “Run as administrator”.</li>
<li>Execute the bash commands below</li>
</ol>
<section id="using-git-bash" class="level4">
<h4 class="anchored" data-anchor-id="using-git-bash">Using git-bash:</h4>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Git-bash</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;">cd</span> Downloads</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">ls</span></span></code></pre></div>
</div>
<p>Check if the directory is there an unzipped. If it is zipped, run:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Git-bash</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;">unzip</span> iqtree-2.1.2-Windows.zip</span></code></pre></div>
</div>
<p>Move to files to the application folder. Be sure to use <strong>double quotes</strong> around the path because of the space.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Git-bash</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;">mv</span> iqtree-2.1.2-Windows <span class="st" style="color: #20794D;">"/C/Program Files/"</span></span></code></pre></div>
</div>
<p>Finally, add the path to the binary to the bash search path:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Git-bash</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">PATH</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$PATH</span>:<span class="st" style="color: #20794D;">"/C/Program Files/iqtree-2.1.2-Windows/bin"</span></span></code></pre></div>
</div>
<p>Now you can just type <code>iqtree2</code> from Git-bash and it should run iqtree from any folder. If you type <code>$PATH</code> at the command line, you should see the path you just added along with paths to many other software applications that are installed.</p>
</section>
</section>
<section id="mac-users" class="level3">
<h3 class="anchored" data-anchor-id="mac-users">Mac users</h3>
<p>Open a terminal and type <code>$PATH</code>. You will see the search paths that your computer looks through when you execute commands.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="va" style="color: #111111;">$PATH</span></span></code></pre></div>
</div>
<p>You will see the following paths, separated by <code>:</code>, along with many others. These are the directories that your computer searches through when you type commands on the command line searching for a match to the software you are executing.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">/opt/local/bin:/opt/local/sbin:/usr/local/bin:</span></span></code></pre></div>
</div>
<p>If we save (a link to) the binary for IQTREE2 <code>/opt/local/bin</code>, then we can execute the command <code>iqtree2</code> from any directory without worrying about specifying the path to the applicaiton.</p>
<p>Check out the directory <code>/opt/local/</code>. List the details of the <code>bin</code> subdirectory and notice that some of the applicaitons saved there are actually symbolic links</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="bu" style="color: null;">cd</span> /opt/local/bin</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">ls</span> <span class="at" style="color: #657422;">-la</span></span></code></pre></div>
</div>
<p>You will see something like this, along with many other binaries:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">lrwxr-xr-x</span>    1 root      wheel        40 Feb  7 09:30 c_rehash <span class="at" style="color: #657422;">-</span><span class="op" style="color: #5E5E5E;">&gt;</span> /opt/local/libexec/openssl3/bin/c_rehash</span>
<span id="cb8-2"><span class="ex" style="color: null;">-rwxr-xr-x</span>    1 macports  wheel  10425872 Dec 10 22:28 cmake</span></code></pre></div>
</div>
<p>In the example above, <code>c_rehash</code> is a sybmolic link that is pointing to the location of the actual location of the binary which is in the a program directory within the <code>libexec/</code> subdirectory of <code>/opt/local</code>. On the other hand, <code>cmake</code> is the binary itself.</p>
<p>Letʻs move the <strong>iqtree2</strong> directory to <code>/opt/local/libexec/</code>. Then you will have to make a symbolic link to iqtree2 in <code>/opt/local/bin</code>. Start by downloading the zipped directory. It should automatically unzip. Assuming it downloaded to your Downloads folder, open a terminal and issue the following commands:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="bu" style="color: null;">cd</span> ~</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">ls</span> Downloads</span></code></pre></div>
</div>
<p>You should see the <code>iqtree-2.1.2-MacOSX</code> folder inside of your Downloads folder. We will now move the iqtree folder to the place where user installed software is saved. You will probably be denied permission to just use <code>mv folder_from folder_to</code> because it is in a protected place on your harddrive, so you will have to use <code>sudo</code> for <strong>superuser do</strong>, and it will ask for your computer password to confirm.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;">sudo</span> mv Downloads/iqtree-2.1.2-MacOSX /opt/local/libexec</span></code></pre></div>
</div>
<p>The directory should now be there:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;">ls</span> /opt/local/libexec</span></code></pre></div>
</div>
<p>Now make a symbolic link in the <code>/opt/local/bin</code> folder to your iqtree executable: <code>ln -s /path/to/original /path/to/link</code></p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;">ln</span> <span class="at" style="color: #657422;">-s</span> /opt/local/libexec/iqtree-2.1.2-MacOSX/bin/iqtree2 /opt/local/bin/iqtree2</span></code></pre></div>
</div>
<p>If you get a permission denied, add “sudo” in front of the line to create a symbolic link. After you do that, you can just run iqtree2 on the command line from directory and it will find the app along your computerʻs searchpath. Now type <code>iqtree2</code> on the command line. You should see a message like this with nine examples:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">IQ-TREE</span> multicore version 2.1.2 COVID-edition for Mac OS X 64-bit built Oct 22 2020</span>
<span id="cb13-2"><span class="ex" style="color: null;">Developed</span> by Bui Quang Minh, James Barbetti, Nguyen Lam Tung,</span>
<span id="cb13-3"><span class="ex" style="color: null;">Olga</span> Chernomor, Heiko Schmidt, Dominik Schrempf, Michael Woodhams.</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="ex" style="color: null;">Command-line</span> examples <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">replace</span> <span class="st" style="color: #20794D;">'iqtree2 ...'</span> by actual path to executable<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="ex" style="color: null;">1.</span> Infer maximum-likelihood tree from a sequence alignment <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">example.phy</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb13-8">   <span class="ex" style="color: null;">with</span> the best-fit model automatically selected by ModelFinder:</span>
<span id="cb13-9">     <span class="ex" style="color: null;">iqtree2</span> <span class="at" style="color: #657422;">-s</span> example.phy</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="ex" style="color: null;">2.</span> Perform ModelFinder without subsequent tree inference:</span>
<span id="cb13-12">     <span class="ex" style="color: null;">iqtree2</span> <span class="at" style="color: #657422;">-s</span> example.phy <span class="at" style="color: #657422;">-m</span> MF</span>
<span id="cb13-13">   <span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">use</span> <span class="st" style="color: #20794D;">'-m TEST'</span> to resemble jModelTest/ProtTest<span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="ex" style="color: null;">...</span></span></code></pre></div>
</div>
</section>
<section id="multiple-installations-of-iqtree2" class="level2">
<h2 class="anchored" data-anchor-id="multiple-installations-of-iqtree2">Multiple installations of iqtree2</h2>
<p>If you want, you can install multiple versions of iqtree. Just be sure to give the binary different names. For example if you install iqtree v2.2.2.3, (latest pre-release version) you could name that binary <code>iqtree2.2.2.3</code> or <code>iqtree2beta</code> etc. so as to have one unique name per software application.</p>
</section>
</section>
<section id="setup-your-tutorial-folder" class="level1">
<h1>Setup your Tutorial Folder</h1>
<p>Make a folder for this exercise <code>TurtleTutorial</code> somewhere convenient (in your <code>rclass</code> folder?).</p>
<ul>
<li><p>Download these files into it:</p>
<ul>
<li><a href="http://www.iqtree.org/workshop/data/turtle.fa">turtle.fa</a> : A sequence alignment (in FASTA format) which is a subset of the original dataset used to assess the phylogenetic position of Turtles relative to Crocodiles and Birds <a href="https://doi.org/10.1186/1741-7007-10-65">Chiari et al., 2012</a>.</li>
<li><a href="http://www.iqtree.org/workshop/data/turtle.nex">turtle.nex</a> : The partition file (in NEXUS format) defining 29 genes, which are a subset of the original dataset of 248 genes.</li>
</ul></li>
<li><p>The R script <a href="../../code/concordance.R"><code>concordance.R</code></a></p></li>
<li><p>The IQTREE shell script <a href="../../code/iqtreerun.R"><code>iqtreerun.sh</code></a></p></li>
</ul>
</section>
<section id="test-your-iqtree-installation" class="level1">
<h1>Test your IQTREE installation</h1>
<p>From a terminal window, navigate to your <code>TurtleTutorial</code> directory and check if iqtree works:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;">iqtree2</span></span>
<span id="cb14-2"><span class="ex" style="color: null;">iqtree2</span> <span class="at" style="color: #657422;">-s</span> turtle.fa</span></code></pre></div>
</div>
<p>It should begin running iqtree and you will see messages during execution.</p>
</section>
<section id="r-packages-you-will-need" class="level1">
<h1>R packages you will need</h1>
<ul>
<li>Start up R and install any necessary packages that you need to install:
<ul>
<li><code>viridis</code></li>
<li><code>GGally</code></li>
<li><code>entropy</code></li>
<li><code>ggplot2</code></li>
<li><code>dplyr</code></li>
<li><code>ggrepel</code></li>
</ul></li>
</ul>
<p>You are all set to use <strong>iqtree2</strong>!</p>
</section>
<section id="iqtree-documentation" class="level1">
<h1>IQTREE documentation</h1>
<ul>
<li><p>[IQTREE quickstart]](http://www.iqtree.org/doc/Quickstart)</p></li>
<li><p>IQTREE documentation <a href="http://www.iqtree.org/doc/" class="uri">http://www.iqtree.org/doc/</a></p></li>
<li><p>Command Line Reference (when you get more familiar with it) <a href="http://www.iqtree.org/doc/Command-Reference" class="uri">http://www.iqtree.org/doc/Command-Reference</a></p></li>
</ul>


</section>

 ]]></description>
  <category>module 7</category>
  <category>week 13</category>
  <category>iqtree2</category>
  <category>phylogenetic inference</category>
  <category>command line</category>
  <guid>https://mbutler808.github.io/posts/2023-04-13-iqtree-setup/index.html</guid>
  <pubDate>Thu, 13 Apr 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Phylogenetic Inference with IQTREE2</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-13-iqtree-phylogenetics/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>References for this Material:</p>
<ul>
<li><p>The Gene Tree species tree tutorial by Bui Minh <a href="http://www.iqtree.org/workshop/molevol2022" class="uri">http://www.iqtree.org/workshop/molevol2022</a>. Please see for more information.</p></li>
<li><p>And Rob Lanfearʻs excellent blog post about concordance factors <a href="http://www.robertlanfear.com/blog/files/concordance_factors.html" class="uri">http://www.robertlanfear.com/blog/files/concordance_factors.html</a> with R code to help with analysis.</p></li>
<li><p>See Methods Paper: Bui Quang Minh, Matthew W Hahn, Robert Lanfear New Methods to Calculate Concordance Factors for Phylogenomic Datasets Molecular Biology and Evolution, Volume 37, Issue 9, September 2020, Pages 2727–2733, <a href="https://doi.org/10.1093/molbev/msaa106" class="uri">https://doi.org/10.1093/molbev/msaa106</a></p></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand where user-installed software goes on your computer</li>
<li>Be able to install software and update the search paths to run from the command line</li>
<li>Run iqtree2 from the command line on your own computer</li>
</ul>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Setup iqtree software
</div>
</div>
<div class="callout-body-container callout-body">
<p>Instructions for installing IQTREE2 and setup for this lession were provided in the <a href="../../posts/2023-04-13-iqtree-setup/index.html">previous lesson</a>.</p>
<section id="setup-your-tutorial-folder" class="level4">
<h4 class="anchored" data-anchor-id="setup-your-tutorial-folder">Setup your Tutorial Folder</h4>
<p>Make a <code>TurtleTutorial</code> folder, add the following files/folders:</p>
<ul>
<li>Make an <code>input</code> folder and put these files into it:
<ul>
<li><a href="http://www.iqtree.org/workshop/data/turtle.fa">turtle.fa</a> : A sequence alignment (in FASTA format) which is a subset of the original dataset used to assess the phylogenetic position of Turtles relative to Crocodiles and Birds <a href="https://doi.org/10.1186/1741-7007-10-65">Chiari et al., 2012</a>.<br>
</li>
<li><a href="http://www.iqtree.org/workshop/data/turtle.nex">turtle.nex</a> : The partition file (in NEXUS format) defining 29 genes, which are a subset of the original dataset of 248 genes.<br>
</li>
</ul></li>
<li>The R script <a href="../../code/concordance.R"><code>concordance.R</code></a></li>
<li>iqtree shell script: <a href="../../code/iqtreerun.sh"><code>iqtreerun.sh</code></a></li>
<li>If you donʻt want to setup IQTREE2 and infer the phylogenies yourself, you can clone the repo (or to get the files, clone the repo, delete the out directories, and run the scripts to get the phylogenies yourself) <a href="https://github.com/mbutler808/TurtleTutorial" class="uri">https://github.com/mbutler808/TurtleTutorial</a></li>
</ul>
</section>
<section id="r-packages-you-will-need" class="level4">
<h4 class="anchored" data-anchor-id="r-packages-you-will-need">R packages you will need</h4>
<ul>
<li><code>viridis</code></li>
<li><code>GGally</code></li>
<li><code>entropy</code></li>
<li><code>ggplot2</code></li>
<li><code>dplyr</code></li>
<li><code>ggrepel</code></li>
</ul>
</section>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>When inferring phylogenies from sequence data, it is important to provide support values, usually at the nodes, to indicate how much evidence there is for each split along the phylogeny. The most common and familar are nodal support values - <strong>bootstrap support</strong> in percent for <strong>maximum likelihood trees</strong>, and <strong>posterior probability</strong> for trees inferred by <strong>Bayesian inference</strong>.</p>
<p>IQTREE2 is software for the inference of phylogenies by <strong>Maximum Likelihood</strong> <span class="citation" data-cites="Minh:2020">(Minh et al. 2020)</span>. Several additional modules are bundled with IQTREE2. <strong>ModelFinder</strong> searches for the best substition models prior to phylogenetic inference <span class="citation" data-cites="Kalyaanamoorthy:2017">(Kalyaanamoorthy et al. 2017)</span>. ModelFinder can also combine partitions to reduce overparameterization, similar to <strong>PartitionFinder</strong> <span class="citation" data-cites="Lanfear:2016">(Lanfear et al. 2016)</span>.</p>
<p>There is an increasing recognition that nodal support is not enough. Most phylogenetic analyses are now multi-locus, with data from several to hundred of genes. More studies are discovering that not all of the loci may agree – sometimes certain loci will support one topology whereas others may support an alternative topology. This is called gene-tree species-tree discordance. It can arise by evolutionary mechanisms such as incomplete lineage sorting when you have rapid radiation (short branch lengths in parts of the tree), where ancestral alleles do not have sufficient time to sort themselves out amongst the descendant lineages to reflect the history of cladogenesis, or it can arise by noisy data. Either way, if you have gene-tree species-tree discordance, it will erode support at nodes, or in the worst case, appear to strongly support a spurious evolutionary scenario. We can test for concordance between gene trees and species trees <span class="citation" data-cites="Minh:2020a">(Minh, Hahn, and Lanfear 2020)</span></p>
<p>In this module we will learn how to use <a href="www.iqtree.org">IQTREE2</a> to infer phylogenetic trees (both species trees and gene trees), and compute several concordance factors. Gene concordance and discordance factors, and site concordance and discordance factors (site = position along the DNA sequence). We will use R to read in and explore the output from IQTREE.</p>
</section>
<section id="iqtree-and-ml-phylogenetic-inference-lecture" class="level1">
<h1>IQTREE and ML phylogenetic inference lecture</h1>
<p>We will review Bui Quang Minhʻs (<a href="https://bqminh.github.io/people/minh/">Minh Bùi</a>) <a href="https://github.com/simon-ho/SydneyPhyloWorkshop/blob/master/Lecture2_1.IQTREE.pdf">lecture on IQTREE2</a> and how it addresses some issues in maximum likelihood inference of phylogenetics.</p>
<p>Here is an illustration of phylogenetic inference by Maximum Likelihood (Figure&nbsp;1). The likelihood of the tree is calculated given the data (here, the DNA sequence at each position or site). Each site is considered an independent data point, and each variable site provides some information about how closely related the taxa are. The likelihood is an expression of a combined probability across all of the sites, assuming a particular substitution model (the best substitution models are what ModelFinder or PartitionFinder finds). The topology and branch lengths that provide the Maximum Likelihood of the data is the ML tree.</p>
<div id="fig-ml" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/Site_pattern_frequencies_models.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: Figure: An illustration of phylogenetic inference by Maximum Likelihood. A multiple sequence alignment (here, DNA sequences), and DNA substitution models are used to make evolutionary inferences among the taxa (four species t1 through t4). The data in this alignment (in this case a toy example with 18 sites) is converted to a set of site patterns. The site patterns are shown along with the number of times they occur in alignment. These site patterns are used to calculate the likelihood given the substitution model and a phylogenetic tree (in this case an unrooted four-taxon tree). It is also necessary to assume a substitution model to estimate evolutionary distances for pairs of sequences (distances are the number of substitutions that have occurred since sequences had a common ancestor). The evolutionary distance equation (d12) is based on the simple model proposed by Jukes and Cantor in 1969. The equation transforms the proportion of nucleotide differences between taxa 1 and 2 (p12 = 4/18; the four site patterns that differ between taxa 1 and 2 are indicated with asterisks) into an evolutionary distance (in this case d12=0.2635 substitutions per site).</figcaption><p></p>
</figure>
</div>
<p><a href="https://commons.wikimedia.org/w/index.php?curid=95686405">Source: By EBraun68 - Own work, CC BY-SA 4.0</a></p>
</section>
<section id="infer-the-turtle-phylogeny-with-iqtree" class="level1">
<h1>Infer the Turtle Phylogeny with IQTREE</h1>
<section id="the-theoretical-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-theoretical-problem">The theoretical problem</h2>
<p>The position of turtles among vertebrates has been enigmatic for decades (Figure&nbsp;2). At various times it has been allied more closely with mammals or lizards. It is one of those truly hard biological problems. Even with the development of genomics, the position of turtles with respect to crocodiles and birds remains a hot topic of research as of late.</p>
<div id="fig-turtle" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/turtle.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;2: The changing position of turtles. Image by Jeremy Brown, from IQTREE tutorial</figcaption><p></p>
</figure>
</div>
<p><a href="http://www.iqtree.org/workshop/molevol2022">Source: Jeremy Brown</a></p>
<p>Importantly, different groups have gotten different answers even with 100% bootstrap support at the nodes. This highlights a problem that can occur when we have gene trees that conflict with the species tree. This can occur through incomplete lineage sorting (you will see ILS a lot in the literature; Figure&nbsp;3), or via hybridization, or other mechanisms.</p>
<div id="fig-ils" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/Incomplete-Lineage-Sorting.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;3: Incomplete Lineage Sorting. The species tree (thick gray history) in relation to a gene tree (thin colored history). New lineages arising from murations in the gene are represented by changes in color. Differences in the history of the gene versus the species can occur when the two alleles in the population prior to the split of Dmel are maintained through to the split of Dere and Dyak, leading to maintenance of an ancestral polymorphism and incomplete lineage sorting. The species tree is now incongruent with the gene tree (tree 2). The greater the diversity in the ancestral population and the shorter the time between speciation events, the more likely we are to see gene-tree species tree conflict.</figcaption><p></p>
</figure>
</div>
<p>Source: <span class="citation" data-cites="Pollard:2006">(Pollard et al. 2006)</span></p>
</section>
<section id="the-data" class="level2">
<h2 class="anchored" data-anchor-id="the-data">The data</h2>
<p>The original genomic data comes from <span class="citation" data-cites="Chiari:2012">(Chiari et al. 2012)</span>. We are analyzing a subset of 29 genes from the original 248 genes, as well as a subset of taxa (to allow faster runs), presented in Bui Minhʻs <a href="http://www.iqtree.org/workshop/molevol2022">tutorial</a>. We will use IQTREE2 to generate the phylogenetic data, and then use R to analyze some of the output. We are just going to do the basics, for more indepth coverage see <a href="http://www.iqtree.org/workshop/molevol2022">Minh Buiʻs tutorial</a>.</p>
</section>
<section id="species-trees" class="level2">
<h2 class="anchored" data-anchor-id="species-trees">Species Trees</h2>
<p>A shell script for thes IQTREE commands are in <code>iqtreerun.sh</code></p>
<section id="simplest-phylogeny" class="level3">
<h3 class="anchored" data-anchor-id="simplest-phylogeny">Simplest phylogeny</h3>
<p><a href="http://www.iqtree.org">IQTREE2</a> is the latest version of the IQTREE software. It runs on the command line, and each run generates a number of output files. To keep organized, it is a good idea to save your iqtree commands as a shell script, and to make input and output directories.</p>
<p>Mac users open your <code>Terminal</code>, Windows users open your <code>Git-Bash</code>, navigate to your <code>TurtleTutorial</code> folder.</p>
<p>The simple command below will find the best-fit model using ModelFinder, reconstruct the ML tree, and calculate branch supports using the ultrafast boostrap.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">iqtree2</span> <span class="at" style="color: #657422;">-s</span> input/turtle.fa <span class="at" style="color: #657422;">-B</span> 1000 <span class="at" style="color: #657422;">-T</span> AUTO</span></code></pre></div>
</div>
<p><strong>Run options explained:</strong></p>
<ul>
<li><code>-s input/turtle.fa</code> the path to the input alignment in <code>turtle.fa</code>.<br>
</li>
<li><code>-B 1000</code> 1000 replicates for the ultrafast bootstrap (Minh et al., 2013).<br>
</li>
<li><code>-T AUTO</code> auto select the best number of CPU cores to speed up the analysis.</li>
</ul>
<p><strong>Output files (in <code>out</code>):</strong></p>
<ul>
<li><code>turtle.fa.iqtree</code> the main report file that is self-readable. You should look at this file to see the computational results. It also contains a textual representation of the final tree.<br>
</li>
<li><code>turtle.fa.treefile</code> the ML tree in NEWICK format, which can be visualized in FigTree or any other tree viewer program.<br>
</li>
<li><code>turtle.fa.log</code> log file of the entire run (also printed on the screen).<br>
</li>
<li><code>turtle.fa.ckp.gz</code> checkpoint file used to resume an interrupted analysis.<br>
… and a few other files.</li>
</ul>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Look at the report file <code>turtle.fa.iqtree</code>, and the log file <code>turtle.fa.log</code>.</li>
<li>What is the best-fit model name? What do you know about this model? (see <a href="http://www.iqtree.org/doc/Substitution-Models">substitution models</a> available in IQ-TREE)</li>
<li>What are the AIC/AICc/BIC scores of this model and tree?</li>
<li>Visualise the tree <code>turtle.fa.treefile</code> in a tree viewer software like <a href="http://tree.bio.ed.ac.uk/software/figtree/">FigTree</a> (or read into R with <code>ape</code> and <code>plot()</code>).<br>
</li>
<li>What relationship among three trees does this tree support?</li>
<li>What is the ultrafast bootstrap support (%) for the relevant clade?</li>
<li>Does this tree agree with the published tree <span class="citation" data-cites="Chiari:2012">(Chiari et al. 2012)</span>?</li>
</ul>
</div>
</div>
</section>
<section id="species-tree-partitioned-by-locus" class="level3">
<h3 class="anchored" data-anchor-id="species-tree-partitioned-by-locus">Species Tree partitioned by locus</h3>
<p>It is well known that some genes evolve faster than others (for example nuclear protein-coding genes vs.&nbsp;mitochondrial genes vs.&nbsp;non-coding genes). Partitioning by locus allows the rate of substitution for each locus to be scaled to different evolutionary rates for an improved fit of the evolutionary model to the observed DNA sequence data.</p>
<p>We add a partition file indicating where the loci are in the alighment:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># infer the species tree with 1000 ultrafast bootstraps </span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># and an edge-linked fully-partitioned model </span></span>
<span id="cb2-3"><span class="ex" style="color: null;">iqtree2</span> <span class="at" style="color: #657422;">-s</span> input/turtle.fa <span class="at" style="color: #657422;">-p</span> input/turtle.nex <span class="at" style="color: #657422;">--prefix</span> out/species <span class="at" style="color: #657422;">-B</span> 1000 <span class="at" style="color: #657422;">-nt</span> AUTO</span></code></pre></div>
</div>
<p><strong>Run options explained:</strong></p>
<ul>
<li><code>-p input/turtle.nex</code> the partition file that delimits the partitions in the alighment to specify an edge-linked proportional partition model (Chernomor et al., 2016). There is one set of branch lengths for the phylogeny, but each partition can have proportionally shorter or longer tree length (= same as slower or faster evolutionary rates, respectively).</li>
</ul>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Look at the report file <code>turtle.fa.iqtree</code>, and the log file <code>turtle.fa.log</code>.</li>
<li>What are the AIC/AICc/BIC scores of this model and tree? How does it compare?</li>
<li>What relationship among three trees does this tree support?</li>
</ul>
</div>
</div>
</section>
<section id="gene-trees" class="level3">
<h3 class="anchored" data-anchor-id="gene-trees">Gene Trees</h3>
<p>We will now infer a separate phylogeny for each locus (= gene). It is really easy to compute gene trees in IQTREE. The same inputs are used as for the paritioned model, but we just tell IQTREE to estimate each gene tree separately with a different (<code>-S</code>) flag for the partition file:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># infer single-locus trees  </span></span>
<span id="cb3-2"><span class="ex" style="color: null;">iqtree2</span> <span class="at" style="color: #657422;">-s</span> input/turtle.fa <span class="at" style="color: #657422;">-S</span> input/turtle.nex <span class="at" style="color: #657422;">-m</span> TEST <span class="at" style="color: #657422;">--prefix</span> out/loci <span class="at" style="color: #657422;">-B</span> 1000 </span></code></pre></div>
</div>
<p><strong>Run options explained:</strong></p>
<ul>
<li><code>-S input/turtle.nex</code> to infer separate trees for every partition in <code>turtle.nex</code>. All output files are similar to a partition analysis, except that the tree <code>turtle.loci.treefile</code> now contains multiple trees - one for each gene.</li>
</ul>
</section>
</section>
<section id="concordance-factors" class="level2">
<h2 class="anchored" data-anchor-id="concordance-factors">Concordance factors</h2>
<p>Typcial phylogenetic inference methods essentially imply that gene trees and species tree are one and the same. However, it is well known that gene trees might be discordant (i.e., individual genes may have differet histories). We can actually check with large multilocus datasets (with many loci of sufficient length). Therefore, we now want to quantify the agreement between gene trees and species tree in a so-called concordance factor <span class="citation" data-cites="Minh:2020a">(Minh, Hahn, and Lanfear 2020)</span>.</p>
<p>You can now compute gene concordance factor (gCF) and site concordance factor (sCF) for the tree inferred under the partition model:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># locus modelfinder species tree vs. single-locus trees </span></span>
<span id="cb4-2"><span class="ex" style="color: null;">iqtree2</span> <span class="at" style="color: #657422;">-t</span> out/species.treefile <span class="at" style="color: #657422;">--gcf</span> out/loci.treefile <span class="at" style="color: #657422;">-s</span> input/turtle.fa <span class="at" style="color: #657422;">--scf</span> 100 <span class="at" style="color: #657422;">--prefix</span> out/concord </span></code></pre></div>
</div>
<p><strong>Run options explained:</strong></p>
<ul>
<li><code>-t out/species.treefile</code> to specify the species tree. We use tree under the partitioned model here, but you can of course use the other tree.</li>
<li><code>--gcf out/loci.treefile</code> to specify a gene-trees file.</li>
<li><code>--scf 100</code> to draw 100 random quartets when computing sCF.</li>
</ul>
<p><strong>Output files (in <code>out</code>):</strong></p>
<ul>
<li><code>concord.cf.tree</code>: tree file where branches are annotated with bootstrap/gCF/sCF values.</li>
<li><code>concord.cf.stat</code>: a table file with various statistics for every branch of the tree.</li>
</ul>
<p>Similarly, you can compute gCF and sCF for the tree under different species trees, for example if you generate an unpartitioned model:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">iqtree2</span> <span class="at" style="color: #657422;">-t</span> out/unpartitioned.treefile <span class="at" style="color: #657422;">--gcf</span> out/loci.treefile <span class="at" style="color: #657422;">-s</span> input/turtle.fa <span class="at" style="color: #657422;">--scf</span> 100 <span class="at" style="color: #657422;">--prefix</span> out/concord.unpartitioned </span></code></pre></div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you need to redo any of these analyses, add the <code>-redo</code> flag at the end of the command.</p>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Definitions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Gene concordance factor (gCF) is the percentage of decisive gene trees concordant with a particular branch of the species tree (0% &lt;= gCF(b) &lt;= 100%). gCF=0% means that branch b does not occur in any gene trees, whereas gCF=100% means that branch b occurs in every gene tree.<br>
</li>
<li>Site concordance factor (sCF) is the percentage of decisive (parsimony informative) alignment sites supporting a particular branch of the species tree (~33% &lt;= sCF(b) &lt;= 100%). sCF&lt;33% means that another discordant branch b’ is more supported, whereas sCF=100% means that branch b is supported by all sites.<br>
</li>
<li><strong>CAUTION</strong> when gCF ~ 0% or sCF &lt; 33%, even if boostrap supports are ~100%!</li>
<li><strong>GREAT</strong> when gCF and sCF &gt; 50% (i.e., branch is supported by a majority of genes and sites).</li>
</ul>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Visualise <code>concord.cf.tree.nex</code> in FigTree.</li>
<li>Explore gene concordance factor (gCF), gene discordance factors (gDF1, gDF2, gDFP), site concordance factor (sCF) and site discordance factors (sDF1, sDF2).</li>
<li>How do gCF and sCF values look compared with bootstrap supports?</li>
</ul>
</div>
</div>
</section>
</section>
<section id="further-analyses-of-iqtree-outputs" class="level1">
<h1>Further analyses of IQTREE outputs</h1>
<p>The code and analysis that follows was borrowed and adapted from Rob Lanfearʻs excellent blog on exploring gene-tree species-tree concordance <a href="http://www.robertlanfear.com/blog/files/concordance_factors.html" class="uri">http://www.robertlanfear.com/blog/files/concordance_factors.html</a>. This is an excellent example of how to integrate output from other analysis software with R code.</p>
<p>An R script for these analyses is in <code>concordance.R</code></p>
<section id="using-concordance-factors-to-understand-your-data" class="level2">
<h2 class="anchored" data-anchor-id="using-concordance-factors-to-understand-your-data">Using concordance factors to understand your data</h2>
<p>The first step is just to look at the concordance factors on the tree. To do this, load the output tree (concord.cf.tree) in any tree viewer such as Figtree or you can use R. In this tree, each branch label shows bootstrap / gCF / sCF.</p>
<p>We can also plot the trees using <code>ggtree</code> (but for a first look around I usually use FigTree).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">require</span>(viridis)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">require</span>(GGally)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">require</span>(entropy)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">require</span>(ggtree)</span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;">require</span>(treeio)</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;">require</span>(tidytree)</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;">require</span>(ggplot2)</span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;">require</span>(dplyr)</span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;">require</span>(ggrepel)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># read the data</span></span>
<span id="cb7-2">d <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read.delim</span>(<span class="st" style="color: #20794D;">"out/concord.cf.stat"</span>, <span class="at" style="color: #657422;">header =</span> T, <span class="at" style="color: #657422;">comment.char=</span><span class="st" style="color: #20794D;">'#'</span>)</span>
<span id="cb7-3">               </span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># rename the bootstrap and branchlength columns</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">names</span>(d)[<span class="fu" style="color: #4758AB;">names</span>(d)<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"Label"</span>] <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"bootstrap"</span></span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;">names</span>(d)[<span class="fu" style="color: #4758AB;">names</span>(d)<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"Length"</span>] <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"branchlength"</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;"># plot the tree</span></span>
<span id="cb7-9">tree <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.iqtree</span>(<span class="st" style="color: #20794D;">"out/concord.cf.tree"</span>)  <span class="co" style="color: #5E5E5E;"># read in tree file</span></span>
<span id="cb7-10">tib <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as_tibble</span>(tree)</span>
<span id="cb7-11">d<span class="sc" style="color: #5E5E5E;">$</span>node <span class="ot" style="color: #003B4F;">&lt;-</span> d<span class="sc" style="color: #5E5E5E;">$</span>ID <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>  <span class="co" style="color: #5E5E5E;"># need to +1 to make IQTREE node numbers = ggtree </span></span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;"># merge the tree and data </span></span>
<span id="cb7-14">td <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">full_join</span>(tib, d, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"node"</span>)  <span class="co" style="color: #5E5E5E;"># combine the tree (tib) and data (d)</span></span>
<span id="cb7-15">td <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.treedata</span>(td)       <span class="co" style="color: #5E5E5E;"># coerce to treedata format (td)</span></span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="fu" style="color: #4758AB;">ggtree</span>(td) <span class="sc" style="color: #5E5E5E;">+</span>          <span class="co" style="color: #5E5E5E;"># plot tree</span></span>
<span id="cb7-18">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position=</span><span class="st" style="color: #20794D;">"right"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-19">  <span class="fu" style="color: #4758AB;">geom_tiplab</span>() <span class="sc" style="color: #5E5E5E;">+</span>                         <span class="co" style="color: #5E5E5E;"># add tip labels</span></span>
<span id="cb7-20">  <span class="fu" style="color: #4758AB;">geom_label2</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label, <span class="at" style="color: #657422;">subset=</span><span class="sc" style="color: #5E5E5E;">!</span>isTip), <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"black"</span>)  <span class="co" style="color: #5E5E5E;"># add node labels </span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-13-iqtree-phylogenetics/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The turtle clade contains <strong>Chelonoidis</strong> to <strong>Phrynops</strong>. Which clade do turtles group with? This part of the tree immediately illustrates the most important point: bootstraps and concordance factors are giving you very different information about each branch in the tree. Just take a look at how different the three numbers can be!</p>
</section>
</section>
<section id="how-concordance-factors-relate-to-each-other-and-to-bootstraps" class="level1">
<h1>How concordance factors relate to each other and to bootstraps</h1>
<p>More generally, we can look at the links between bootstrap, gCF, and sCF across all nodes of the tree. This is simple to do in R, because IQ-TREE outputs a tab-delimited file that’s easy to read called concord.cf.stat. This file has one row per branch in the tree, and gives a lot of details on the statistics for each branch.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># plot the values</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">ggplot</span>(d, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gCF, <span class="at" style="color: #657422;">y =</span> sCF)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> bootstrap)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">scale_colour_viridis</span>(<span class="at" style="color: #657422;">direction =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">xlim</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">ylim</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;">geom_abline</span>(<span class="at" style="color: #657422;">slope =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">intercept =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"dashed"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-13-iqtree-phylogenetics/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This plot shows a few important things. First, <em>low bootstrap values (bright colours) coincide with the lowest gCF and sCF values, as expected</em>. You can only get a low bootstrap value when the there’s very limited information on that branch in the alignment. And if there’s very little information, there will be very few sites (and therefore genes) that can support a branch.</p>
<p><strong>However, it is possible to have low gCF and sCF even with high bootstrap values.</strong> It turns out that <em>bootstrap values max out at 100% pretty quickly</em>, which tends to happen with very large datasets such as provided by Next-Gen sequencing.</p>
<p>Finally, <strong>sCF values have a minimum of ~30%</strong>, but <strong>gCF values can go all the way to 0%</strong>. This means that an sCF value ~30% is as low as you can possibly get. The range of possible values are simply a reflection of how these statistics are calculated. sCF values are calculated by comparing the three possible resolutions of quartet around a node, so when the data are completely equivocal about these resolutions, we expect an sCF value of 1 out of 3 or 33%. gCF values, on the other hand, are calculated from full gene trees, such that there are many more than 3 possible resolutions around a node, and the gCF value can be as low as 0% if no single gene tree contains a branch that’s present in the reference tree. This can happen when the genes are too short to contain informative sites (and happens more often deeper in the tree), or noisy data – a combination of biology and stochastic error that leads to a lot of gene-tree discordance.</p>
<p>Sometimes we want to label points. <code>ggrepel()</code> is very helpful for this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># label the points</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">ggplot</span>(d, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gCF, <span class="at" style="color: #657422;">y =</span> sCF, <span class="at" style="color: #657422;">label =</span> ID)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> bootstrap)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">scale_colour_viridis</span>(<span class="at" style="color: #657422;">direction =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;">xlim</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;">ylim</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;">geom_abline</span>(<span class="at" style="color: #657422;">slope =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">intercept =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;">geom_text_repel</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-13-iqtree-phylogenetics/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="digging-deeper-using-discordance-factors" class="level1">
<h1>Digging deeper using discordance factors</h1>
<p>First we need to find the ID of the problematic node:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># show branches of interest</span></span>
<span id="cb10-2">d[(d<span class="sc" style="color: #5E5E5E;">$</span>ID<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">20</span><span class="sc" style="color: #5E5E5E;">|</span>d<span class="sc" style="color: #5E5E5E;">$</span>ID<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">22</span>),]  <span class="co" style="color: #5E5E5E;"># these have lower bootstrap support than the others and have low gCF or sCF</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID   gCF gCF_N gDF1 gDF1_N  gDF2 gDF2_N  gDFP gDFP_N gN   sCF sCF_N  sDF1
4 20 75.00     3 0.00      0 25.00      1  0.00      0  4 38.24 26.35 28.02
6 22 48.28    14 3.45      1 17.24      5 31.03      9 29 36.13 57.59 22.17
  sDF1_N  sDF2 sDF2_N     sN bootstrap branchlength node
4  19.59 33.75  23.71  69.65        51   0.00355984   21
6  37.78 39.70  72.90 168.27        81   0.01865970   23</code></pre>
</div>
</div>
<p>We can see that the problematic nodes have very short branch lengths, which is consistent with possible incomplete lineage sorting.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># plot the tree with colors to highlight support</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;">ggtree</span>(td, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>SH_aLRT), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span>          <span class="co" style="color: #5E5E5E;"># plot tree</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position=</span><span class="st" style="color: #20794D;">"right"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">geom_tiplab</span>(<span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span>                         <span class="co" style="color: #5E5E5E;"># add tip labels</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;">geom_label2</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label, <span class="at" style="color: #657422;">subset=</span><span class="sc" style="color: #5E5E5E;">!</span>isTip), <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"black"</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># add node labels </span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;">geom_label2</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label, <span class="at" style="color: #657422;">subset=</span> (<span class="sc" style="color: #5E5E5E;">!</span>isTip <span class="sc" style="color: #5E5E5E;">&amp;</span> (node<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">22</span>))), <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"yellow"</span>) <span class="sc" style="color: #5E5E5E;">+</span>                  <span class="co" style="color: #5E5E5E;"># highlight low bootstrap support </span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">scale_color_continuous</span>(<span class="at" style="color: #657422;">low=</span><span class="st" style="color: #20794D;">"yellow"</span>, <span class="at" style="color: #657422;">high=</span><span class="st" style="color: #20794D;">"purple"</span>) <span class="co" style="color: #5E5E5E;"># color the branches by bootstrap</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-13-iqtree-phylogenetics/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">ggtree</span>(td) <span class="sc" style="color: #5E5E5E;">+</span>                                      <span class="co" style="color: #5E5E5E;"># plot tree</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">geom_tiplab</span>() <span class="sc" style="color: #5E5E5E;">+</span>                               <span class="co" style="color: #5E5E5E;"># plot tip labels</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">geom_label2</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>node, <span class="at" style="color: #657422;">subset=</span> <span class="sc" style="color: #5E5E5E;">!</span>isTip))  <span class="co" style="color: #5E5E5E;"># plot node numbers </span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-13-iqtree-phylogenetics/index_files/figure-html/unnamed-chunk-6-2.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="using-concordance-factors-to-test-the-assumptions-of-an-ils-model" class="level1">
<h1>Using concordance factors to test the assumptions of an ILS model</h1>
<p>If the discordance among gene trees and sites come from <em>incomplete lineage sorting</em>, different genes should randomly support one or the other of the discordant topologies. Thus, we can make a simple and testable prediction: that the number of gene trees or sites supporting the two discordant topologies should be roughly equal. Both of these ideas have been around for some time (for genes [link to Huson et al &amp; Steel 2005 Recomb] and for sites [link to Greene et al 2010]), and the IQ-TREE output lets us test them very easily.</p>
<p>The basic idea is that we count up the genes or sites supporting the two discordant topologies, and use a chi-square test to see if they’re significantly different. This requires a number of assumptions to hold (see the papers linked above). A simple way to calculate the probability that the data can reject <strong>equal frequencies</strong> of discordant toplogogies (EFp) for genes (gEFp) and for sites (sEFp). In this case failure to reject the hypothesis of equal frequencies is compatible with ILS.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># first we use a slightly modified chisq function</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;"># which behaves nicely when you feed it zeros</span></span>
<span id="cb14-3">chisq <span class="ot" style="color: #003B4F;">=</span> <span class="cf" style="color: #003B4F;">function</span>(DF1, DF2, N){</span>
<span id="cb14-4">    <span class="fu" style="color: #4758AB;">tryCatch</span>({</span>
<span id="cb14-5">        <span class="co" style="color: #5E5E5E;"># converts percentages to counts, runs chisq, gets pvalue</span></span>
<span id="cb14-6">        <span class="fu" style="color: #4758AB;">chisq.test</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">round</span>(DF1<span class="sc" style="color: #5E5E5E;">*</span>N)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">100</span>, <span class="fu" style="color: #4758AB;">round</span>(DF2<span class="sc" style="color: #5E5E5E;">*</span>N)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">100</span>))<span class="sc" style="color: #5E5E5E;">$</span>p.value</span>
<span id="cb14-7">    },</span>
<span id="cb14-8">    <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(err) {</span>
<span id="cb14-9">        <span class="co" style="color: #5E5E5E;"># errors come if you give chisq two zeros</span></span>
<span id="cb14-10">        <span class="co" style="color: #5E5E5E;"># but here we're sure that there's no difference</span></span>
<span id="cb14-11">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb14-12">    })</span>
<span id="cb14-13">}</span>
<span id="cb14-14"></span>
<span id="cb14-15">e <span class="ot" style="color: #003B4F;">=</span> d <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-16">    <span class="fu" style="color: #4758AB;">group_by</span>(ID) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-17">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">gEF_p =</span> <span class="fu" style="color: #4758AB;">chisq</span>(gDF1, gDF2, gN)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-18">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">sEF_p =</span> <span class="fu" style="color: #4758AB;">chisq</span>(sDF1, sDF2, sN))</span>
<span id="cb14-19">    </span>
<span id="cb14-20"></span>
<span id="cb14-21"><span class="fu" style="color: #4758AB;">subset</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(e), (gEF_p <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.05</span> <span class="sc" style="color: #5E5E5E;">|</span> sEF_p <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.05</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID   gCF gCF_N gDF1 gDF1_N  gDF2 gDF2_N  gDFP gDFP_N gN   sCF sCF_N  sDF1
6 22 48.28    14 3.45      1 17.24      5 31.03      9 29 36.13 57.59 22.17
  sDF1_N sDF2 sDF2_N     sN bootstrap branchlength node     gEF_p       sEF_p
6  37.78 39.7   72.9 168.27        81    0.0186597   23 0.1024704 0.003849915</code></pre>
</div>
</div>
</section>
<section id="internode-certainty" class="level1">
<h1>Internode certainty</h1>
<p>The last measure to quantify evidence for each branch is the <strong>internode certainty</strong> <span class="citation" data-cites="Salichos:2014">(Salichos, Stamatakis, and Rokas 2014)</span>.</p>
<p>the conflict along a given branch is</p>
<p>Internode certainty quantifies the degree of certainty for each branch (individual internode). It finds the two most common conflicting bipartitions, and measures the log magnitude of their difference.</p>
<p>We determine concordance in a clever way using set theory. We can think of each branch as splitting the tree into two subsets of taxa (bipartitions). What is so clever is that we donʻt have to compare the toplogies of the subtrees, just the taxa included. The task then comes down to checking for compatible intersections of the bipartitions. This makes it very easy (=fast) computationally. Hereʻs a figure from the paper by Figure&nbsp;4</p>
<div id="fig-internode-conflict" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/internode-conflict.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;4: Compatible and conflicting bipartitions. Bipartition A = {a, b, c, d, e | f, g, h, i, j} is composed of the partitions A1 = {{a, b, c, d, e}} and A2 = {f, g, h, i, j}, where a, b, c, d, e, f, g, h, i, and j are taxa. Bipartition B = {a, b, c | d, e, f, g, h, i, j} is composed of the partitions B1 = {a, b, c} and B2 = {d, e, f, g, h, i, j}, and bipartition C = {a, b, c, d, g | e, f, h, i, j} is composed of the partitions C1 = {a, b, c, d, g} and C2 = {e, f, h, i, j}.</figcaption><p></p>
</figure>
</div>
<p><span class="citation" data-cites="Salichos:2014">(Source: Salichos, Stamatakis, and Rokas 2014)</span></p>
<p>We check the compatibility of the biparitions by checking the intersections of their each possible set of bipartition pairs.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The definition of compatibility
</div>
</div>
<div class="callout-body-container callout-body">
<p>Two bipartitions <img src="https://latex.codecogs.com/png.latex?A=A_1%20%7C%20A_2"> and <img src="https://latex.codecogs.com/png.latex?B=B_1%20%7C%20B_2"> from the same taxon set are <strong>compatible</strong> <em>if and only if</em> at least one of the intersections of the four bipartition pairs (<img src="https://latex.codecogs.com/png.latex?A_1%20%5Ccap%20B_1">, <img src="https://latex.codecogs.com/png.latex?A_1%20%5Ccap%20B_2">, <img src="https://latex.codecogs.com/png.latex?A_2%20%5Ccap%20B_1">, <img src="https://latex.codecogs.com/png.latex?A_2%20%5Ccap%20B_2">) is empty (see citations in <span class="citation" data-cites="Salichos:2014">Salichos, Stamatakis, and Rokas (2014)</span>).</p>
</div>
</div>
<p>Bipartitions A and B are compatible because one of the intersections of their bipartition pairs (<img src="https://latex.codecogs.com/png.latex?A_2%20%5Ccap%20B_1">) is empty.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA_2%20%5Ccap%20B_1%20=%20%20%5C%7Bf,%20g,%20h,%20i,%20j%5C%7D%20%5Ccap%20%5C%7Ba,%20b,%20c%5C%7D%20=%20%5Cemptyset%0A"></p>
<p>Bipartitions B and C are also compatible (<img src="https://latex.codecogs.com/png.latex?B_1%20%5Ccap%20C_2"> is empty).</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AB_1%20%5Ccap%20C_2%20=%20%20%5C%7Ba,%20b,%20c%5C%7D%20%5Ccap%20%5C%7Be,%20f,%20h,%20i,%20j%5C%7D%20=%20%5Cemptyset%0A"></p>
<p>In contrast, bipartition C conflicts with A (or is incompatible) because none of the four intersections are empty:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AA_1%20%5Ccap%20C_1%20&amp;=%20%20%5C%7B%7Ba,%20b,%20c,%20d,%20e%7D%5C%7D%20%5Ccap%20%5C%7Ba,%20b,%20c,%20d,%20g%5C%7D%20=%20%5C%7Ba,%20b,%20c,%20d%5C%7D%20%20%5C%5C%0AA_1%20%5Ccap%20C_2%20&amp;=%20%20%5C%7B%7Ba,%20b,%20c,%20d,%20e%7D%5C%7D%20%5Ccap%20%5C%7Be,%20f,%20h,%20i,%20j%5C%7D%20=%20%5C%7Be%5C%7D%20%20%5C%5C%0AA_2%20%5Ccap%20C_1%20&amp;=%20%20%5C%7B%7Bf,%20g,%20h,%20i,%20j%7D%5C%7D%20%5Ccap%20%5C%7Ba,%20b,%20c,%20d,%20g%5C%7D%20=%20%5C%7Ba,%20b,%20c,%20d%5C%7D%20%20%5C%5C%20%20%0AA_2%20%5Ccap%20C_2%20&amp;=%20%20%5C%7B%7Bf,%20g,%20h,%20i,%20j%7D%5C%7D%20%5Ccap%20%5C%7Be,%20f,%20h,%20i,%20j%5C%7D%20=%20%5C%7Be%5C%7D%20%20%0A%5Cend%7Baligned%7D%0A"></p>
<p>For a given branch, Internode Certainty (IC) values reflect the degree of conflict between the bipartition defining the branch (say X) and the most frequent conflicting biparition (say Y), which we can get by counting the number of concordant genes or sites for each bipartition. IC is then defined by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AIC%20&amp;=%20log_2(n)%20+%20%5Csum_%7Bn=1%7D%5E2%20P(X_n)log_2%5BP(X_n)%5D%20%5C%5C%0A%20%20%20&amp;=%201%20+%20P(X)log_2%5BP(X)%5D%20+%20P(Y)log_2%5BP(Y)%5D,%0A%5Cend%7Baligned%7D%0A"> where the frequencies of the bipartitons are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AP(X)%20=%20X/(X%20+%20Y),%20%5C%5C%20%20%0AP(Y)%20=%20Y/(X%20+%20Y)%0A%5Cend%7Baligned%7D%0A"> and <img src="https://latex.codecogs.com/png.latex?P(X)%20+%20P(Y)%20=%201."></p>
<p>Therefore, IC values at or close to 1 indicate support for the given branch (i.e., absence of conflict), and IC values at or close to 0 indicate maximum conflict (i.e., equal support for both bipartitions).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># calculate internode certainty</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">IC <span class="ot" style="color: #003B4F;">=</span> <span class="cf" style="color: #003B4F;">function</span>(CF, DF1, DF2, N){</span>
<span id="cb16-4">    </span>
<span id="cb16-5">    <span class="co" style="color: #5E5E5E;"># convert to counts</span></span>
<span id="cb16-6">    X <span class="ot" style="color: #003B4F;">=</span> CF <span class="sc" style="color: #5E5E5E;">*</span> N <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb16-7">    Y <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">max</span>(DF1, DF2) <span class="sc" style="color: #5E5E5E;">*</span> N <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb16-8">        </span>
<span id="cb16-9">    pX <span class="ot" style="color: #003B4F;">=</span> X<span class="sc" style="color: #5E5E5E;">/</span>(X<span class="sc" style="color: #5E5E5E;">+</span>Y)</span>
<span id="cb16-10">    pY <span class="ot" style="color: #003B4F;">=</span> Y<span class="sc" style="color: #5E5E5E;">/</span>(X<span class="sc" style="color: #5E5E5E;">+</span>Y)</span>
<span id="cb16-11">    </span>
<span id="cb16-12">    IC <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">+</span> pX <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">log2</span>(pX) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-13">             pY <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">log2</span>(pY)</span>
<span id="cb16-14"></span>
<span id="cb16-15">    <span class="fu" style="color: #4758AB;">return</span>(IC)</span>
<span id="cb16-16">}</span>
<span id="cb16-17"></span>
<span id="cb16-18"></span>
<span id="cb16-19">e <span class="ot" style="color: #003B4F;">=</span> e <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-20">    <span class="fu" style="color: #4758AB;">group_by</span>(ID) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-21">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">gIC =</span> <span class="fu" style="color: #4758AB;">IC</span>(gCF, gDF1, gDF2, gN)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-22">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">sIC =</span> <span class="fu" style="color: #4758AB;">IC</span>(sCF, sDF1, sDF2, sN))</span>
<span id="cb16-23"></span>
<span id="cb16-24"><span class="co" style="color: #5E5E5E;"># plot it</span></span>
<span id="cb16-25"><span class="fu" style="color: #4758AB;">ggpairs</span>(e, <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"gCF"</span>, <span class="st" style="color: #20794D;">"sCF"</span>, <span class="st" style="color: #20794D;">"bootstrap"</span>, <span class="st" style="color: #20794D;">"gEF_p"</span>, <span class="st" style="color: #20794D;">"sEF_p"</span>, <span class="st" style="color: #20794D;">"gIC"</span>, <span class="st" style="color: #20794D;">"sIC"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-13-iqtree-phylogenetics/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Which nodes have IC near zero?</li>
<li>How does it correspond to gCF, sCF, and bootstrap support?</li>
</ul>
</div>
</div>
<p>See Rob Lanfearʻs blog for detailed explanations of the following calculations <a href="http://www.robertlanfear.com/blog/files/concordance_factors.html" class="uri">http://www.robertlanfear.com/blog/files/concordance_factors.html</a>. This is an excellent example of how to integrate output from other analysis software with R code.</p>
</section>
<section id="iqtree-documentation" class="level1">
<h1>IQTREE documentation</h1>
<ul>
<li><p>[IQTREE quickstart]](http://www.iqtree.org/doc/Quickstart)</p></li>
<li><p>IQTREE documentation <a href="http://www.iqtree.org/doc/" class="uri">http://www.iqtree.org/doc/</a></p></li>
<li><p>Command Line Reference (when you get more familiar with it) <a href="http://www.iqtree.org/doc/Command-Reference" class="uri">http://www.iqtree.org/doc/Command-Reference</a></p></li>
</ul>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Chiari:2012" class="csl-entry">
Chiari, Ylenia, Vincent Cahais, Nicolas Galtier, and Frédéric Delsuc. 2012. <span>“Phylogenomic Analyses Support the Position of Turtles as the Sister Group of Birds and Crocodiles (Archosauria).”</span> <em>BMC Biology</em> 10 (1): 65. <a href="https://doi.org/10.1186/1741-7007-10-65">https://doi.org/10.1186/1741-7007-10-65</a>.
</div>
<div id="ref-Kalyaanamoorthy:2017" class="csl-entry">
Kalyaanamoorthy, Subha, Bui Quang Minh, Thomas K F Wong, Arndt von Haeseler, and Lars S Jermiin. 2017. <span>“ModelFinder: Fast Model Selection for Accurate Phylogenetic Estimates.”</span> <em>Nature Methods</em> 14 (6): 587–89. <a href="https://doi.org/10.1038/nmeth.4285">https://doi.org/10.1038/nmeth.4285</a>.
</div>
<div id="ref-Lanfear:2016" class="csl-entry">
Lanfear, Robert, Paul B. Frandsen, April M. Wright, Tereza Senfeld, and Brett Calcott. 2016. <span>“<span class="nocase">PartitionFinder 2: New Methods for Selecting Partitioned Models of Evolution for Molecular and Morphological Phylogenetic Analyses</span>.”</span> <em>Molecular Biology and Evolution</em> 34 (3): 772–73. <a href="https://doi.org/10.1093/molbev/msw260">https://doi.org/10.1093/molbev/msw260</a>.
</div>
<div id="ref-Minh:2020a" class="csl-entry">
Minh, Bui Quang, Matthew W Hahn, and Robert Lanfear. 2020. <span>“<span class="nocase">New Methods to Calculate Concordance Factors for Phylogenomic Datasets</span>.”</span> <em>Molecular Biology and Evolution</em> 37 (9): 2727–33. <a href="https://doi.org/10.1093/molbev/msaa106">https://doi.org/10.1093/molbev/msaa106</a>.
</div>
<div id="ref-Minh:2020" class="csl-entry">
Minh, Bui Quang, Heiko A Schmidt, Olga Chernomor, Dominik Schrempf, Michael D Woodhams, Arndt von Haeseler, and Robert Lanfear. 2020. <span>“<span class="nocase">IQ-TREE 2: New Models and Efficient Methods for Phylogenetic Inference in the Genomic Era</span>.”</span> <em>Molecular Biology and Evolution</em> 37 (5): 1530–34. <a href="https://doi.org/10.1093/molbev/msaa015">https://doi.org/10.1093/molbev/msaa015</a>.
</div>
<div id="ref-Pollard:2006" class="csl-entry">
Pollard, Daniel A, Venky N Iyer, Alan M Moses, and Michael B Eisen. 2006. <span>“Widespread Discordance of Gene Trees with Species Tree in Drosophila: Evidence for Incomplete Lineage Sorting.”</span> Doi:10.1371/journal.pgen.0020173. <em>PLOS Genetics</em> 2 (10): e173–. <a href="https://doi.org/10.1371/journal.pgen.0020173">https://doi.org/10.1371/journal.pgen.0020173</a>.
</div>
<div id="ref-Salichos:2014" class="csl-entry">
Salichos, Leonidas, Alexandros Stamatakis, and Antonis Rokas. 2014. <span>“<span class="nocase">Novel Information Theory-Based Measures for Quantifying Incongruence among Phylogenetic Trees</span>.”</span> <em>Molecular Biology and Evolution</em> 31 (5): 1261–71. <a href="https://doi.org/10.1093/molbev/msu061">https://doi.org/10.1093/molbev/msu061</a>.
</div>
</div></section></div> ]]></description>
  <category>module 7</category>
  <category>week 13</category>
  <category>iqtree2</category>
  <category>phylogenetic inference</category>
  <category>command line</category>
  <category>gene concordance</category>
  <category>site concordance</category>
  <category>gene tree</category>
  <category>species tree</category>
  <guid>https://mbutler808.github.io/posts/2023-04-13-iqtree-phylogenetics/index.html</guid>
  <pubDate>Thu, 13 Apr 2023 10:00:00 GMT</pubDate>
  <media:content url="https://mbutler808.github.io/images/Site_pattern_frequencies_models.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Procrustes Superimposition and Analyses</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>References for this Material:</p>
<ul>
<li>The authors of the <code>geomorph</code> package for developing many useful vignettes (Antigoni Kaliontzopoulou) and sample datasets which is drawn upon below</li>
<li>Bardua et al (2019) A Practical Guide to Sliding and Surface Semilandmarks in Morphometric Analyses<a href="https://academic.oup.com/iob/article/1/1/obz016/5526881" class="uri">https://academic.oup.com/iob/article/1/1/obz016/5526881</a></li>
<li><a href="https://www.researchgate.net/profile/Alexandre-Palaoro/post/Geomorph-Package-in-R/attachment/5cffb777cfe4a7968da98557/AS%3A768610867900420%401560262519604/download/Quick_Guide_to_Geomorph-3.0.pdf">Emma Sherratʻs quick guide to Geomorph</a></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to create shape data from geometric morphometric data</li>
<li>Understand the general concepts for Procrustes superimposition</li>
<li>Be able to perform basic analyses on geometric morphometric data</li>
</ul>
</div>
</div>
</section>
<section id="the-goals-of-geometric-morphometrics" class="level1">
<h1>The goals of Geometric Morphometrics</h1>
<p>From <span class="citation" data-cites="MacLeod:2010">(MacLeod 2010)</span>:</p>
<blockquote class="blockquote">
<p><strong>The ultimate goals for any geometric morphometric analysis</strong> - to define a mathematical space in which we can compare sets of landmark configurations that (1) ordinates shapes on the basis of their similarity, (2) treats these configurations as a <strong>whole entity</strong> rather than an accumulation of <em>independent parts</em>, (3) respects the conventions of the Kendall shape space, (4) supports shape modelling, and (5) is stable in the face of minor changes to the sample and/or reference shape.</p>
</blockquote>
<p>What is a Kendall shape space, you ask? A shape space or coordinate system is used to describes shapes, and importantly, be used to understand differences between shapes. Kendallʻs shape space describes curves and local approxmation to curves using tangents <span class="citation" data-cites="Kendall:1984">Klingenberg (2020)</span>. For this lesson just remember that shapes are connected by geometries, which we can describe mathematically. This makes it much easier to compare the major differences between multidimensional shapes.</p>
</section>
<section id="size-adjustment-with-procrustes-superimposition" class="level1">
<h1>Size Adjustment with Procrustes Superimposition</h1>
<p>Procrustes superimposition is the most widely used method to create size and shape variables from landmark data. The basic idea is that larger objects should have landmarks that are farther apart than the same landmarks in smaller objects.</p>
<section id="centroid" class="level3">
<h3 class="anchored" data-anchor-id="centroid">Centroid</h3>
<p>A key concept is the <strong>centroid</strong>, which the center point of all of the landmarks. It is easily calculated for each specimen by taking the average of all of the landmark coordinates along each axis. For <em>p</em> landmarks in two dimensions the coordinates of the centroid would be:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC_%7Bx%7D%20=%20%5Cfrac%7BX_1+X_2+X_3+%20...%20+%20X_p%7D%7Bp%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0AC_%7By%7D%20=%20%5Cfrac%7BY_1+Y_2+Y_3%20...%20+%20Y_p%7D%7Bp%7D%0A"></p>
</section>
<section id="centroid-size" class="level3">
<h3 class="anchored" data-anchor-id="centroid-size">Centroid size</h3>
<p>The concept of <strong>centroid size</strong> describes geometric size. It is calculated from the distances of each landmark from the centroid, but it is a geometric mean because it is caculated by taking the square-root of the sums of squared distances of each landmark from the centroid.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/Triangle.Centroid.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The centroid of a triangle (with landmarks at the vertices) is the point in the center.</figcaption><p></p>
</figure>
</div>
<p>[Source: Wikipedia]</p>
</section>
<section id="shape-variables" class="level3">
<h3 class="anchored" data-anchor-id="shape-variables">Shape Variables</h3>
<p>Shape variables calculated from Procrustes superimposition mathematically separate scale (size) from shape by applying shape-preserving transformations to make the landmarks as similar as possible.</p>
<p>The concept: In order to compare differences in shape, we can remove size (in other words, normalize by size or bring all of the specimens to the same size) with the following transformations:</p>
<ul>
<li><strong>Scale</strong>: Bring each set of landmarks to the same size by magnifing or reducing the distances of the landmarks around their centroid.<br>
</li>
<li><strong>Translate</strong>: Shift the landmarks in the coordinate space to place the centroids at a common point.<br>
</li>
<li><strong>Rotate</strong>: Rotate the landmarks with an angular transformation to bring them into a common orientation.</li>
</ul>
<p>At the end of Procrustes superimposition, the landmarks for the different specimens will be scaled to the same size and their coordinates will lie as close together as possible while preserving the differences in shape. The figure below illustrates these steps.</p>
<p>The mathematics of these transofrmations come from basic linear algebra operations on matrices, which are beyond the scope of the class, but to understand what is happening we can analogize it to univariate arithmetic.</p>
<p><em>Scaling</em> is like dividing each variable by a size variable to put all of the individuals on the same baseline with regard to size (magnitude).</p>
<p><em>Translation</em> brings the centers of all of the landmarks into alignment. Think of a situation where we measured the length of specimens according to wherever they fell within the picture frame, for example if one specimen started at 2 and extended to 10, and another started at 6 and extended to 12. We could translate (or slide) each of these to place their midpoint at zero by subtracting the mean value from each of their endpoints. For the first specimen, we would subtract 6, translating the specimen from (2,10) to (-4,4), and for the second we would subtract 9, tanslating the specimen from (6,12) to (-3,3).</p>
<p><em>Rotation</em> is an angular rotation to bring a 2 or 3D object into a common orientation. For a more thorough discussion please see <span class="citation" data-cites="Zelditch:2012">(Zelditch, Swiderski, and Sheets 2012)</span>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/Procrustes_superimposition.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure: Procrustes superimposition. The figure shows the three transformation steps of an ordinary Procrustes fit for two configurations of landmarks. (a) Scaling of both configurations to the same size; (b) Translation to the same position of the center of gravity; (c) Rotation to the orientation that provides the minimum sum of squared distances between corresponding landmarks.</figcaption><p></p>
</figure>
</div>
<p><a href="https://commons.wikimedia.org/wiki/File:Procrustes_superimposition.png">Source: Christian Klingenberg</a></p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
From the documentation for <code>gpagen()</code> in <code>geomorph</code>:
</div>
</div>
<div class="callout-body-container callout-body">
<p>GPA translates all specimens to the origin, scales them to unit-centroid size, and optimally rotates them (using a least-squares criterion) until the coordinates of corresponding points align as closely as possible. The resulting aligned Procrustes coordinates represent the shape of each specimen, and are found in a curved space related to Kendall’s shape space (Kendall 1984). Typically, these are projected into a linear tangent space yielding Kendall’s tangent space coordinates (i.e., Procrustes shape variables), which are used for subsequent multivariate analyses (Dryden and Mardia 1993, Rohlf 1999).</p>
</div>
</div>
</section>
</section>
<section id="geomorph-package" class="level1">
<h1>Geomorph Package</h1>
<section id="data-structures" class="level3">
<h3 class="anchored" data-anchor-id="data-structures">Data Structures</h3>
<p>The package <code>geomorph</code> is written to work with standard geomorphic morphometrics data file types such as TPS and NTS, as well as others <span class="citation" data-cites="Adams:2022">Baken et al. (2021)</span>.</p>
<p><code>readland.tps()</code> reads morphometric data in TPS format. It returns an array for storing landmark data: <em>p</em> landmarks X <em>k</em> dimensions X <em>N</em> specimens</p>
<p>The third dimension of this array contains names for each specimen, which are obtained from the image names in the <em>.tps</em> file.</p>
</section>
<section id="built-in-example" class="level3">
<h3 class="anchored" data-anchor-id="built-in-example">Built-in Example</h3>
<p>Letʻs look again at the built-in dataset <code>plethodon</code> that comes with <code>geomorph</code>. It has skull landmark data for 40 specimens of two species of plethdon salamanders <span class="citation" data-cites="Adams:2004">(Dean C. Adams 2004)</span>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/plethodonjordani.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>Plethodon jordani</em>, Photo by Kevin Stohlgren</figcaption><p></p>
</figure>
</div>
<p><a href="https://herpsofnc.org/jordans-salamander/">Source: Ambibians and Reptiles of North Carolina website</a></p>
<p>The dataset <code>plethodon</code> is a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">require</span>(geomorph)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: geomorph</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: RRPP</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: rgl</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: Matrix</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">data</span>(plethodon) </span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">class</span>(plethodon)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">attributes</span>(plethodon)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$names
[1] "land"    "links"   "species" "site"    "outline"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">table</span>(plethodon<span class="sc" style="color: #5E5E5E;">$</span>species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Jord Teyah 
   20    20 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">dim</span>(plethodon<span class="sc" style="color: #5E5E5E;">$</span>land)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 12  2 40</code></pre>
</div>
</div>
<p>The landmarks are in <code>plethodon$land</code>. There are twenty of each species, and from the dimensions of <code>plethodon$land</code> we see that each of the 40 specimens has 12 landmarks in two dimensions.</p>
<p><code>plotAllSpecimens</code> plots the coordinates of all samples, so we can start to look at variation.</p>
<section id="shape-general-procrustes-analysis" class="level4">
<h4 class="anchored" data-anchor-id="shape-general-procrustes-analysis">Shape: General Procrustes Analysis</h4>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">#|warning: false</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">plotAllSpecimens</span>(plethodon<span class="sc" style="color: #5E5E5E;">$</span>land)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">Y.gpa <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gpagen</span>(plethodon<span class="sc" style="color: #5E5E5E;">$</span>land, <span class="at" style="color: #657422;">PrinAxes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Performing GPA

  |                                                                            
  |                                                                      |   0%
  |                                                                            
  |==================                                                    |  25%
  |                                                                            
  |===================================                                   |  50%
  |                                                                            
  |======================================================================| 100%

Making projections... Finished!</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">summary</span>(Y.gpa)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
gpagen(A = plethodon$land, PrinAxes = FALSE) 



Generalized Procrustes Analysis
with Partial Procrustes Superimposition

12 fixed landmarks
0 semilandmarks (sliders)
2-dimensional landmarks
2 GPA iterations to converge


Consensus (mean) Configuration

             X            Y
1   0.15263287 -0.023350400
2   0.19445064 -0.092643121
3  -0.03361223 -0.007346212
4  -0.28069721 -0.092850147
5  -0.30998751 -0.061672264
6  -0.32557841 -0.036112255
7  -0.31804390  0.036125318
8  -0.18947114  0.098010902
9   0.02036829  0.099112877
10  0.18852641  0.077278061
11  0.35134314  0.065866346
12  0.55006905 -0.062419105</code></pre>
</div>
</div>
<p>The summary provides the mean for each of the coordinates after GPA. We can see the mean of the coordinates among the individual coordinates by plotting:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">plot</span>(Y.gpa)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Letʻs compare the plot of all specimens before and after Generalized Procrustes Analysis. The below plot is before GPA, on the raw landmarks <code>plethodon$land</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">plotAllSpecimens</span>(plethodon<span class="sc" style="color: #5E5E5E;">$</span>land)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Plotting again after alignment with Generalized Procrustes Analysis gives a good representation of shape variation. Plotting links between the landmarks helps with visualization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">plotAllSpecimens</span>(Y.gpa<span class="sc" style="color: #5E5E5E;">$</span>coords,<span class="at" style="color: #657422;">links=</span>plethodon<span class="sc" style="color: #5E5E5E;">$</span>links)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="principal-components-analysis" class="level4">
<h4 class="anchored" data-anchor-id="principal-components-analysis">Principal Components Analysis</h4>
<p>PCA on the procrustes coordinates (size-adjusted or shape variables) can be done with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">pleth.pca <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gm.prcomp</span>(Y.gpa<span class="sc" style="color: #5E5E5E;">$</span>coords)</span>
<span id="cb22-2">pleth.pca </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Ordination type: Principal Component Analysis 
Centering by OLS mean
Orthogonal projection of OLS residuals
Number of observations: 40 
Number of vectors 20 

Importance of Components:
                             Comp1       Comp2        Comp3        Comp4
Eigenvalues            0.001855441 0.001566597 0.0004141056 0.0002278444
Proportion of Variance 0.367433295 0.310233333 0.0820053761 0.0451200584
Cumulative Proportion  0.367433295 0.677666628 0.7596720044 0.8047920628
                              Comp5        Comp6        Comp7        Comp8
Eigenvalues            0.0001725997 0.0001672575 0.0001549008 0.0001251132
Proportion of Variance 0.0341799312 0.0331220169 0.0306750315 0.0247761773
Cumulative Proportion  0.8389719940 0.8720940109 0.9027690424 0.9275452197
                              Comp9       Comp10       Comp11       Comp12
Eigenvalues            8.468503e-05 6.869926e-05 5.430853e-05 4.423148e-05
Proportion of Variance 1.677019e-02 1.360452e-02 1.075473e-02 8.759165e-03
Cumulative Proportion  9.443154e-01 9.579199e-01 9.686747e-01 9.774338e-01
                             Comp13       Comp14       Comp15       Comp16
Eigenvalues            0.0000261742 0.0000192644 1.741769e-05 1.715141e-05
Proportion of Variance 0.0051832795 0.0038149309 3.449226e-03 3.396495e-03
Cumulative Proportion  0.9826170994 0.9864320303 9.898813e-01 9.932778e-01
                             Comp17       Comp18       Comp19       Comp20
Eigenvalues            1.555244e-05 9.253679e-06 5.336746e-06 3.802714e-06
Proportion of Variance 3.079853e-03 1.832507e-03 1.056837e-03 7.530520e-04
Cumulative Proportion  9.963576e-01 9.981901e-01 9.992469e-01 1.000000e+00</code></pre>
</div>
</div>
<p>There are 20 PC axes, with 67% of the total shape variation in the first two axes. A plot on PC1 vs PC2 reveals several distinct clusters, suggesting shape differences. The scores are in <code>pleth.pca$x</code>. There is a plot method for geomorph pca results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">pleth.pca.plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plot</span>(pleth.pca)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The specimens are from two species in two distinct environments, and there seems to be some separation between the points along PC1 vs.&nbsp;PC2. These points correspond to specimens of two different species in the original TPS data that information is in <code>plethodon$species</code>. Because the species names are a factor, we can use this to do a quick and dirty plot colored by species. We can plot additional PC axes by specifying the axes to plot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">class</span>(plethodon<span class="sc" style="color: #5E5E5E;">$</span>species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "factor"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>)) <span class="co" style="color: #5E5E5E;"># set up 2x2 plots</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;">plot</span>(pleth.pca, <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"PCA"</span>, </span>
<span id="cb27-3">      <span class="at" style="color: #657422;">col=</span>plethodon<span class="sc" style="color: #5E5E5E;">$</span>species <span class="co" style="color: #5E5E5E;"># color points by species</span></span>
<span id="cb27-4">    )</span>
<span id="cb27-5"><span class="fu" style="color: #4758AB;">plot</span>(pleth.pca, <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"PCA"</span>, </span>
<span id="cb27-6">      <span class="at" style="color: #657422;">axis1 =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">axis2 =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="co" style="color: #5E5E5E;"># plot PC axes 1 vs 3</span></span>
<span id="cb27-7">      <span class="at" style="color: #657422;">col=</span>plethodon<span class="sc" style="color: #5E5E5E;">$</span>species </span>
<span id="cb27-8">    )</span>
<span id="cb27-9"><span class="fu" style="color: #4758AB;">plot</span>(pleth.pca, <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"PCA"</span>, </span>
<span id="cb27-10">      <span class="at" style="color: #657422;">axis1 =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">axis2 =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="co" style="color: #5E5E5E;"># PC 2 vs PC3</span></span>
<span id="cb27-11">      <span class="at" style="color: #657422;">col=</span>plethodon<span class="sc" style="color: #5E5E5E;">$</span>species</span>
<span id="cb27-12">    ) </span>
<span id="cb27-13"><span class="fu" style="color: #4758AB;">plot</span>(pleth.pca, <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"PCA"</span>, </span>
<span id="cb27-14">      <span class="at" style="color: #657422;">axis1 =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">axis2 =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="co" style="color: #5E5E5E;"># PC3 vs PC4</span></span>
<span id="cb27-15">      <span class="at" style="color: #657422;">col=</span>plethodon<span class="sc" style="color: #5E5E5E;">$</span>species</span>
<span id="cb27-16">    ) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>All of the separation between species comes from PC1 vs.&nbsp;2, with no additional separation by adding PC3 or PC4.</p>
</section>
<section id="statistical-test-for-differences-among-species-and-sites" class="level4">
<h4 class="anchored" data-anchor-id="statistical-test-for-differences-among-species-and-sites">Statistical test for differences among species and sites</h4>
<p>We can test the shape variables (GPA coordinates) as explanatory variables for phenotypic varation. Because there are multiple pheontypic (Y) variables, we use MANOVA (multivariate ANOVA).</p>
<p><code>geomorph</code> has custom linear model functions that use <strong>randomized residuals</strong> (permutation test) to assess linear model fits on the high-dimensional geomorphic morphometric data <span class="citation" data-cites="Collyer:2018">Collyer and Adams (2021)</span> (rather than assume the data come from a multivariate normal distribution).</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 80%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>procD.lm</code></td>
<td>Procrustes ANOVA/regression for Procrustes shape variables</td>
</tr>
<tr class="even">
<td><code>procD.pgls</code></td>
<td>Phylogenetic version of <code>procD.lm</code></td>
</tr>
</tbody>
</table>
<p><code>geomorph</code> has a helper function <code>geomorph.data.frame</code> that creates an object of class <code>geomorph.data.frame</code> from your procrustes shape coordinates that includes the centroid size (<code>Csize</code>), and allows you to associate your metadata such as species and site together with the shape data. The idea is keep it organized in a data-frame like manner, even though it is a list (it makes sure that all the elements have the same length).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">gdf <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">geomorph.data.frame</span>(Y.gpa<span class="sc" style="color: #5E5E5E;">$</span>coords)</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;">attributes</span>(gdf) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$class
[1] "geomorph.data.frame"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">gdf <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">geomorph.data.frame</span>(Y.gpa, </span>
<span id="cb30-2">              <span class="at" style="color: #657422;">species =</span> plethodon<span class="sc" style="color: #5E5E5E;">$</span>species, </span>
<span id="cb30-3">              <span class="at" style="color: #657422;">site =</span> plethodon<span class="sc" style="color: #5E5E5E;">$</span>site</span>
<span id="cb30-4">              )</span>
<span id="cb30-5"><span class="fu" style="color: #4758AB;">attributes</span>(gdf) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$names
[1] "coords"  "Csize"   "species" "site"   

$class
[1] "geomorph.data.frame"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">lm.fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">procD.lm</span>(coords<span class="sc" style="color: #5E5E5E;">~</span>species <span class="sc" style="color: #5E5E5E;">*</span> site, <span class="at" style="color: #657422;">data=</span>gdf)</span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;">summary</span>(lm.fit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Analysis of Variance, using Residual Randomization
Permutation procedure: Randomization of null model residuals 
Number of permutations: 1000 
Estimation method: Ordinary Least Squares 
Sums of Squares and Cross-products: Type I 
Effect sizes (Z) based on F distributions

             Df       SS       MS     Rsq      F      Z Pr(&gt;F)   
species       1 0.029258 0.029258 0.14856 14.544 4.2241  0.001 **
site          1 0.064375 0.064375 0.32688 32.000 5.2101  0.001 **
species:site  1 0.030885 0.030885 0.15682 15.352 5.4075  0.001 **
Residuals    36 0.072422 0.002012 0.36774                        
Total        39 0.196940                                         
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Call: procD.lm(f1 = coords ~ species * site, data = gdf)</code></pre>
</div>
</div>
<p>The MANOVA reveals significant shape differences between species, between sites, and in the interaction between the two factors (species and site).</p>
<p>We can also look at variation with centroid size:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">anova</span>(<span class="fu" style="color: #4758AB;">procD.lm</span>(coords <span class="sc" style="color: #5E5E5E;">~</span> Csize <span class="sc" style="color: #5E5E5E;">+</span> species <span class="sc" style="color: #5E5E5E;">*</span> site, <span class="at" style="color: #657422;">data =</span> gdf))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Analysis of Variance, using Residual Randomization
Permutation procedure: Randomization of null model residuals 
Number of permutations: 1000 
Estimation method: Ordinary Least Squares 
Sums of Squares and Cross-products: Type I 
Effect sizes (Z) based on F distributions

             Df       SS       MS     Rsq       F      Z Pr(&gt;F)   
Csize         1 0.010409 0.010409 0.05286  5.2986 2.8820  0.001 **
species       1 0.025661 0.025661 0.13030 13.0625 4.0712  0.001 **
site          1 0.063018 0.063018 0.31999 32.0780 5.3722  0.001 **
species:site  1 0.029093 0.029093 0.14773 14.8093 5.2418  0.001 **
Residuals    35 0.068758 0.001965 0.34913                         
Total        39 0.196940                                          
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Call: procD.lm(f1 = coords ~ Csize + species * site, data = gdf)</code></pre>
</div>
</div>
<p>There is signficant multivariate difference among the shape data by size as well as by species and site. This is a good place to note that while size and shape are <em>mathematically</em> uncorrelated by GPA, there could still be some <em>biological</em> variation that produces some pattern of shape variation with size.</p>
</section>
<section id="relative-warps" class="level4">
<h4 class="anchored" data-anchor-id="relative-warps">Relative Warps</h4>
<p>We can look at the relative shape change between the specimens. This is a common technique you will see in the literature using <em>relative warps analysis</em>. It uses a shape analysis technique called <strong>thin plate splines</strong> which is a smoothing method that is forced to go through the landmarks, but will fit a surface between them (in as many diemsions as there are in the data).</p>
<p><strong>Relative warps analysis</strong> will show the shape deformation needed to move from a reference shape to a another shape.</p>
<p>First we calcuate the mean shape in all of the data as the reference shape.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">ref<span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">mshape</span>(gdf<span class="sc" style="color: #5E5E5E;">$</span>coords)</span></code></pre></div>
</div>
<p>Calculate the mean shape of <em>Plethodon jordanii</em>, and we can compare this species to the mean of both species:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">gp1.mn<span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">mshape</span>(gdf<span class="sc" style="color: #5E5E5E;">$</span>coords[,,gdf<span class="sc" style="color: #5E5E5E;">$</span>species<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"Jord"</span>])</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;">plotRefToTarget</span>(ref,gp1.mn,<span class="at" style="color: #657422;">mag=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">links=</span>plethodon<span class="sc" style="color: #5E5E5E;">$</span>links)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">plotAllSpecimens</span>(gdf<span class="sc" style="color: #5E5E5E;">$</span>coords,<span class="at" style="color: #657422;">links=</span>plethodon<span class="sc" style="color: #5E5E5E;">$</span>links)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index_files/figure-html/unnamed-chunk-13-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can see that most of the shape change between <em>P. jordanii</em> and the mean shape is around the jaw hinge (points 1,2) and top of the skull (post cranial, points 11,12). Compare to the sketch of the landmark coordinates.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/plethodonlandmarks.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Skull landmarks from <span class="citation" data-cites="Adams:2004">Dean C. Adams (2004)</span></figcaption><p></p>
</figure>
</div>
<p>Can you do the same but comparing the mean of the two species against each other?</p>
</section>
</section>
</section>
<section id="more-geomorphic-morphometrics-software" class="level1">
<h1>More geomorphic morphometrics software</h1>
<p><a href="https://academic.oup.com/view-large/223239151" class="uri">https://academic.oup.com/view-large/223239151</a></p>
</section>
<section id="more-reading" class="level1">
<h1>More reading</h1>
<ul>
<li><p><span class="citation" data-cites="Bookstein:1992">(Bookstein 1992)</span> Morphometric Tools for Landmark Data: Geometry and Biology</p></li>
<li><p><span class="citation" data-cites="Webster:2010">(Webster and Sheets 2010)</span> A Practical Introduction to Landmark-Based Geometric Morphometrics</p></li>
<li><p><span class="citation" data-cites="Bardua:2019">(Bardua et al. 2019)</span> A Practical Guide to Sliding and Surface Semilandmarks in Morphometric Analyses</p></li>
<li><p><span class="citation" data-cites="Savriama:2018">(Savriama 2018)</span> A Step-by-Step Guide for Geometric Morphometrics of Floral Symmetry</p></li>
<li><p><span class="citation" data-cites="Zelditch:2012">(Zelditch, Swiderski, and Sheets 2012)</span> Geometric morphometrics for biologists a primer (the green book)</p></li>
</ul>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Adams:2022" class="csl-entry">
Adams, D. C., M. L. Collyer, A. Kaliontzopoulou, and E. K. Baken. 2022. <span>“Geomorph: Software for Geometric Morphometric Analyses. R Package Version 4.0.4.”</span> <a href="https://cran.r-project.org/package=geomorph">https://cran.r-project.org/package=geomorph</a>.
</div>
<div id="ref-Adams:2004" class="csl-entry">
Adams, Dean C. 2004. <span>“Character Displacement via Aggressive Interference in Appalachian Salamanders.”</span> <em>Ecology</em> 85 (10): 2664–70. <a href="http://www.jstor.org/stable/3450422">http://www.jstor.org/stable/3450422</a>.
</div>
<div id="ref-Baken:2021" class="csl-entry">
Baken, E. K., M. L. Collyer, A. Kaliontzopoulou, and D. C. Adams. 2021. <span>“Geomorphic V4.0 and gmShiny: Enhanced Analytics and a New Graphical Interface for a Comprehensive Morphometric Experience.”</span> <em>Methods in Ecology and Evolution</em>.
</div>
<div id="ref-Bardua:2019" class="csl-entry">
Bardua, C, R N Felice, A Watanabe, A -C Fabre, and A Goswami. 2019. <span>“<span class="nocase">A Practical Guide to Sliding and Surface Semilandmarks in Morphometric Analyses</span>.”</span> <em>Integrative Organismal Biology</em> 1 (1). <a href="https://doi.org/10.1093/iob/obz016">https://doi.org/10.1093/iob/obz016</a>.
</div>
<div id="ref-Bookstein:1992" class="csl-entry">
Bookstein, Fred L. 1992. <em>Morphometric Tools for Landmark Data: Geometry and Biology</em>. Cambridge: Cambridge University Press. <a href="https://doi.org/DOI: 10.1017/CBO9780511573064">https://doi.org/DOI: 10.1017/CBO9780511573064</a>.
</div>
<div id="ref-Collyer:2018" class="csl-entry">
Collyer, M. L., and D. C. Adams. 2018. <span>“<span>RRPP</span>: An r Package for Fitting Linear Models to High‐dimensional Data Using Residual Randomization.”</span> <em>Methods in Ecology and Evolution</em>.
</div>
<div id="ref-Collyer:2021" class="csl-entry">
———. 2021. <span>“<span>RRPP</span>: Linear Model Evaluation with Randomized Residuals in a Permutation Procedure, r Package Version 1.1.2.”</span> <a href="https://cran.r-project.org/package=RRPP">https://cran.r-project.org/package=RRPP</a>.
</div>
<div id="ref-Kendall:1984" class="csl-entry">
Kendall, David G. 1984. <span>“<span class="nocase">Shape Manifolds, Procrustean Metrics, and Complex Projective Spaces</span>.”</span> <em>Bulletin of the London Mathematical Society</em> 16 (2): 81–121. <a href="https://doi.org/10.1112/blms/16.2.81">https://doi.org/10.1112/blms/16.2.81</a>.
</div>
<div id="ref-Klingenberg:2020" class="csl-entry">
Klingenberg, Christian Peter. 2020. <span>“Walking on Kendall’s Shape Space: Understanding Shape Spaces and Their Coordinate Systems.”</span> <em>Evolutionary Biology</em> 47 (4): 334–52. <a href="https://doi.org/10.1007/s11692-020-09513-x">https://doi.org/10.1007/s11692-020-09513-x</a>.
</div>
<div id="ref-MacLeod:2010" class="csl-entry">
MacLeod, Norm. 2010. <span>“PalaeoMath: Part 21 - Principal Warps, Relative Warps, and Procrustes PCA.”</span> Newsletter 75. <em>PaleoMath 101</em>. The Paleontological Association.
</div>
<div id="ref-Savriama:2018" class="csl-entry">
Savriama, Yoland. 2018. <span>“A Step-by-Step Guide for Geometric Morphometrics of Floral Symmetry.”</span> <em>Frontiers in Plant Science</em> 9. <a href="https://doi.org/10.3389/fpls.2018.01433">https://doi.org/10.3389/fpls.2018.01433</a>.
</div>
<div id="ref-Webster:2010" class="csl-entry">
Webster, Mark, and H. David Sheets. 2010. <span>“A Practical Introduction to Landmark-Based Geometric Morphometrics.”</span> <em>The Paleontological Society Papers</em> 16: 163–88. <a href="https://doi.org/DOI: 10.1017/S1089332600001868">https://doi.org/DOI: 10.1017/S1089332600001868</a>.
</div>
<div id="ref-Zelditch:2012" class="csl-entry">
Zelditch, Miriam Leah, Donald L. Swiderski, and H. David Sheets. 2012. <em>Geometric Morphometrics for Biologists a Primer</em>. Amsterdam ; Elsevier Academic Press.
</div>
</div></section></div> ]]></description>
  <category>module 6</category>
  <category>week 13</category>
  <category>geometric morphometrics</category>
  <category>GPA</category>
  <category>procrustes superimposition</category>
  <category>size</category>
  <category>shape</category>
  <guid>https://mbutler808.github.io/posts/2023-04-11-geometric-morphometrics-analyses/index.html</guid>
  <pubDate>Tue, 11 Apr 2023 10:00:00 GMT</pubDate>
  <media:content url="https://mbutler808.github.io/images/Triangle.Centroid.png" medium="image" type="image/png" height="116" width="144"/>
</item>
<item>
  <title>Morphometrics Overview</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-04-morphometric-workflow/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://digitalcommons.pace.edu/cgi/viewcontent.cgi?article=1003&amp;context=oer" class="uri">https://digitalcommons.pace.edu/cgi/viewcontent.cgi?article=1003&amp;context=oer</a></li>
<li><a href="https://www.researchgate.net/profile/Alexandre-Palaoro/post/Geomorph-Package-in-R/attachment/5cffb777cfe4a7968da98557/AS%3A768610867900420%401560262519604/download/Quick_Guide_to_Geomorph-3.0.pdf">Emma Sherratʻs quick guide to Geomorph</a></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand the overview of a morphometrics analysis</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
</section>
<section id="morphometric-workflow" class="level1">
<h1>Morphometric Workflow</h1>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Typical Morphometric Worflow
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Ask interesting question, develop hypotheses, collect specimens</li>
<li>Take photos/images of the specimens</li>
<li>Place landmarks on the specimens in the photos at key locations. Choose landmarks that are:</li>
<li>Present on all specimens</li>
<li>Relevant to question</li>
<li>Clearly defined</li>
<li>Analyze how the landmarks vary in relation to each other among specimens</li>
<li>Perform statistical analyses to test for significant differences in body shape among populations, species, or whatever aspect that is relevant to your hypotheses</li>
<li>Plot components of variation in shape that are not correlated with each other (i.e.&nbsp;the principal component scores).</li>
</ul>
</div>
</div>
</section>
<section id="types-of-questions-that-morphometrics-can-answer-not-exhaustive" class="level1">
<h1>Types of Questions that Morphometrics can Answer (not exhaustive)</h1>
<ol type="1">
<li>Relationship of parts to other parts.</li>
<li>Allometry - relationship of shape to size</li>
<li>Comparison among groups</li>
<li>Covariation of shape with other factors</li>
<li>Covariation of morphology with phylogeny</li>
<li>Morpholgical integration</li>
<li>Modularity</li>
</ol>


</section>

 ]]></description>
  <category>module 6</category>
  <category>week 12</category>
  <category>control structures</category>
  <category>if else</category>
  <category>(do) while</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2023-04-04-morphometric-workflow/index.html</guid>
  <pubDate>Tue, 04 Apr 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Intro to Geometric Morphometrics</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-04-morphometrics-landmarks/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>References for this Material:</p>
<ul>
<li>Bardua et al (2019) A Practical Guide to Sliding and Surface Semilandmarks in Morphometric Analyses<a href="https://academic.oup.com/iob/article/1/1/obz016/5526881" class="uri">https://academic.oup.com/iob/article/1/1/obz016/5526881</a></li>
<li><a href="https://www.researchgate.net/profile/Alexandre-Palaoro/post/Geomorph-Package-in-R/attachment/5cffb777cfe4a7968da98557/AS%3A768610867900420%401560262519604/download/Quick_Guide_to_Geomorph-3.0.pdf">Emma Sherratʻs quick guide to Geomorph</a></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to collect landmark data</li>
<li>Understand the terminology for landmark data</li>
</ul>
</div>
</div>
<section id="preparation" class="level3">
<h3 class="anchored" data-anchor-id="preparation">Preparation</h3>
<p>Packages:<br>
<strong>geomorph</strong><br>
<strong>rgl</strong><br>
<strong>Matrix</strong><br>
Please install if you donʻt have them. <code>install.packages(c("geomorph","rgl","Matrix"), dependencies=T)</code></p>
<p>Mac Users: Please also install Xquartz <a href="https://www.xquartz.org" class="uri">https://www.xquartz.org</a>, a windowing system for <code>rgl</code>.</p>
<p>Files:<br>
<code>red-fox-mandible-lateral.jpg</code> Please <a href="../../images/red-fox-mandible-lateral.jpg">download</a> into your folder for this exercise. <a href="https://russellboneatlas.wordpress.com/home/red-fox-bone-atlas/red-fox-mandible/">Source: Jim Russell</a></p>
</section>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p><strong>Traditional morphometrics</strong> uses linear measurements such as body length, hind limb length, etc. to characterize morphological variation. This works well for many questions, especially ones that relate to lever mechanics, such as locomotion or bite force, etc. but does not capture 3D variation well such as the geometric shape of a skull or the details of seed shape.</p>
<p><strong>Geometric morphometrics</strong> aims to characterize more complex shapes by the use of <strong>landmarks</strong>, locations on the specimens determined by the researcher to reveal key insights or capture the full range of variation.</p>
<p>In order to do this, we still need methods to characterize <strong>size</strong> vs.&nbsp;<strong>shape</strong>. For geometric morphometrics that is typically <strong>Procrustes superposition</strong>. Some other differences also involve the data. Whereas one can typically take linear measurements directly on the specimen (with calipers or a ruler), collecting landmark data usually involves some image capture.</p>
</section>
<section id="capturing-images" class="level1">
<h1>Capturing images</h1>
<p>The most important thing is consistency and a protocol that minimizes error. While the specific protocol will vary by the type of object and technology (cameras, uCT, etc.), some general principles are :</p>
<ul>
<li>Specimen Layout
<ul>
<li>Be as <strong>consistent</strong> as possible in the preparation of specimens and their arrangement</li>
<li>Place every specimen on the same side. (Capture the same aspect of each specimen)</li>
<li>Same pose or posture</li>
<li>Mouths open? Closed?</li>
<li>Fins or dewlaps exposed to show shape and articulatio, etc.</li>
</ul></li>
<li>Size and Metadata
<ul>
<li>Include a size standard (e.g., a ruler), ideally the same item, with X-Y information</li>
<li>Include the specimen ID in the photo itself (written on a card, etc.)</li>
</ul></li>
<li>Camera
<ul>
<li>Camera in same position and same angle, preferably with a tripod</li>
<li>Use the same camera and lens (or zoom, etc.)</li>
<li>Make several backups (multiple flash cards, save to computer, etc.)</li>
<li>Specimen perpendicular to camera (check level)</li>
<li>Same lighting</li>
<li>Take several photos as backup</li>
</ul></li>
<li>Data Management
<ul>
<li>Keep a notebook (written log) of the specimens being photographed, in order</li>
<li>Transfer files to raw data folder for photos (in same format and same order)</li>
<li>Name files with metadata in filenames for each specimen, save in another folder</li>
<li>You should have Raw_Photos, Named_Photos folders.</li>
</ul></li>
</ul>
<p>Errors and distortions can be fixed with software, but it is much easier to minimize them at the start.</p>
</section>
<section id="landmarks" class="level1">
<h1>Landmarks</h1>
<p>Essential features of good landmarks:</p>
<p>Choose landmarks that are:</p>
<ul>
<li>Present on all specimens<br>
</li>
<li>Relevant to the question<br>
</li>
<li>Clearly defined (to be repeatable)<br>
</li>
<li>Conform to accepted best practices for your type of study (do a literature search)</li>
</ul>
<p>Here is an example of typical landmarks:</p>
<p><img src="https://mbutler808.github.io/images/rodentmandible.jpg" class="img-fluid" alt="Rodent lower jaw (mandible). Lateral view of a Nectomys squamipes mandible, showing the 10 landmarks used in this work. 1) Anterior edge of the incisive alveolus; 2) Most posterior point of the diastema; 3) Junction between the mandible and the m1 root; 4) Junction between the molar base and the coronoid process; 5) Most posterior point at the articular process; 6) Most anterior point in the angular notch; 7) Most posterior point at the angular process; 8) Angular process base; 9) Inner edge of the mandibular symphysis; 10) Posterior edge of the incisive alveolus"> <a href="https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.7557">Source</a></p>
<section id="digitizing-landmarks-on-images" class="level3">
<h3 class="anchored" data-anchor-id="digitizing-landmarks-on-images">Digitizing Landmarks on Images</h3>
<p>Acquiring landmarks usually involves some digitizing by hand (with computer assistance). For 2D landmark data the workflow is:</p>
<ul>
<li>Read in the image file<br>
</li>
<li>Set the scale<br>
</li>
<li>Digitize landmarks, collecting X-Y coordinate data</li>
</ul>
<p>Image files are rows and columns of pixels, the number of which is determined by the file size and resolution. Pixels therefore, form a grid which we can digitize, meaning we can indicate at which pixel our landmark of interest is. We translate the pixel coordinates into real-world distances, typically by ditigizing an object of known dimensions such as a ruler. Digitizing software typically asks the user to indicate the points on the screen and the known distances they correspond to.</p>
<p>Easy-to use software for this purpose include <code>ImageJ</code> and <code>FIJI</code>, as well as the <code>geomorph</code> package in R. Before doing a large project, I would try them all to see which serves your purpose the best.</p>
</section>
</section>
<section id="geomorph-package" class="level1">
<h1><code>geomorph</code> package</h1>
<p>The package <code>geomorph</code> is widely used for geometric morphometrics, and will serve as a good example to illustrate the geometric morphometrics workflow all in R (depending on the project and the material, however, you may find it more convenient or efficient to use other software for digitizing).</p>
<section id="digitizing-landmarks-in-geomorph" class="level3">
<h3 class="anchored" data-anchor-id="digitizing-landmarks-in-geomorph">Digitizing landmarks in <code>geomorph</code></h3>
<p>For a quick example, letʻs do a 2D landmark collection on the Red Fox Mandible using <code>digitize2d()</code>. Emma Sherratʻs <a href="https://www.researchgate.net/profile/Alexandre-Palaoro/post/Geomorph-Package-in-R/attachment/5cffb777cfe4a7968da98557/AS%3A768610867900420%401560262519604/download/Quick_Guide_to_Geomorph-3.0.pdf">quick guide to Geomorph</a> provides a more thorough walk-through for capturing landmarks in Chapter 15.</p>
<p>The syntax for <code>digitize2d()</code> is:</p>
<p><code>digitize2d(filelist, nlandmarks, scale = NULL, tpsfile, verbose = TRUE)</code></p>
<p>Where:</p>
<ul>
<li><code>filelist</code> : a vector of filenames of image files</li>
<li><code>nlandmarks</code> : the number of landmarks to digitize<br>
</li>
<li><code>scale</code> : the length of scale to use (optional)<br>
</li>
<li><code>tpsfile</code> : the name of an output file to create or read</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">require</span>(geomorph)</span>
<span id="cb1-2"></span>
<span id="cb1-3">files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red-fox-mandible-lateral.jpg"</span>)</span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># files &lt;- list.files(pattern = "*.jpg") </span></span>
<span id="cb1-5">             <span class="co" style="color: #5E5E5E;"># for multiple files in your image directory</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">digitize2d</span>( files, </span>
<span id="cb2-2">            <span class="at" style="color: #657422;">nlandmarks=</span><span class="dv" style="color: #AD0000;">10</span>, </span>
<span id="cb2-3">            <span class="at" style="color: #657422;">scale=</span><span class="dv" style="color: #AD0000;">80</span>, </span>
<span id="cb2-4">            <span class="at" style="color: #657422;">tpsfile =</span> <span class="st" style="color: #20794D;">"mandible-lat.tps"</span>, </span>
<span id="cb2-5">            <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) </span></code></pre></div>
</div>
<p>R will now wait for you to digitize the first landmark. In verbose mode, it will ask you to <em>confirm</em> each landmark (this can be turned off). If a landmark is missing, choose <code>a</code> for absent. If you make a mistake and choose <code>n</code>, it will ask you to redigitize it. The output will be sent to a <code>.tps</code>file.</p>
</section>
</section>
<section id="tps-format" class="level1">
<h1>TPS format</h1>
<p>TPS format is a standard morphometric data format for storing landmark coordinate data.</p>
<p><code>readland.tps()</code> reads TPS format and returns an array: <em>p</em> landmarks by <em>k</em> dimensions by <em>N</em> specimens.</p>
<p>Remember an array is simply a multidimensional dataframe. Think of it here as a stack of spreadsheets. Each spreadsheet has rows for landmarks and columns for dimensions. We have a separate spreadsheet for each specimen, making this a 3-dimensional array.</p>
<p>The third dimension of this array contains names for each specimen, which are obtained from the image names in the <em>.tps</em> file. We can read in the data that we digitized above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readland.tps</span>(<span class="st" style="color: #20794D;">"mandible-lat.tps"</span>, <span class="at" style="color: #657422;">specID =</span> <span class="st" style="color: #20794D;">"ID"</span>, <span class="at" style="color: #657422;">readcurves =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">warnmsg =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
No curves detected; all points appear to be fixed landmarks.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , ../../images/red-fox-mandible-lateral.jpg

           [,1]      [,2]
 [1,] 107.29125 109.47242
 [2,] 103.69036 108.94577
 [3,] 101.66872 108.37825
 [4,]  43.63469 105.62467
 [5,]  10.59532 111.73118
 [6,]  16.56440 102.17078
 [7,]  12.09659  98.37737
 [8,]  34.05770  93.06904
 [9,]  66.20128  89.99578
[10,] 113.50334 107.91870</code></pre>
</div>
</div>
<p>Note that the name saved with the data in this case was the file name. For another example, check out the <code>plethodon</code> data included with <code>geomorph</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">data</span>(plethodon)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">attributes</span>(plethodon)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$names
[1] "land"    "links"   "species" "site"    "outline"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">str</span>(plethodon)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 5
 $ land   : num [1:12, 1:2, 1:40] 8.89 9.27 5.56 1.87 1.28 ...
  ..- attr(*, "dimnames")=List of 3
  .. ..$ : NULL
  .. ..$ : NULL
  .. ..$ : NULL
 $ links  : num [1:14, 1:2] 4 3 2 1 1 6 7 8 9 10 ...
 $ species: Factor w/ 2 levels "Jord","Teyah": 1 1 1 1 1 1 1 1 1 1 ...
 $ site   : Factor w/ 2 levels "Allo","Symp": 2 2 2 2 2 2 2 2 2 2 ...
 $ outline: num [1:3631, 1:2] 0.399 0.4 0.401 0.403 0.404 ...</code></pre>
</div>
</div>
<p>3D coordinates in tps format simply have a third dimension (z in addition to x and y) in each spreadsheet (one spreadsheet or table per specimen).</p>
<p><img src="https://mbutler808.github.io/images/geomorphdataarrays.png" class="img-fluid"></p>
<p><a href="https://www.researchgate.net/profile/Alexandre-Palaoro/post/Geomorph-Package-in-R/attachment/5cffb777cfe4a7968da98557/AS%3A768610867900420%401560262519604/download/Quick_Guide_to_Geomorph-3.0.pdf">Source: Emma Sherratʻs quick guide to Geomorph</a></p>
</section>
<section id="semi-landmarks" class="level1">
<h1>Semi-Landmarks</h1>
<p>Oftentimes, there is more shape variation than what is captured by the landmarks themselves, which are only points. In addition, sometimes curves and surfaces have no distinct feature that can be reliably captured as the same homologous point from specimen to specimen. For example, the curvature of a smooth shell may lack any distinct landmarks. In both of these cases, semi-landmarks can be helpful.</p>
<p><strong>Semi-landmarks</strong> are regularly spaced points between two landmarks or along a curve or a surface.<br>
<strong>Sliding semi-landmarks</strong> are spaced linearly along a curve.<br>
<strong>Surface semi-landmarks</strong> are spread out evenly in 3D along a surface.</p>
<p>NOTE: One thing to note is that any error in the landmarks will also be propagated to the semilandmarks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/images/caecelian_skull_semilandmarks.jpeg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Figure: Landmark and semilandmark data displayed on the caecilian <em>Siphonops annulatus</em> BMNH 1956.1.15.88. Points are colored as follows: landmarks (red), sliding semilandmarks (“curve points,” yellow), and surface semilandmarks (“surface points,” blue). For information regarding each cranial region, see Bardua et al.&nbsp;(2019). BMNH, Natural History Museum, London, UK.</figcaption><p></p>
</figure>
</div>
<p><a href="https://academic.oup.com/iob/article/1/1/obz016/5526881">Source: Bardua et al 2019</a></p>
<p>See <span class="citation" data-cites="Bardua:2019">(Bardua et al. 2019)</span> for an excellent review article and practical guide.</p>
<p>Annotated 3D version of this figure available at: <a href="https://sketchfab.com/3d-models/add35e2e8af94839b1f577bfcee32e54" class="uri">https://sketchfab.com/3d-models/add35e2e8af94839b1f577bfcee32e54</a></p>
<p>Letʻs practice digitizing 3D landmarks with the geomorph vignette: <a href="https://cran.r-project.org/web/packages/geomorph/vignettes/geomorph.digitize3D.html" class="uri">https://cran.r-project.org/web/packages/geomorph/vignettes/geomorph.digitize3D.html</a></p>
</section>
<section id="more-geomorphic-morphometrics-software" class="level1">
<h1>More geomorphic morphometrics software</h1>
<p><a href="https://academic.oup.com/view-large/223239151" class="uri">https://academic.oup.com/view-large/223239151</a></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Bardua:2019" class="csl-entry">
Bardua, C, R N Felice, A Watanabe, A -C Fabre, and A Goswami. 2019. <span>“<span class="nocase">A Practical Guide to Sliding and Surface Semilandmarks in Morphometric Analyses</span>.”</span> <em>Integrative Organismal Biology</em> 1 (1). <a href="https://doi.org/10.1093/iob/obz016">https://doi.org/10.1093/iob/obz016</a>.
</div>
</div></section></div> ]]></description>
  <category>module 6</category>
  <category>week 12</category>
  <category>control structures</category>
  <category>if else</category>
  <category>(do) while</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2023-04-04-morphometrics-landmarks/index.html</guid>
  <pubDate>Tue, 04 Apr 2023 10:00:00 GMT</pubDate>
  <media:content url="https://mbutler808.github.io/images/rodentmandible.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Measurement Error</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-04-04-measurement-error/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.r-bloggers.com/2015/04/tips-tricks-8-examining-replicate-error/" class="uri">https://www.r-bloggers.com/2015/04/tips-tricks-8-examining-replicate-error/</a></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to estimate measurement error and repeatability</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
</section>
<section id="measurement-error-and-repeatability" class="level1">
<h1>Measurement Error and Repeatability</h1>
<p>Morphometrics is all about assessing variability, within and between individuals. One of those sources of variability is measurement error.</p>
<p>Measurement Error (ME) itself comes from many potential sources:</p>
<ul>
<li>the measurement device (precision)</li>
<li>definition of the measure</li>
<li>quality of the measured material</li>
<li>the measurer</li>
<li>the environment of the measurer (hopefully small!)</li>
<li>measurement protocol</li>
</ul>
<p>We try to minimize ME so that we can reveal the underlying patterns we are interested in, but there will always be some ME. So it is important to quantify at least once at the beginning of the study.</p>
<section id="protocol-for-assessing-me" class="level2">
<h2 class="anchored" data-anchor-id="protocol-for-assessing-me">Protocol for assessing ME</h2>
<p>The percentage of measurement error is defined as the within-group component of variance divided by the total (within + betwee group) variance <span class="citation" data-cites="Claude:2008">(Claude 2008)</span>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5C%25ME%20=%20%5Cfrac%7Bs%5E%7B2%7D_%7Bwithin%7D%7D%7Bs%5E%7B2%7D_%7Bwithin%7D%20+%20s%5E%7B2%7D_%7Bamong%7D%7D%20%5Ctimes%20100%0A"></p>
<p>We can get the componets of variance <img src="https://latex.codecogs.com/png.latex?s%5E%7B2%7D"> from the mean squares (<img src="https://latex.codecogs.com/png.latex?MSS">) of an ANOVA considering the individual (as a factor) source of variation. Individual here represents the within-group variation. The among and within variance can be estimated from the mean sum of squares and <img src="https://latex.codecogs.com/png.latex?m"> the number of repeated measurements:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0As%5E%7B2%7D_%7Bamong%7D%20=%20%5Cfrac%7BMSS_%7Bamong%7D%20-%20MSS_%7Bwithin%7D%7D%7Bm%7D%0A"></p>
<p>and</p>
<p><img src="https://latex.codecogs.com/png.latex?%0As%5E%7B2%7D_%7Bwithin%7D%20=%20MSS_%7Bwithin%7D%0A"></p>
</section>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<p>Suppose we are taking photographs of specimens, and then collecting landmark data from the photos. This is a pretty typical data collection pipeline.</p>
<p>Because we are taking 2D photos from 3D objects, one potential issue is whether the shape variation we obtain is real, or whether it is introduced by placing either the object or the camera at slightly different angles.</p>
<p>Another potential issue is whether we are placing the digitized landmarks in exactly the same place.</p>
<p>There may be additional issues as well - for example some small ambiguity on the physical object, or the material or photos may be of different quality.</p>
<section id="plan-your-data-management" class="level3">
<h3 class="anchored" data-anchor-id="plan-your-data-management">Plan your data management</h3>
<p>I always recommend storing your metadata in the filenames. That way you never lose the information.</p>
<p><strong>Photo files:</strong> A good strategy for data management is to label the photo files: <code>id_picture_replicate.jpg</code></p>
<p>Where: - <strong>id</strong> refers to the specimen, - <strong>picture</strong> the replicate photo (photo1 or photo2), and - <strong>replicate</strong> the replicate landmark coordinates (rep1 or rep2).</p>
<p>We can parse the metadata from the filenames by code such as:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>()  <span class="co" style="color: #5E5E5E;"># to read the file names from the current drectory</span></span>
<span id="cb1-2">files <span class="ot" style="color: #003B4F;">&lt;-</span> files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"id1_photo1_rep1.jpg"</span>, </span>
<span id="cb1-3">                    <span class="st" style="color: #20794D;">"id1_photo1_rep2.jpg"</span>, </span>
<span id="cb1-4">                    <span class="st" style="color: #20794D;">"id1_photo2_rep1.jpg"</span>, </span>
<span id="cb1-5">                    <span class="st" style="color: #20794D;">"id1_photo2_rep2.jpg"</span></span>
<span id="cb1-6">                    )  <span class="co" style="color: #5E5E5E;"># made up example to practice </span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Collect metadata, approach 1 - substr</span></span>
<span id="cb1-9">meta <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">strsplit</span>(files, <span class="st" style="color: #20794D;">"_|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">."</span>)  <span class="co" style="color: #5E5E5E;"># metadata. split filenames by _ or . </span></span>
<span id="cb1-10">                                  <span class="co" style="color: #5E5E5E;"># Need to use \\ to escape the .</span></span>
<span id="cb1-11">id <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(meta, <span class="st" style="color: #20794D;">"[["</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-12">photo <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(meta, <span class="st" style="color: #20794D;">"[["</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-13">rep <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(meta, <span class="st" style="color: #20794D;">"[["</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Collect metadata approach 2 - sub</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;"># using sub and regular expressions to select (string1)_(string2)_(string3)</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># also ignoring the final .jpg, where . is escaped by \\</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">id <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sub</span>(</span>
<span id="cb1-20">        <span class="st" style="color: #20794D;">"^([a-zA-Z0-9]+)_([a-zA-Z0-9]+)_([a-zA-Z0-9]+)(</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg)"</span>, </span>
<span id="cb1-21">        <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">1"</span>, </span>
<span id="cb1-22">        files</span>
<span id="cb1-23">      )</span>
<span id="cb1-24">photo <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sub</span>(</span>
<span id="cb1-25">         <span class="st" style="color: #20794D;">"^([a-zA-Z0-9]+)_([a-zA-Z0-9]+)_([a-zA-Z0-9]+)(</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg)"</span>, </span>
<span id="cb1-26">         <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">2"</span>, </span>
<span id="cb1-27">         files</span>
<span id="cb1-28">       )</span>
<span id="cb1-29">rep <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sub</span>(</span>
<span id="cb1-30">         <span class="st" style="color: #20794D;">"^([a-zA-Z0-9]+)_([a-zA-Z0-9]+)_([a-zA-Z0-9]+)(</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg)"</span>, </span>
<span id="cb1-31">         <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">3"</span>, </span>
<span id="cb1-32">         files</span>
<span id="cb1-33">       )</span></code></pre></div>
</div>
<p>We can use these vectors along with the coordinates to test for measurement error with ANOVA.</p>
</section>
<section id="statistical-methods-for-measurement-error" class="level3">
<h3 class="anchored" data-anchor-id="statistical-methods-for-measurement-error">Statistical methods for Measurement Error:</h3>
<p>We will assess measurement error at two levels, photography error and digitizing error:</p>
<p><strong>Photography error:</strong> Take <strong>two sets of photos</strong>, each time placing the object in front of the camera and positioning the specimen. (I.e., the entire process to give us a good estimate of photo capture error)</p>
<p><strong>Landmark digitizing error:</strong> Collect landmarks twice, ideally in different sessions on different days or weeks.</p>
<p><strong>Data:</strong> In this example we will have 4 sets of landmark data for each specimen, 2 photos x 2 digitizing replicates, allowing assessment of error associated with the digitization as well as error in capturing the shapes via the photographs.</p>
<p><strong>Model:</strong> We will use a <a href="http://www.biostathandbook.com/nestedanova.html">nested ANOVA</a> to estimate repeatability and (measurement error) of the landmarks, to try to separate the variation introduced by the digitization process, apart from the other sources of variation.</p>
</section>
<section id="analyze-with-anova" class="level3">
<h3 class="anchored" data-anchor-id="analyze-with-anova">Analyze with ANOVA:</h3>
<p>Nested ANOVA indicates that we have a nested structure of replicates within groups (i.e., <code>rep1</code> of <code>photo1</code> has nothing to do with <code>rep1</code> of <code>photo2</code>. <code>rep</code> is nested within <code>photo</code>.</p>
<p>In R we specify a nested model forumula <a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/formula.html">using :</a> in the model term (to indicate interaction terms only with no main effect):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">lm.fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(coords <span class="sc" style="color: #5E5E5E;">~</span> id<span class="sc" style="color: #5E5E5E;">:</span>photo<span class="sc" style="color: #5E5E5E;">:</span>rep)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">aov</span>(lm.fit)</span></code></pre></div>
</div>
<p><strong>Data and model term objects:</strong> - <strong>coords</strong> is the data object (a vector or array) - <strong>id</strong> is a vector containing labels for each specimen - <strong>photo</strong> is a vector (photo is 1 or 2) - <strong>rep</strong> is a vector (digitizing replicate 1 or 2)</p>
<p>Look at the values of the Mean Squares (MS) column in the ANOVA table. Compare the value for <code>id:photo</code> and <code>id:photo:rep</code> with <code>id</code>.</p>
<section id="repeatability" class="level4">
<h4 class="anchored" data-anchor-id="repeatability">Repeatability</h4>
<p>To calculate the <strong>repeatability</strong> of our digitizing ability, we subtract the <strong>MS</strong> of the <strong>rep</strong> term from the <strong>individual</strong> term and divide by <strong>two</strong> (because we have two replicates):</p>
<center>
<strong>((MS(id) – MS(id:photo:rep))/2 )</strong>
</center>
<p>Then we calculate the ratio of this value to the total MS:</p>
<center>
<strong>((MS(id) – MS(id:photo:rep))/2 ) / (MS(id)+MS(id:photo)+MS(id:photo:rep))</strong>
</center>
<p>The result is the <strong>repeatability</strong>, which in good circumstances is somewhere above 0.95; and thus 5% <strong>measurement error</strong>.</p>
</section>
</section>
<section id="simplifed-simulated-example" class="level3">
<h3 class="anchored" data-anchor-id="simplifed-simulated-example">Simplifed Simulated example:</h3>
<p>Simplifed example: 20 specimens, 1 photo, 2 digitzing reps:</p>
<p>20 specimens: (single measurement dataset). 2 repetitons: Digitize each photo twice (once in each of two sessions on different days).<br>
How repeatable are the measurements?</p>
<p>Simulate the data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">true_m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">3</span>)  <span class="co" style="color: #5E5E5E;"># true values for  specimens</span></span>
<span id="cb3-2">m1 <span class="ot" style="color: #003B4F;">&lt;-</span> true_m <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="fl" style="color: #AD0000;">0.5</span>)  <span class="co" style="color: #5E5E5E;"># measurement 1</span></span>
<span id="cb3-3">m2 <span class="ot" style="color: #003B4F;">&lt;-</span> true_m <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="fl" style="color: #AD0000;">0.5</span>)  <span class="co" style="color: #5E5E5E;"># measurement 2</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">id <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.factor</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">20</span>, <span class="at" style="color: #657422;">times=</span><span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb3-6">rep <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gl</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb3-7">total_m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(m1, m2)</span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;">cbind</span>(id, total_m, rep)  <span class="co" style="color: #5E5E5E;"># the data</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      id  total_m rep
 [1,]  1 24.15721   1
 [2,]  2 23.51620   1
 [3,]  3 20.32648   1
 [4,]  4 21.13753   1
 [5,]  5 19.63922   1
 [6,]  6 18.90770   1
 [7,]  7 20.80480   1
 [8,]  8 21.50574   1
 [9,]  9 19.54461   1
[10,] 10 18.38292   1
[11,] 11 16.51972   1
[12,] 12 22.56470   1
[13,] 13 20.90189   1
[14,] 14 27.00296   1
[15,] 15 19.14295   1
[16,] 16 22.80917   1
[17,] 17 21.36119   1
[18,] 18 17.27635   1
[19,] 19 20.43382   1
[20,] 20 22.27521   1
[21,]  1 24.22700   2
[22,]  2 23.89706   2
[23,]  3 19.29717   2
[24,]  4 21.86834   2
[25,]  5 20.88725   2
[26,]  6 18.54368   2
[27,]  7 20.65837   2
[28,]  8 21.74068   2
[29,]  9 18.87857   2
[30,] 10 17.97394   2
[31,] 11 16.30139   2
[32,] 12 22.07608   2
[33,] 13 21.17731   2
[34,] 14 26.78290   2
[35,] 15 19.46328   2
[36,] 16 21.98306   2
[37,] 17 21.04685   2
[38,] 18 17.49118   2
[39,] 19 20.60442   2
[40,] 20 22.55779   2</code></pre>
</div>
</div>
<p>Is there a difference between the measurement sessions?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">aov</span>(<span class="fu" style="color: #4758AB;">lm</span> ( total_m <span class="sc" style="color: #5E5E5E;">~</span> rep)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            Df Sum Sq Mean Sq F value Pr(&gt;F)
rep          1   0.01   0.014   0.002  0.962
Residuals   38 230.77   6.073               </code></pre>
</div>
</div>
<p>No (<em>thatʻs good!</em>)</p>
<p>Is there a difference between individual specimens?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">aov</span>(<span class="fu" style="color: #4758AB;">lm</span>( total_m <span class="sc" style="color: #5E5E5E;">~</span> id )))</span>
<span id="cb7-2">mod</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            Df Sum Sq Mean Sq F value   Pr(&gt;F)    
id          19 228.00  12.000   86.17 3.82e-15 ***
Residuals   20   2.79   0.139                     
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>Yes, and the resigual mean squared error looks small too (good!). How big is the measurement error?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">s2_within <span class="ot" style="color: #003B4F;">&lt;-</span> ms_within <span class="ot" style="color: #003B4F;">&lt;-</span> mod[[<span class="dv" style="color: #AD0000;">1</span>]][<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb9-2">s2_within</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.1392685</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">ms_among <span class="ot" style="color: #003B4F;">&lt;-</span> mod[[<span class="dv" style="color: #AD0000;">1</span>]][<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb11-2">s2_among <span class="ot" style="color: #003B4F;">&lt;-</span> (ms_among<span class="sc" style="color: #5E5E5E;">-</span>ms_within)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb11-3">ME <span class="ot" style="color: #003B4F;">&lt;-</span> s2_within<span class="sc" style="color: #5E5E5E;">/</span>(s2_within<span class="sc" style="color: #5E5E5E;">+</span>s2_among) <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb11-4">ME</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2.294503</code></pre>
</div>
</div>
<p>Not bad. A rule of thumb is that 5% ME is good (95% repeatability). If we want to reduce ME, we can use the average of the two measurements in our analyses.</p>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Claude:2008" class="csl-entry">
Claude, Julien. 2008. <em>Morphometrics with r</em>. 1. Aufl. New York, NY: Springer-Verlag.
</div>
</div></section></div> ]]></description>
  <category>module 6</category>
  <category>week 12</category>
  <category>control structures</category>
  <category>if else</category>
  <category>(do) while</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2023-04-04-measurement-error/index.html</guid>
  <pubDate>Thu, 30 Mar 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Intro to Morphometrics</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-30-morphometrics/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.r-bloggers.com/2015/04/tips-tricks-8-examining-replicate-error/" class="uri">https://www.r-bloggers.com/2015/04/tips-tricks-8-examining-replicate-error/</a></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to estimate measurement error and repeatability</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
</section>
<section id="measurement-error-and-repeatability" class="level1">
<h1>Measurement Error and Repeatability</h1>
<p>Morphometrics is all about assessing variability, within and between individuals. One of those sources of variability is measurement error.</p>
<p>Measurement Error (ME) itself comes from many potential sources:</p>
<ul>
<li>the measurement device (precision)</li>
<li>definition of the measure</li>
<li>quality of the measured material</li>
<li>the measurer</li>
<li>the environment of the measurer (hopefully small!)</li>
<li>measurement protocol</li>
</ul>
<p>We try to minimize ME so that we can reveal the underlying patterns we are interested in, but there will always be some ME. So it is important to quantify at least once at the beginning of the study.</p>
<section id="protocol-for-assessing-me" class="level2">
<h2 class="anchored" data-anchor-id="protocol-for-assessing-me">Protocol for assessing ME</h2>
<p>The percentage of measurement error is defined as the within-group component of variance divided by the total (within + betwee group) variance <span class="citation" data-cites="Claude:2008">(Claude 2008)</span>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5C%25ME%20=%20%5Cfrac%7Bs%5E%7B2%7D_%7Bwithin%7D%7D%7Bs%5E%7B2%7D_%7Bwithin%7D%20+%20s%5E%7B2%7D_%7Bamong%7D%7D%20%5Ctimes%20100%0A"></p>
<p>We can get the componets of variance <img src="https://latex.codecogs.com/png.latex?s%5E%7B2%7D"> from the mean squares (<img src="https://latex.codecogs.com/png.latex?MSS">) of an ANOVA considering the individual (as a factor) source of variation. Individual here represents the within-group variation. The among and within variance can be estimated from the mean sum of squares and <img src="https://latex.codecogs.com/png.latex?m"> the number of repeated measurements:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0As%5E%7B2%7D_%7Bamong%7D%20=%20%5Cfrac%7BMSS_%7Bamong%7D%20-%20MSS_%7Bwithin%7D%7D%7Bm%7D%0A"></p>
<p>and</p>
<p><img src="https://latex.codecogs.com/png.latex?%0As%5E%7B2%7D_%7Bwithin%7D%20=%20MSS_%7Bwithin%7D%0A"></p>
</section>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<p>Let’s say you are taking photographs of your specimens and you want to quantify the error assocated with placing your landmarks in the same place every time (i.e.&nbsp;is your criteria for the landmark robust enough that its obvious where it should be placed on each specimen, and if you came back to the data a month or year later?)</p>
<p>To assess measurement error in this instance we could take two sets of pictures, each time removing and positioning the specimen. And we could digitize each image twice, preferably in different sessions (another day or week). This would give us 4 sets of landmark data for each specimen, allowing us to asses both error associated with the digitization as well as error in capturing the shapes via the photographs.</p>
<p>Alternatively, if we were interested in inter-observer error vs.&nbsp;repeatability within observer, we could take one photograph and have it measured by two different people, each person taking two sets of measurements (preferably in different sessions).</p>
<section id="simulated-example" class="level3">
<h3 class="anchored" data-anchor-id="simulated-example">Simulated example:</h3>
<p>Repeat a set of five measurements, (measure twice), once in each of two sessions on different days. How repeatable are the measurements?</p>
<p>Simulate the data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">true_m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">3</span>)  <span class="co" style="color: #5E5E5E;"># true values</span></span>
<span id="cb1-2">m1 <span class="ot" style="color: #003B4F;">&lt;-</span> true_m <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># measurements set 1</span></span>
<span id="cb1-3">m2 <span class="ot" style="color: #003B4F;">&lt;-</span> true_m <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-4">session <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gl</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb1-5">individual <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.factor</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb1-6">total_m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(m1, m2)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">cbind</span>(individual, total_m, session)  <span class="co" style="color: #5E5E5E;"># the data</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      individual  total_m session
 [1,]          1 20.44919       1
 [2,]          2 21.85592       1
 [3,]          3 23.57399       1
 [4,]          4 23.66764       1
 [5,]          5 15.82221       1
 [6,]          1 20.61579       2
 [7,]          2 22.73522       2
 [8,]          3 22.57645       2
 [9,]          4 23.67244       2
[10,]          5 13.60084       2</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">aov</span>(total_m <span class="sc" style="color: #5E5E5E;">~</span> session))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            Df Sum Sq Mean Sq F value Pr(&gt;F)
session      1   0.47    0.47   0.035  0.857
Residuals    8 108.45   13.56               </code></pre>
</div>
</div>
<p>There is no difference between sessions (yay)!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">aov</span>(total_m <span class="sc" style="color: #5E5E5E;">~</span> individual))</span>
<span id="cb5-2">mod </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            Df Sum Sq Mean Sq F value   Pr(&gt;F)    
individual   4 105.55  26.388   39.21 0.000574 ***
Residuals    5   3.37   0.673                     
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>The specimens measured (individuals) are significantly different.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">s2within <span class="ot" style="color: #003B4F;">&lt;-</span> MSwithin <span class="ot" style="color: #003B4F;">&lt;-</span> mod[[<span class="dv" style="color: #AD0000;">1</span>]][<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb7-2">MSamong <span class="ot" style="color: #003B4F;">&lt;-</span> mod[[<span class="dv" style="color: #AD0000;">1</span>]][<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb7-3">s2among <span class="ot" style="color: #003B4F;">&lt;-</span> (MSamong<span class="sc" style="color: #5E5E5E;">-</span>MSwithin)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-4">pME <span class="ot" style="color: #003B4F;">&lt;-</span> s2within<span class="sc" style="color: #5E5E5E;">/</span>(s2within<span class="sc" style="color: #5E5E5E;">+</span>s2among)<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb7-5">pME</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4.974382</code></pre>
</div>
</div>
<p>And the percent measurement error is represented by <code>pME</code>. As a rough rule of thumb we want this to be less than 5%. If it is very high, we either want to practice more, or take multiple measurements of each variable and average them.</p>
</section>
</section>
</section>
<section id="calculating-morphometric-parameters" class="level1">
<h1>Calculating morphometric parameters</h1>
<p>Your raw data may be in lengths for linear morphometrics or coordinate for landmark-based morphometrics. You will often have to calcuate quantities from your raw data such as distances and angles.</p>
<section id="calculating-distances" class="level2">
<h2 class="anchored" data-anchor-id="calculating-distances">Calculating distances</h2>
<p>You may need to calculate distances between your landmarks, or you may have species centroids (the means in multiple dimensions), and you want to know the distance between species in morphospace.</p>
<p>The distance between two points (in k dimensions) is given by the square root of the sum of the squared differences between the points.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ad_%7BAB%7D%20=%20%5Csqrt%7B%5Csum_%7Bi=1%7D%5E%7Bk%7D%7D%20(A_i%20-%20B_i)%5E2%20%20%0A"></p>
<p>This is analogous to calcuating the length of the hypotenuse in a right triangle. If there is more than one dimension, these squared differences are computed dimension by dimension, summed, then the entire quantity is square rooted.</p>
<p>A 2-D example in R is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">A <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb9-2">B <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">plot</span>( <span class="fu" style="color: #4758AB;">c</span>(A[<span class="dv" style="color: #AD0000;">1</span>], B[<span class="dv" style="color: #AD0000;">1</span>]),<span class="fu" style="color: #4758AB;">c</span>(A[<span class="dv" style="color: #AD0000;">2</span>], B[<span class="dv" style="color: #AD0000;">2</span>]), <span class="at" style="color: #657422;">xlim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">10</span>), <span class="at" style="color: #657422;">ylim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">10</span>), </span>
<span id="cb9-4">      <span class="at" style="color: #657422;">xlab=</span><span class="st" style="color: #20794D;">"X"</span>, <span class="at" style="color: #657422;">ylab=</span><span class="st" style="color: #20794D;">"Y"</span>, <span class="at" style="color: #657422;">cex=</span><span class="dv" style="color: #AD0000;">4</span>,  <span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"red"</span>)</span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">lines</span>( <span class="fu" style="color: #4758AB;">c</span>(A[<span class="dv" style="color: #AD0000;">1</span>], B[<span class="dv" style="color: #AD0000;">1</span>]),<span class="fu" style="color: #4758AB;">c</span>(A[<span class="dv" style="color: #AD0000;">2</span>], B[<span class="dv" style="color: #AD0000;">2</span>]), <span class="at" style="color: #657422;">lty=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"red"</span> )</span>
<span id="cb9-6"><span class="fu" style="color: #4758AB;">lines</span>( <span class="fu" style="color: #4758AB;">c</span>(A[<span class="dv" style="color: #AD0000;">1</span>], B[<span class="dv" style="color: #AD0000;">1</span>]),<span class="fu" style="color: #4758AB;">c</span>(A[<span class="dv" style="color: #AD0000;">2</span>], A[<span class="dv" style="color: #AD0000;">2</span>]), <span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"grey"</span> )</span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;">lines</span>( <span class="fu" style="color: #4758AB;">c</span>(B[<span class="dv" style="color: #AD0000;">1</span>], B[<span class="dv" style="color: #AD0000;">1</span>]),<span class="fu" style="color: #4758AB;">c</span>(A[<span class="dv" style="color: #AD0000;">2</span>], B[<span class="dv" style="color: #AD0000;">2</span>]), <span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"grey"</span> )</span>
<span id="cb9-8"><span class="fu" style="color: #4758AB;">text</span>(A[<span class="dv" style="color: #AD0000;">1</span>], A[<span class="dv" style="color: #AD0000;">2</span>], <span class="st" style="color: #20794D;">"A"</span>)</span>
<span id="cb9-9"><span class="fu" style="color: #4758AB;">text</span>(B[<span class="dv" style="color: #AD0000;">1</span>], B[<span class="dv" style="color: #AD0000;">2</span>], <span class="st" style="color: #20794D;">"B"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-30-morphometrics/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Compute the distance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">A<span class="sc" style="color: #5E5E5E;">-</span>B</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -5 -4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">sum</span>((A<span class="sc" style="color: #5E5E5E;">-</span>B)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 41</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">sqrt</span>(<span class="fu" style="color: #4758AB;">sum</span>((A<span class="sc" style="color: #5E5E5E;">-</span>B)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6.403124</code></pre>
</div>
</div>
<p>We can create a function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">distance <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( A, B ) { <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="fu" style="color: #4758AB;">sum</span>((A<span class="sc" style="color: #5E5E5E;">-</span>B)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)) }</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">distance</span>( A, B )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6.403124</code></pre>
</div>
</div>
<p>Try it on a 3-D set of coordinates. Does it work?</p>
</section>
<section id="angle-between-two-vectors" class="level2">
<h2 class="anchored" data-anchor-id="angle-between-two-vectors">Angle between two vectors</h2>
<p>The angle <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> between two vectors <img src="https://latex.codecogs.com/png.latex?%5Coverrightarrow%7BAB%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Coverrightarrow%7BCD%7D"> can be calculated using the dot product and the rule of cosines.</p>
<p>Suppose we have two vectors <img src="https://latex.codecogs.com/png.latex?V_1%20=%20(x_1,y_1)">, and <img src="https://latex.codecogs.com/png.latex?V2%20=%20(x_2,y_2)">. We can use our coordinates A, B above to calculate our first vector, and make up a second one. From geometry, we can think of vectors as originating at <code>(0,0)</code> with the vector coordinates indicating the head of the vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">V1 <span class="ot" style="color: #003B4F;">&lt;-</span> AB <span class="ot" style="color: #003B4F;">&lt;-</span> B <span class="sc" style="color: #5E5E5E;">-</span> A  <span class="co" style="color: #5E5E5E;"># using our A,B landmarks above</span></span>
<span id="cb18-2">V1 </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">V2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">4</span>)  <span class="co" style="color: #5E5E5E;"># another vector</span></span></code></pre></div>
</div>
<p>The dot product is then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV_1V_2%20=%20x_1x_2%20+%20y_1y_2%20=%20%7CV_1%7C%20%5Ccdot%20%7CV_2%7C%20cos(%5Ctheta)%0A"></p>
<p>Rearranging:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Acos(%5Ctheta)%20=%20%5Cfrac%7B%20x_1x_2%20+%20y_1y_2%20%7D%20%7B%20%7CV_1%7C%20%5Ccdot%20%7CV_2%7C%20%7D%0A"></p>
<p>Also <img src="https://latex.codecogs.com/png.latex?%0A%7CV_1%7C%20=%20%5Csqrt%7B%20%20x_1%5E2%20+%20y_1%5E2%7D%0A"></p>
<p>And similarly for <img src="https://latex.codecogs.com/png.latex?V_2">.</p>
<p>So all we have to do is take the inverse cosine, arc cosine, or <code>acos()</code> to solve for the angle theta (<img src="https://latex.codecogs.com/png.latex?%5Ctheta">).</p>
<section id="calculating-the-angle-in-r" class="level3">
<h3 class="anchored" data-anchor-id="calculating-the-angle-in-r">Calculating the angle in R</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">V1 <span class="sc" style="color: #5E5E5E;">%*%</span> V2  <span class="co" style="color: #5E5E5E;"># the dot product. what is the difference with V1 * V2?</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]   26</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">           <span class="co" style="color: #5E5E5E;"># same as sum(V1*V2) </span></span>
<span id="cb23-2"></span>
<span id="cb23-3">theta <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">acos</span>( (V1 <span class="sc" style="color: #5E5E5E;">%*%</span> V2) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="fu" style="color: #4758AB;">sqrt</span>( V1<span class="sc" style="color: #5E5E5E;">%*%</span>V1) <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">sqrt</span>(V2<span class="sc" style="color: #5E5E5E;">%*%</span>V2)) )</span>
<span id="cb23-4">theta</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]
[1,] 0.4324078</code></pre>
</div>
</div>
<p>Where the result is in radians, not degrees (see the help page <code>?acos</code>, all of Rʻs trig functions are in radians).</p>
<p>Note: I should change this to using the arc tangent, to preserve the angle in case it is outside of 0,pi.</p>
<section id="radians-to-degrees" class="level4">
<h4 class="anchored" data-anchor-id="radians-to-degrees">Radians to degrees</h4>
<p>Degrees and radians are different units of measure for an <strong>angle</strong>. To covert to degrees, remember that a <em>360 degree circle</em> is <em>2pi radians</em> (or a half circle 180 degrees is pi radians):</p>
<p>To remember how to do this conversion, recall that the formula for the circumference of a circle is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ACircumference%20=%202%20%5Cpi%20r%0A"></p>
<p>A few key facts:</p>
<ul>
<li><em>Arc length</em> : the distance along a curved line (the arc length of the entire circle is the circumference).</li>
<li><em>Radian</em> : the angle measured in relation to the radius. If you take the radius and lay it along the circle, the <em>angle defined by the arc length of one radius</em> is <em>one radian</em>.<br>
</li>
<li>To complete the circle, we need an arc length of <img src="https://latex.codecogs.com/png.latex?2%5Cpi%20r"> (which is the circumferemce), or a little over 6 radians (because <img src="https://latex.codecogs.com/png.latex?2%5Cpi%20~=%206">).</li>
<li><em>Degrees</em> : another unit of measure for angles, defined by one circle having 360 degrees.</li>
<li></li>
</ul>
<p>Therefore, the angle of a full circle is <img src="https://latex.codecogs.com/png.latex?360%5E%5Ccirc">, or equivalently, <img src="https://latex.codecogs.com/png.latex?2%5Cpi"> radians:</p>
<p><img src="https://latex.codecogs.com/png.latex?180%5E%5Ccirc%20=%20%5Cpi"> radians</p>
<p>If we take a measurement M in radians: <img src="https://latex.codecogs.com/png.latex?%0AM%20(rad)%5Cfrac%7B180%5E%5Ccirc%7D%7B%5Cpi%20rad%7D%20=%20(M%5Cfrac%7B180%7D%7B%5Cpi%7D%20)%5E%5Ccirc%0A"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">theta_degrees <span class="ot" style="color: #003B4F;">&lt;-</span> theta<span class="sc" style="color: #5E5E5E;">/</span> pi <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">180</span></span>
<span id="cb25-2">theta_degrees</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         [,1]
[1,] 24.77514</code></pre>
</div>
</div>



</section>
</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Claude:2008" class="csl-entry">
Claude, Julien. 2008. <em>Morphometrics with r</em>. 1. Aufl. New York, NY: Springer-Verlag.
</div>
</div></section></div> ]]></description>
  <category>module 6</category>
  <category>week 11</category>
  <category>control structures</category>
  <category>if else</category>
  <category>(do) while</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2023-03-30-morphometrics/index.html</guid>
  <pubDate>Thu, 30 Mar 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Program Flow</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-28-program-flow/index.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-22-control-structures" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-22-control-structures</a></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to use commonly used control structures including <code>if</code>, <code>while</code>, <code>repeat</code>, and <code>for</code></li>
<li>Be able to skip an iteration of a loop using <code>next</code></li>
<li>Be able to exit a loop immediately using <code>break</code></li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p><strong>R</strong> is not only a collection of functions for data analysis and matrix math, but also a fully-featured programming language with all of the usual <strong>conditional statements</strong>.</p>
<p>There are times when we want to go beyond simply a linear step through the code, but to make execution conditional, in order to <strong>control the flow of execution of the code</strong>.</p>
<p>A basic conditional statement:</p>
<p><img src="https://mbutler808.github.io/images/ProgramFlow_decision_point.png" class="img-fluid"></p>
</section>
<section id="when-conditional-statements-are-needed" class="level1">
<h1>When conditional statements are needed:</h1>
<p>Anytime in the code where decisions need to be made:</p>
<ul>
<li><p><strong>Optimzation</strong>: A common task is to decide when to exit out of a loop. For example when we are approximatig a solution and we donʻt know how many iterations it will take to get “close enough” to the true solution. In this case, we would want to repeat until we reach the condition then stop and return the answer.</p></li>
<li><p><strong>Flexibility</strong>: Depending on a value, you may want to execute different code. For example, if we are writing a function with multiple options. The function will do the same general computation but we may want to provide different options depending on the users needs. We can add optional arguments. If the user changes them, the function will execude the extra option.</p></li>
</ul>
</section>
<section id="program-flow" class="level1">
<h1>Program Flow</h1>
<p>The flow of execution can be diagrammed in a flowchart, and is really helpful for seeing the logical structure of the project. It also encourages <strong>modularity</strong> and <strong>reusablility</strong> of your code.</p>
<p><em>A flowchart can be really helpful for visualizing your computations</em>, and in particular where a function or loop would be helpful, or where variables need to be updated or sent to output. For example for computing the sum using a loop:</p>
<p><img src="https://mbutler808.github.io/images/ProgramFlow_flowchart.png" class="img-fluid"></p>
<p>The different types of actions are represented by shapes, with the direction of flow indicated by arrows connecting the shapes:</p>
<ul>
<li><strong>Executable statement</strong>: rectangle<br>
</li>
<li><strong>Input/ Output</strong>: usually a trapezoid (or a torn page, old-timey)</li>
<li><strong>Conditional statement</strong> - a decision point: diamond</li>
<li><strong>Start/End/connection to another subroutine</strong>: circle</li>
</ul>
<p>Imagine if you were to flowchart this code below. Anytime you find yourself cutting and pasting code, it is a clue that you should consider a loop or a function.</p>
<p><img src="https://mbutler808.github.io/images/ProgramFlowForLoops_repeated1.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p><em>You</em> should <strong>code it only once</strong>, make the <em>computer</em> repeat!</p>
</blockquote>
<p><img src="https://mbutler808.github.io/images/ProgramFlowForLoops_repeated2.png" class="img-fluid"></p>
</section>
<section id="conditional-statements-include" class="level1">
<h1>Conditional statements include:</h1>
<ul>
<li><p><code>if</code> and <code>else</code>: testing a condition and acting on it</p></li>
<li><p><code>ifelse</code>: a variant of <code>if</code> and <code>else</code> in one line</p></li>
<li><p><code>switch</code>: a convenience conditional for multiple executable options</p></li>
<li><p><code>for</code>: execute a loop a fixed number of times</p></li>
<li><p><code>while</code>: repeat a loop <em>while</em> a condition is true</p></li>
<li><p><code>repeat</code>: execute an infinite loop (must <code>break</code> out of it to stop)</p></li>
<li><p><code>break</code>: break the execution of a loop</p></li>
<li><p><code>next</code>: skip an interation of a loop</p></li>
</ul>
<section id="if-else" class="level2">
<h2 class="anchored" data-anchor-id="if-else"><code>if</code>-<code>else</code></h2>
<p><code>if</code>-<code>else</code> is the most commonly used conditional statement in programming. If a condition is true, a statement is executed:</p>
<p><img src="https://mbutler808.github.io/images/ProgramFlow_ifelse.png" class="img-fluid"></p>
<p><code>if</code>-<code>else</code> comes in many flavors:</p>
<section id="just-if" class="level3">
<h3 class="anchored" data-anchor-id="just-if">Just <code>if</code></h3>
<p>If the condition is <code>TRUE</code>, execution happens. If <code>FALSE</code>, nothing happens:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">&lt;</span>condition<span class="sc" style="color: #5E5E5E;">&gt;</span>) {</span>
<span id="cb1-2">        <span class="do" style="color: #5E5E5E;
font-style: italic;">## do something</span></span>
<span id="cb1-3">} </span>
<span id="cb1-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Continue with rest of code</span></span></code></pre></div>
</section>
<section id="if-else-1" class="level3">
<h3 class="anchored" data-anchor-id="if-else-1"><code>if</code>-<code>else</code></h3>
<p>If-else allows for a different action when the condition is false:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">&lt;</span>condition<span class="sc" style="color: #5E5E5E;">&gt;</span>) {</span>
<span id="cb2-2">        <span class="do" style="color: #5E5E5E;
font-style: italic;">## do something</span></span>
<span id="cb2-3">} </span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-5">        <span class="do" style="color: #5E5E5E;
font-style: italic;">## do something else</span></span>
<span id="cb2-6">}</span></code></pre></div>
<p><code>if</code> and <code>else</code> can be daisy-chained:</p>
</section>
<section id="if-else-if-else-if-else-etc." class="level3">
<h3 class="anchored" data-anchor-id="if-else-if-else-if-else-etc."><code>if</code>-<code>else</code> <code>if</code>-<code>else</code> <code>if</code>-<code>else</code> etc.</h3>
<p>You can have a series of tests, which will stop and execute the statement at the condition that is <code>TRUE</code>. (Everything following will be ignored):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">&lt;</span>condition1<span class="sc" style="color: #5E5E5E;">&gt;</span>) {</span>
<span id="cb3-2">        <span class="do" style="color: #5E5E5E;
font-style: italic;">## do something</span></span>
<span id="cb3-3">} <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">&lt;</span>condition2<span class="sc" style="color: #5E5E5E;">&gt;</span>)  { </span>
<span id="cb3-4">        <span class="do" style="color: #5E5E5E;
font-style: italic;">## do something different</span></span>
<span id="cb3-5">} <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">&lt;</span>condition2<span class="sc" style="color: #5E5E5E;">&gt;</span>) {</span>
<span id="cb3-6">        <span class="do" style="color: #5E5E5E;
font-style: italic;">## do something different</span></span>
<span id="cb3-7">} <span class="cf" style="color: #003B4F;">else</span> { </span>
<span id="cb3-8">        <span class="do" style="color: #5E5E5E;
font-style: italic;">## do this if none of the above is true</span></span>
<span id="cb3-9">}        </span></code></pre></div>
<section id="example-draw-a-random-value-between-zero-and-10-then-test-for-values-greater-than-3." class="level4">
<h4 class="anchored" data-anchor-id="example-draw-a-random-value-between-zero-and-10-then-test-for-values-greater-than-3."><strong>Example</strong>: Draw a random value between zero and 10, then test for values greater than 3.</h4>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">min=</span><span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">max=</span><span class="dv" style="color: #AD0000;">10</span>)  </span>
<span id="cb4-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9.765364</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="cf" style="color: #003B4F;">if</span>(x <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">6</span>) {</span>
<span id="cb6-2">    y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb6-3">  } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span>){</span>
<span id="cb6-4">    y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb6-5">  } <span class="cf" style="color: #003B4F;">else</span> { y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span> }</span>
<span id="cb6-6">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9.765364</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10</code></pre>
</div>
</div>
<p>With the if-else structure we can test multiple conditions on the same variable. Here, three ranges of values for x. Of course, the <code>else</code> conditional is not necessary. You could just have a string of ifs:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">&lt;</span>condition1<span class="sc" style="color: #5E5E5E;">&gt;</span>) {</span>
<span id="cb10-2"></span>
<span id="cb10-3">}</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">&lt;</span>condition2<span class="sc" style="color: #5E5E5E;">&gt;</span>) {</span>
<span id="cb10-6"></span>
<span id="cb10-7">}</span></code></pre></div>
<p>As long as your logic is sound (and you have them in the right order), you could be OK.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note-TESTING
</div>
</div>
<div class="callout-body-container callout-body">
<p>NOTE it is always important to <strong><em>TEST your code against several datasets for which you can verify the answers</em></strong>. Be sure to try cases where your code might get tripped up. Anticipating the errors will have you a lot of headache.</p>
</div>
</div>
</section>
</section>
</section>
<section id="while-loops" class="level2">
<h2 class="anchored" data-anchor-id="while-loops"><code>while</code> Loops</h2>
<p><strong><code>while</code> loops</strong> begin by <strong>testing a condition</strong>.</p>
<ul>
<li>If it is <code>TRUE</code>, then they execute the code contained within the loop.<br>
</li>
<li>If <code>FALSE</code> the loop is exited (no execution).</li>
</ul>
<p><img src="https://mbutler808.github.io/images/ProgramFlow_while.png" class="img-fluid"></p>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example:</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">count <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;">while</span>(count <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">10</span>) {</span>
<span id="cb11-3">        <span class="fu" style="color: #4758AB;">print</span>(count)</span>
<span id="cb11-4">        count <span class="ot" style="color: #003B4F;">&lt;-</span> count <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb11-5">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9</code></pre>
</div>
</div>
<p><code>while</code> loops can potentially result in infinite loops if not written properly. <strong>Use with care!</strong></p>
<p>Sometimes there will be more than one condition in the test.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">z <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="cf" style="color: #003B4F;">while</span>(z <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;&amp;</span> z <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">10</span>) {</span>
<span id="cb13-5">        coin <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb13-6">        </span>
<span id="cb13-7">        <span class="cf" style="color: #003B4F;">if</span>(coin <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) {  <span class="do" style="color: #5E5E5E;
font-style: italic;">## random walk</span></span>
<span id="cb13-8">                z <span class="ot" style="color: #003B4F;">&lt;-</span> z <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb13-9">        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb13-10">                z <span class="ot" style="color: #003B4F;">&lt;-</span> z <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb13-11">        } </span>
<span id="cb13-12">}</span>
<span id="cb13-13"><span class="fu" style="color: #4758AB;">print</span>(z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>&amp;</code> is the logical <strong>and</strong> - both conditions must be true in order to return <code>TRUE</code></p>
<p><code>|</code> is the logical <strong>or</strong> - only one condition must be true in order to return <code>TRUE</code></p>
<p>What’s the difference between using one <code>&amp;</code> or two <code>&amp;&amp;</code> (or one <code>|</code> vs.&nbsp;<code>||</code>)?</p>
<p>If you use only one <code>&amp;</code>, these are <strong>vectorized</strong> operations, meaning they will evaluate the <em>logical conditional on the vector</em>, and can <strong>return a vector</strong>, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -2 -1  0  1  2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">((<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> ((<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE  TRUE FALSE FALSE</code></pre>
</div>
</div>
<p>If you use two <code>&amp;&amp;</code>, then these are operations on single values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">(<span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">&amp;&amp;</span> (<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">&amp;&amp;</span> (<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="repeat-loops" class="level2">
<h2 class="anchored" data-anchor-id="repeat-loops"><code>repeat</code> Loops</h2>
<p><strong><code>repeat</code> initiates an infinite loop</strong> right from the start. These are <strong>not commonly used</strong> in statistical or data analysis applications, but they do have their uses.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
IMPORTANT (READ THIS AND DON’T FORGET… I’M SERIOUS… YOU WANT TO REMEMBER THIS.. FOR REALZ PLZ REMEMBER THIS)
</div>
</div>
<div class="callout-body-container callout-body">
<p>The only way to exit a <code>repeat</code> loop is to call <code>break</code>.</p>
</div>
</div>
<p>One possible paradigm might be in an iterative algorithm where you may be searching for a solution and you do not want to stop until you are close enough to the solution.</p>
<p>In this kind of situation, you often don’t know in advance how many iterations it’s going to take to get “close enough” to the solution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">x0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb25-2">tol <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">1e-8</span></span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="cf" style="color: #003B4F;">repeat</span> {</span>
<span id="cb25-5">        x1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">computeEstimate</span>()</span>
<span id="cb25-6">        </span>
<span id="cb25-7">        <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">abs</span>(x1 <span class="sc" style="color: #5E5E5E;">-</span> x0) <span class="sc" style="color: #5E5E5E;">&lt;</span> tol) {  <span class="do" style="color: #5E5E5E;
font-style: italic;">## Close enough?</span></span>
<span id="cb25-8">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb25-9">        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb25-10">                x0 <span class="ot" style="color: #003B4F;">&lt;-</span> x1</span>
<span id="cb25-11">        } </span>
<span id="cb25-12">}</span></code></pre></div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The above code will not run if the <code>computeEstimate()</code> function is not defined (I just made it up for the purposes of this demonstration).</p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The loop above is a bit <strong>dangerous</strong> because there is no guarantee it will stop.</p>
<p>You could get in a situation where the values of <code>x0</code> and <code>x1</code> oscillate back and forth and never converge.</p>
<p>Better to set a hard limit on the number of iterations by using a <code>for</code> loop and then report whether convergence was achieved or not.</p>
</div>
</div>
</section>
<section id="next-break" class="level2">
<h2 class="anchored" data-anchor-id="next-break"><code>next</code>, <code>break</code></h2>
<p><code>next</code> is used to skip an iteration of a loop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100</span>) {</span>
<span id="cb26-2">        <span class="cf" style="color: #003B4F;">if</span>(i <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">20</span>) {</span>
<span id="cb26-3">                <span class="do" style="color: #5E5E5E;
font-style: italic;">## Skip the first 20 iterations</span></span>
<span id="cb26-4">                <span class="cf" style="color: #003B4F;">next</span>                 </span>
<span id="cb26-5">        }</span>
<span id="cb26-6">        <span class="do" style="color: #5E5E5E;
font-style: italic;">## Do something here</span></span>
<span id="cb26-7">}</span></code></pre></div>
</div>
<p><code>break</code> is used to exit a loop immediately, regardless of what iteration the loop may be on.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100</span>) {</span>
<span id="cb27-2">      <span class="fu" style="color: #4758AB;">print</span>(i)</span>
<span id="cb27-3"></span>
<span id="cb27-4">      <span class="cf" style="color: #003B4F;">if</span>(i <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>) {</span>
<span id="cb27-5">              <span class="do" style="color: #5E5E5E;
font-style: italic;">## Stop loop after 20 iterations</span></span>
<span id="cb27-6">              <span class="cf" style="color: #003B4F;">break</span>  </span>
<span id="cb27-7">      }   </span>
<span id="cb27-8">}</span></code></pre></div>
</div>
<section id="another-example" class="level3">
<h3 class="anchored" data-anchor-id="another-example">Another example</h3>
<p>Both flowcharts and pseudocode can help to diagram the logic and modularity of the code:</p>
<p><img src="https://mbutler808.github.io/images/ProgramFlow_flowchart_pseudocode.png" class="img-fluid"></p>
</section>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li>Control structures like <code>if</code>, <code>while</code>, and <code>for</code> allow you to control the flow of an R program</li>
<li>Infinite loops should generally be avoided, even if (you believe) they are theoretically correct.</li>
<li>Control structures mentioned here are primarily useful for writing programs; for command-line interactive work, the “apply” functions are more useful.</li>
<li>Flow charts and pseudocode can help you diagram the logic of your program.</li>
</ul>
</section>
<section id="exercise" class="level1">
<h1>Exercise</h1>
<p>Letʻs write a program to calculate the square root of a number, following the Fortran Coloring Book:</p>
<p><img src="https://mbutler808.github.io/images/sqrtN_flowchart.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>module 5</category>
  <category>week 11</category>
  <category>control structures</category>
  <category>if else</category>
  <category>(do) while</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2023-03-28-program-flow/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 10:00:00 GMT</pubDate>
  <media:content url="https://mbutler808.github.io/images/ProgramFlow_decision_point.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Vectorization with Apply Functions</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-23-apply/index.html</link>
  <description><![CDATA[ 




<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Recognize the different types of apply functions</li>
<li>Be able to use apply functions to perform operations on objects</li>
<li>Be introduced to writing functions for apply functions</li>
<li>Have gained another skill in modular programming</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>Repeated execution on a number of objects is a common task you will have to do. For example, when you want a bootstrap confidence interval on something youʻve estimated, you will run the analysis once, on the original data, and on 100 or 1000 samples of simulated data.</p>
<p>When you know how many times you want to repeat execution, two common methods are to use <code>for loops</code> and <code>apply</code> functions. <code>apply()</code> functions are special functions that operate on lists, and come in different flavors depending on the type of object you want returned.</p>
</section>
<section id="vectorized-computations" class="level1">
<h1>Vectorized computations</h1>
<p>Many functions in R are already vectorized in that they will perform the same computation on the entire object (rather than element by element). Basic arithmetic on vectors is a good example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb1-2">y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb1-3">z <span class="ot" style="color: #003B4F;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;">+</span> y</span>
<span id="cb1-4">z </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11 12 13 14 15</code></pre>
</div>
</div>
<p>The two vectors, x and y, are added together in parallel because vector arithmetic is vectorized. This allows you to write code that is natural, fast, and easy to read.</p>
<p>If R were not vectorized (as in Fortran and C), you would have to code operations element by element like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">z <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">numeric</span>(<span class="fu" style="color: #4758AB;">length</span>(x))</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">seq_along</span>(x)) {  <span class="co" style="color: #5E5E5E;"># seq_along(x) same as 1:length(x) </span></span>
<span id="cb3-4">      z[i] <span class="ot" style="color: #003B4F;">&lt;-</span> x[i] <span class="sc" style="color: #5E5E5E;">+</span> y</span>
<span id="cb3-5">}</span>
<span id="cb3-6">z</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11 12 13 14 15</code></pre>
</div>
</div>
<p>Imagine if you had to do this each time you wanted to do anything to any objects! It would take a lot longer to get anything done. <em>Vectorization makes coding much more natural.</em></p>
<p>When you do find operations that are not vectorized, you can use <code>apply</code> functions (below). But before we get into that, letʻs build up our example with a loop.</p>
</section>
<section id="loops" class="level1">
<h1>Loops</h1>
<p><code>for</code> loops are straightforward to understand, and are a general feature of every programming language. They are necessary at times, for example when you need the results of the previous iteration for the current one. But they are usually slower in R and sometimes not very elegant (making the code harder to understand). For example, think of a very simple function that calculates the square of a number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">square <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( x ) {</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">return</span> (x<span class="sc" style="color: #5E5E5E;">*</span>x)</span>
<span id="cb5-3">  }</span></code></pre></div>
</div>
<p>If you wanted to apply it to the vector 1:10, using a for loop, it would look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">xx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vector</span>(<span class="at" style="color: #657422;">length=</span><span class="dv" style="color: #AD0000;">10</span>)   <span class="do" style="color: #5E5E5E;
font-style: italic;">## create a container for output</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;">for</span> ( i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span> ) {       <span class="do" style="color: #5E5E5E;
font-style: italic;">## step through i from 1 to 10</span></span>
<span id="cb6-4">  xx[i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">square</span>( i )    <span class="do" style="color: #5E5E5E;
font-style: italic;">## run square function for each i</span></span>
<span id="cb6-5">}</span>
<span id="cb6-6"></span>
<span id="cb6-7">xx  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
<p>This runs the <code>square()</code> function 10 times, once for each value of <code>i</code> from 1 to 10. Importantly, notice that it works by going through <code>i</code> one element at a time.</p>
</section>
<section id="apply-functions" class="level1">
<h1>Apply Functions</h1>
<p>Another way to repeatedly execute code is via the <code>apply()</code> functions. <code>apply</code> functions are unique to R, and in some situations can operate on an entire object at once, which can make them fast. This is called <strong>vectorization</strong>.</p>
<p>Letʻs try <code>sapply()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">sapply</span>( <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, square ) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
<p>There are several different <em>flavors</em> of apply functions, but they all have similar forms:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">sapply</span>( X, FUN, ...)</span></code></pre></div>
</div>
<p>Where <code>X</code> is an object, and <code>FUN</code> is a function. The function is applied to each element of <code>X</code>, often simultaneously (whether this happens simultaneously or not depends on whether the function written with vectorization in mind, you have to just try).</p>
<section id="sapply-and-lapply" class="level2">
<h2 class="anchored" data-anchor-id="sapply-and-lapply"><code>sapply</code> and <code>lapply</code></h2>
<p>Another common type is <code>lapply</code>, which operates on list objects and returns a list. <code>sapply</code> (<code>s</code> for simplify) is almost identical to <code>lapply</code>, but tries to make prettier output by returning a vector or a matrix if possible (instead of a list):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">sapply</span>( <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, square ) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1  4  9 16 25</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">lapply</span>( <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, square )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 9

[[4]]
[1] 16

[[5]]
[1] 25</code></pre>
</div>
</div>
<ul>
<li><p>There is also <code>apply()</code> which works on matrices or arrays, and has an index argument for whether it should apply the function over rows or columns.</p></li>
<li><p><code>tapply</code> to apply the function across a grouping index or treatments.</p></li>
<li><p><code>mapply</code> to apply to multiple lists simultaneously.</p></li>
<li><p><code>outer</code> which applies the function to an outer product of two arrays, and more.</p></li>
<li><p><code>aggregate</code> is actually a user-friendly wrapper for <code>tapply</code>, used to apply a function across groups.</p></li>
</ul>
<p>All of the <code>apply</code> functions work in the same way. Donʻt get overwhelmed - I mainly use <code>sapply</code> or <code>lapply</code>, and <code>aggregate</code>, and occasionally <code>apply</code> if I need to work over rows. Thatʻs all you need to remember, consult the help page when you need.</p>
</section>
</section>
<section id="example-of-calculating-summary-statistics-using-aggregate-and-merge" class="level1">
<h1>Example of calculating summary statistics using aggregate and merge</h1>
<p>Letʻs calculate the mean and standard error of sexual size dimorphism (log(male size/female size)) in <em>Anolis</em> lizards, and make a nice table:</p>
<p>The data are included in the GitHub repo for this course. There are 23 species, with each species belonging to one of five ecomorph groups. We can aggregate by mean over ecomorph groups:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">anolis <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/mbutler808/rclass/main/data/anolisSSD.csv"</span>)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;">aggregate</span>(anolis<span class="sc" style="color: #5E5E5E;">$</span>logSSD, <span class="at" style="color: #657422;">by=</span><span class="fu" style="color: #4758AB;">list</span>(anolis<span class="sc" style="color: #5E5E5E;">$</span>ecomorph), mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       Group.1         x
1  crown-giant 0.1391750
2   grass-bush 0.1437525
3        trunk 0.1467167
4  trunk-crown 0.2626575
5 trunk-ground 0.3339650
6         twig 0.0848450</code></pre>
</div>
</div>
<p>Calculate the mean and the sd by ecomorph group, and this time save them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">anolis.mean <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">aggregate</span>(anolis<span class="sc" style="color: #5E5E5E;">$</span>logSSD, <span class="at" style="color: #657422;">by=</span><span class="fu" style="color: #4758AB;">list</span>(anolis<span class="sc" style="color: #5E5E5E;">$</span>ecomorph), mean)</span>
<span id="cb17-2">anolis.sd <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">aggregate</span>(anolis<span class="sc" style="color: #5E5E5E;">$</span>logSSD, <span class="at" style="color: #657422;">by=</span><span class="fu" style="color: #4758AB;">list</span>(anolis<span class="sc" style="color: #5E5E5E;">$</span>ecomorph), sd)</span>
<span id="cb17-3">anolis.sd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       Group.1          x
1  crown-giant 0.09909567
2   grass-bush 0.06924584
3        trunk 0.02136480
4  trunk-crown 0.09968872
5 trunk-ground 0.06966130
6         twig 0.07107131</code></pre>
</div>
</div>
<p>Give the results of aggregate meaningful column names:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">names</span>(anolis.mean)   <span class="co" style="color: #5E5E5E;"># check that this is what we want to modify</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Group.1" "x"      </code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">names</span>(anolis.mean) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ecomorph"</span>, <span class="st" style="color: #20794D;">"mean"</span>)</span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;">names</span>(anolis.sd) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ecomorph"</span>, <span class="st" style="color: #20794D;">"sd"</span>)</span></code></pre></div>
</div>
<p>While we’re at it, let’s get the sample size so that we can calculate the standard error, which is the standard deviation divided by the square root of the sample size.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">anolis.N <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">aggregate</span>(anolis<span class="sc" style="color: #5E5E5E;">$</span>logSSD, <span class="at" style="color: #657422;">by=</span><span class="fu" style="color: #4758AB;">list</span>(anolis<span class="sc" style="color: #5E5E5E;">$</span>ecomorph), length)</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;">names</span>(anolis.N) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ecomorph"</span>, <span class="st" style="color: #20794D;">"N"</span>)</span></code></pre></div>
</div>
<p>To put the columns together, use <code>merge()</code>. Here there is only one matching column (ecomorph), so the <code>by=</code> is optional, but itʻs good practice:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">out <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">merge</span>(anolis.mean, anolis.sd, <span class="at" style="color: #657422;">by=</span><span class="st" style="color: #20794D;">"ecomorph"</span>)</span>
<span id="cb23-2">out <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">merge</span>(out, anolis.N, <span class="at" style="color: #657422;">by=</span><span class="st" style="color: #20794D;">"ecomorph"</span>)</span></code></pre></div>
</div>
<p>Merging works two by two so we have to do it a second time to add the <code>N</code>. There are also options for <code>by.x=</code> and <code>by.y=</code> in case your columns have different names in the two objects – you can tell R which two columns to match.</p>
<p>Now itʻs easy to add the standard error, and we can use the <code>print()</code> function to reduce the number of digits displayed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">out<span class="sc" style="color: #5E5E5E;">$</span>se <span class="ot" style="color: #003B4F;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;">$</span>sd <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">sqrt</span>(out<span class="sc" style="color: #5E5E5E;">$</span>N)</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;">print</span>(out, <span class="at" style="color: #657422;">digits=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      ecomorph  mean    sd N    se
1  crown-giant 0.139 0.099 4 0.050
2   grass-bush 0.144 0.069 4 0.035
3        trunk 0.147 0.021 3 0.012
4  trunk-crown 0.263 0.100 4 0.050
5 trunk-ground 0.334 0.070 4 0.035
6         twig 0.085 0.071 4 0.036</code></pre>
</div>
</div>
<p>Or rearrange for our paper format:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">out <span class="ot" style="color: #003B4F;">&lt;-</span> out[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ecomorph"</span>, <span class="st" style="color: #20794D;">"N"</span>, <span class="st" style="color: #20794D;">"mean"</span>, <span class="st" style="color: #20794D;">"se"</span>)]</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;">print</span>(out, <span class="at" style="color: #657422;">digits=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      ecomorph N  mean    se
1  crown-giant 4 0.139 0.050
2   grass-bush 4 0.144 0.035
3        trunk 3 0.147 0.012
4  trunk-crown 4 0.263 0.050
5 trunk-ground 4 0.334 0.035
6         twig 4 0.085 0.036</code></pre>
</div>
</div>
<p>We can save it for later as well:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">write.csv</span>(out, <span class="st" style="color: #20794D;">"anolis.summary.csv"</span>, <span class="at" style="color: #657422;">row.names=</span><span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;">saveRDS</span>(out, <span class="st" style="color: #20794D;">"anolis.summmary.rds"</span>)</span></code></pre></div>
</div>
</section>
<section id="additional-arguments-to-apply-functions" class="level1">
<h1>Additional Arguments to <code>apply</code> functions</h1>
<p>If the function needs additional arguments, you just provide them separated by commas:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">sapply</span>( X, FUN, arg1, arg2, ...)</span></code></pre></div>
</div>
<p>For example, letʻs say we wanted to sample with replacement from the vector <code>1:5</code>. To do it once, we would do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">replace=</span>T)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4 5 4 4 1</code></pre>
</div>
</div>
<p>To do it 4 times, you could do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">sapply</span>( <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>), sample, <span class="at" style="color: #657422;">replace=</span>T)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    2    1    4    3
[2,]    5    1    1    1
[3,]    1    1    4    5
[4,]    3    5    5    2
[5,]    5    2    3    3</code></pre>
</div>
</div>
<p><code>sapply</code> took the vector of fives and created a sample for each one.</p>
</section>
<section id="using-homemade-functions" class="level1">
<h1>Using homemade functions</h1>
<p>Sometimes the function that you want to run inside of an apply function is more complicated and requires many lines. Suppose you wanted to run several functions or have many lines of code. You have two choices. First, you can write a function definition and then pass it to an apply function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">myfunction <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span> (file, <span class="at" style="color: #657422;">y=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">z=</span><span class="cn" style="color: #8f5902;">NULL</span>) {</span>
<span id="cb34-2">  xx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(file)</span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;">plot</span>(xx, ...) </span>
<span id="cb34-4">  zz <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">some_other_function</span> (x,y,z)</span>
<span id="cb34-5">  ... </span>
<span id="cb34-6">  <span class="fu" style="color: #4758AB;">return</span> (out)</span>
<span id="cb34-7">  }</span>
<span id="cb34-8"><span class="fu" style="color: #4758AB;">sapply</span>(  list_of_filenames ,  myfunction, <span class="at" style="color: #657422;">y=</span>blah1, <span class="at" style="color: #657422;">z=</span>blah2) </span></code></pre></div>
</div>
<p>Alternatively you could define the function within the apply function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;">sapply</span>( input, <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb35-2">  ...lines_of_code... </span>
<span id="cb35-3">  })</span></code></pre></div>
</div>
<p>Where <code>x</code> is a single element of the <code>input</code> object, so if <code>input</code> is a vector, <code>x</code> would be one element of the vector. But if <code>input</code> is a list, it would be the first list element, etc. Apply functions work really nicely with lists, and many times they handle dataframes nicely as well.</p>
<p>To return to one of our first examples, to code the <code>square</code> function inside of the <code>sapply</code> it would simply be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">sapply</span> ( <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="cf" style="color: #003B4F;">function</span>(x)  x<span class="sc" style="color: #5E5E5E;">*</span>x )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
<p>Where <code>{}</code> around <code>{x*x}</code> are optional here because itʻs only one line. This is much cleaner and more elegant than:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">xx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vector</span>(<span class="at" style="color: #657422;">length=</span><span class="dv" style="color: #AD0000;">10</span>)   <span class="do" style="color: #5E5E5E;
font-style: italic;">## create a container for output</span></span>
<span id="cb38-2"></span>
<span id="cb38-3"><span class="cf" style="color: #003B4F;">for</span> ( i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span> ) {       <span class="do" style="color: #5E5E5E;
font-style: italic;">## step through i`s from 1 to 10</span></span>
<span id="cb38-4">  xx[i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">square</span>( i )    <span class="do" style="color: #5E5E5E;
font-style: italic;">## run square function for each i</span></span>
<span id="cb38-5">  }</span>
<span id="cb38-6"></span>
<span id="cb38-7">xx  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
<p>Furthermore, itʻs often easier to understand assigning the output object, because the entire object is returned, not filled element by element:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">xx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span> ( <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="cf" style="color: #003B4F;">function</span>(x)  x<span class="sc" style="color: #5E5E5E;">*</span>x )</span></code></pre></div>
</div>
<p>This is another advantage of thinking of the manipulation on the whole object rather than pieces of it.</p>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">Exercises</h2>
<ol type="1">
<li>Perform the following computation using an apply function.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">mylist <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vector</span>(<span class="st" style="color: #20794D;">"list"</span>)   <span class="do" style="color: #5E5E5E;
font-style: italic;">## creates a null (empty) list</span></span>
<span id="cb41-2"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>) {</span>
<span id="cb41-3">   mylist[i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x=</span><span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">3</span>), <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">3</span>)))  </span>
<span id="cb41-4">}</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Plot <code>x</code> as a function of <code>y</code> for each dataframe using an apply function.</li>
<li>Using an apply function, compute an anova on <code>x ~ y</code> on each dataframe, and save the anova output (there should be 4 of them) to a list or dataframe.</li>
<li>Write a for loop that finds the sum of the sequence of integers from 1 to 100, then accomplish the same computation with an apply function.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>module 5</category>
  <category>week 10</category>
  <category>apply</category>
  <category>lists</category>
  <category>for loops</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2023-03-23-apply/index.html</guid>
  <pubDate>Thu, 23 Mar 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Lists and For-Loops</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-23-lists-loops/index.html</link>
  <description><![CDATA[ 




<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand the special features of lists</li>
<li>Be able to access list elements and write to lists</li>
<li>Be able to construct a for loop for repeated computation</li>
<li>Have gained another skill in modular programming</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>We’ve been introduced to <em>lists</em>, but here we will gain a better understanding of some of their special features and how to use them to write more powerful code. Lists and counted loops (for loops) work really well together when you want to scale up to <strong>repeated computation</strong>.</p>
<p>Lists are commonly returned from functions because functions can only return one object. Any collection of objects can be put together into a single list. Functions (and any other R element) can be used together with for loops to improve modularity and readabilty.</p>
<p>R also has special functions that operate along lists, called <code>apply()</code> functions, which we will learn about in the next lesson.</p>
</section>
<section id="lists" class="level1">
<h1>Lists</h1>
<p>Lists in R are vectors like any other vector, but more flexible in that elements of a list can have different data types. This has at least three consequences.</p>
<ul>
<li>First any operation that you can perform on a vector can also be done on a list.</li>
<li>Second, any types of objects can be organized together into a list, which are very convenient for things like model fits, where you may want to store the model formula, the data, the coefficients, any likelihood values, and any other relevant information together into one data object.</li>
<li>Third, you can use lists as containers for containers, which can be nested indefinitely.</li>
</ul>
<p>The elements of lists can be <strong>named</strong>, either upon creation, or using the <code>names()</code> function. Naming list elements is always a good idea because it gives you another way of accessing their elements:</p>
<div class="cell">

</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">applicant <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">fullname=</span><span class="st" style="color: #20794D;">"Mickey Mouse"</span>, <span class="at" style="color: #657422;">address=</span><span class="st" style="color: #20794D;">"123 Main St."</span>,  <span class="at" style="color: #657422;">state=</span><span class="st" style="color: #20794D;">"CA"</span>)</span>
<span id="cb1-2">applicant</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fullname
[1] "Mickey Mouse"

$address
[1] "123 Main St."

$state
[1] "CA"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">names</span>(applicant) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"fullname"</span>, <span class="st" style="color: #20794D;">"address"</span>, <span class="st" style="color: #20794D;">"state"</span>)</span>
<span id="cb3-2">applicant</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fullname
[1] "Mickey Mouse"

$address
[1] "123 Main St."

$state
[1] "CA"</code></pre>
</div>
</div>
<p>We can also use all of the standard functions that work on vectors, such as the combine function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">applicant <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(applicant, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">scores=</span><span class="fu" style="color: #4758AB;">matrix</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">2</span>)))</span>
<span id="cb5-2">applicant</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fullname
[1] "Mickey Mouse"

$address
[1] "123 Main St."

$state
[1] "CA"

$scores
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10</code></pre>
</div>
</div>
<p>If we had multiple applicants, we could put them all together in a list of lists.</p>
<section id="accessing-list-elements" class="level2">
<h2 class="anchored" data-anchor-id="accessing-list-elements">Accessing list elements</h2>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
A lot of people get tripped up working with lists, but the same rules apply to lists as other objects.
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are just a couple of additional things:</p>
<ul>
<li>The double bracket, and<br>
</li>
<li>The heirarchy of objects.</li>
</ul>
<p>Once you understand that, itʻs simply applying the rules.</p>
</div>
</div>
<p><strong>List elements</strong> can be accessed with the usual operators for vectors:</p>
<ul>
<li><strong>$</strong> If the list is named</li>
<li><strong>[ ]</strong> By number or name of the list element with single brackets. Returns a list. Can use a vector of indices or names.</li>
<li><strong>[[ ]]</strong> By number or name with double brackets. Returns the element inside the list slot. Must be a single index or name.</li>
</ul>
<p><strong>By name</strong> This is why itʻs a good idea to name list elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">applicant<span class="sc" style="color: #5E5E5E;">$</span>fullname</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Mickey Mouse"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">applicant[<span class="dv" style="color: #AD0000;">1</span>]   <span class="do" style="color: #5E5E5E;
font-style: italic;">## returns a list of length one</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fullname
[1] "Mickey Mouse"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">applicant[[<span class="dv" style="color: #AD0000;">1</span>]]  <span class="do" style="color: #5E5E5E;
font-style: italic;">## returns the object within applicant[1]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Mickey Mouse"</code></pre>
</div>
</div>
<p><strong>Single brackets return lists</strong>. We can select multiple elements within single brackets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">applicant[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fullname
[1] "Mickey Mouse"

$address
[1] "123 Main St."</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">applicant[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"fullname"</span>, <span class="st" style="color: #20794D;">"address"</span>)]  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fullname
[1] "Mickey Mouse"

$address
[1] "123 Main St."</code></pre>
</div>
</div>
<p><strong>Double brackets return the element within the list slot</strong>. But we can only select one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">applicant[[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Mickey Mouse"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">applicant[[<span class="st" style="color: #20794D;">"fullname"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Mickey Mouse"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">applicant[[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>]]  <span class="do" style="color: #5E5E5E;
font-style: italic;">## cannot subset [[]] with more than one index</span></span></code></pre></div>
</div>
<p>Error in applicant[[1:2]] : subscript out of bounds Error in applicant[[1:2]] : subscript out of bounds</p>
<p><strong>Exclusion index (drops the <code>state</code> slot)</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">applicant[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fullname
[1] "Mickey Mouse"

$address
[1] "123 Main St."

$scores
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10</code></pre>
</div>
</div>
<p><strong>Accessing elements inside an object within a list</strong>: Here we want to access elements of a matrix which is in a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">applicant[<span class="dv" style="color: #AD0000;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$scores
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">applicant[[<span class="dv" style="color: #AD0000;">4</span>]][<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>]  <span class="co" style="color: #5E5E5E;"># Take the scores matrix, and grab row 2, column 1.</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">applicant[[<span class="dv" style="color: #AD0000;">4</span>]][,<span class="dv" style="color: #AD0000;">3</span>]  <span class="co" style="color: #5E5E5E;"># Take the scores matrix, and grab all of column 3.</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5 6</code></pre>
</div>
</div>
</section>
</section>
<section id="for-loops" class="level1">
<h1>For loops</h1>
<p>Because of the flexibility of lists, they are useful containers for the output of loops or other repeated operations on data. What is a loop you may ask? It is a set of code that you want to execute repeatedly. For example, you may have a large number of datasets that you want to perform the same set of operations on.</p>
<p>The easiest type of loop to understand is the <code>for</code> loop. It is a <strong>counted loop</strong>, or repeated a fixed number of times. You may be familiar with for loops (or for-next loops) from other computing languages. In R the for loop operates over a vector, once for each element of the vector. The syntax is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="cf" style="color: #003B4F;">for</span> (var <span class="cf" style="color: #003B4F;">in</span> seq) expr</span></code></pre></div>
</div>
<p>Where <code>var</code> is a variable which takes on values of the vector <code>seq</code> and evaluates a block of code <code>expr</code>. The loop is evaluated once for each value of <code>seq</code>. If we need <code>expr</code> to span more than one line, we can do this by enclosing the loop with <code>{}</code> (even if itʻs only one line itʻs often nice for readability).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>) { </span>
<span id="cb31-2">   <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"This is a for loop"</span>, i))</span>
<span id="cb31-3">}   </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "This is a for loop 1"
[1] "This is a for loop 2"
[1] "This is a for loop 3"</code></pre>
</div>
</div>
<p>It is traditional to use <code>i</code>, <code>j</code>, or <code>k</code> as the variable to remember that itʻs a counting index, but it is often convenient to use names that are meaningful to understand the code. For example, in the context of our earlier example, it might be helpful to iterate over each applicant in our applicant list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="cf" style="color: #003B4F;">for</span> (applicant <span class="cf" style="color: #003B4F;">in</span> applicant_list) expr</span></code></pre></div>
</div>
<section id="saving-loop-output-to-lists" class="level3">
<h3 class="anchored" data-anchor-id="saving-loop-output-to-lists">Saving loop output to lists</h3>
<p>Often we want to save the result or output of the code to a list. But we donʻt want to create a list with each iteration of the loop, we just want to fill the list element or add on to the list. So in order to do this, we need to create the list <strong>outside</strong> of the loop and then modify it <strong>inside</strong> the loop.</p>
<p>One strategy is to fill the list element by element using the counter <code>i</code> (note that we donʻt have to tell R how long the list is when we create it. We can just make an empty list, R will just keep adding to <code>mylist</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">mylist <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vector</span>(<span class="st" style="color: #20794D;">"list"</span>)   <span class="do" style="color: #5E5E5E;
font-style: italic;">## creates a null (empty) list</span></span>
<span id="cb34-2">mylist</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>list()</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>) {</span>
<span id="cb36-2">   mylist[i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x=</span><span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">3</span>), <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">3</span>)))  <span class="do" style="color: #5E5E5E;
font-style: italic;">## why does this have to be a list object?</span></span>
<span id="cb36-3">}</span>
<span id="cb36-4">mylist</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
           x          y
1 -1.5891006  1.0447945
2 -0.9289017  0.7709087
3  0.3724301 -0.4045960

[[2]]
           x          y
1  0.1793252 -0.1167686
2  0.8126721  0.4296348
3 -1.6203481 -0.8756523

[[3]]
           x          y
1 -0.9860967 -0.3711503
2  0.8975715 -0.4703146
3 -1.0199470  1.2916043

[[4]]
          x          y
1  1.359747 -0.9601006
2  1.236366 -0.6644286
3 -1.495295 -0.3078295</code></pre>
</div>
</div>
<p>This code does the same thing, but uses the <code>c()</code> function to add on to <code>mylist</code> (what happens when you add on to a null list?):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">mylist <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vector</span>(<span class="st" style="color: #20794D;">"list"</span>)   <span class="do" style="color: #5E5E5E;
font-style: italic;">## creates a null (empty) list</span></span>
<span id="cb38-2"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>) {</span>
<span id="cb38-3">   mylist <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(mylist, <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x=</span><span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">3</span>), <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">3</span>))))</span>
<span id="cb38-4">}</span>
<span id="cb38-5">mylist</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
           x          y
1 -1.4285965 -0.6116601
2  1.4485142 -0.3044112
3 -0.1127297 -0.2419247

[[2]]
          x          y
1 0.2545869 -0.7306861
2 0.1032878  1.1283951
3 2.0754615 -0.1501652

[[3]]
           x          y
1 -0.3170322 -0.3139040
2 -1.0130806 -0.4275128
3  0.2439555  0.1655069

[[4]]
          x         y
1 0.8218255 0.9689341
2 0.5789347 0.1230913
3 1.8513586 1.7753243</code></pre>
</div>
</div>
</section>
<section id="reshaping-lists" class="level3">
<h3 class="anchored" data-anchor-id="reshaping-lists">Reshaping lists</h3>
<p>You often want to reshape list output in scientific programming. For example, you may fit models many times on many permutations of your data, for example, and you want to flatten your list and make a dataframe. When you know that your output is regular, it is often convenient to use the <code>unlist()</code> function. Unlist will also work on dataframes, because you know, dataframes are lists of vectors all of the same length.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">lm.out <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>( mylist[[<span class="dv" style="color: #AD0000;">1</span>]]<span class="sc" style="color: #5E5E5E;">$</span>x  <span class="sc" style="color: #5E5E5E;">~</span> mylist[[<span class="dv" style="color: #AD0000;">1</span>]]<span class="sc" style="color: #5E5E5E;">$</span>y )  <span class="do" style="color: #5E5E5E;
font-style: italic;">## calculate a linear regression on dataframe 1 x as a function of y</span></span>
<span id="cb40-2">aov.out <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">anova</span>(lm.out)   <span class="do" style="color: #5E5E5E;
font-style: italic;">## run anova, save to aov.out</span></span>
<span id="cb40-3">aov.out</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Analysis of Variance Table

Response: mylist[[1]]$x
              Df Sum Sq Mean Sq F value Pr(&gt;F)
mylist[[1]]$y  1 2.2984  2.2984   1.242 0.4656
Residuals      1 1.8506  1.8506               </code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;">unlist</span>(aov.out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Df1       Df2   Sum Sq1   Sum Sq2  Mean Sq1 
1.0000000 1.0000000 2.2983557 1.8505623 2.2983557 
 Mean Sq2  F value1  F value2   Pr(&gt;F)1   Pr(&gt;F)2 
1.8505623 1.2419769        NA 0.4655777        NA </code></pre>
</div>
</div>
</section>
<section id="exercises" class="level3">
<h3 class="anchored" data-anchor-id="exercises">Exercises</h3>
<ol type="1">
<li>Take mylist above and name its elements (the dataframes).<br>
</li>
<li>Write another <code>for</code> loop to return the maximum value of x and y in each dataframe. How can you make the code flexible to make it work if mylist has a different length?</li>
<li>Write a <code>for</code> loop to loop over <code>mylist</code>. Within this loop, for each dataset compute an anova on <code>x ~ y</code>, <code>unlist</code> the anova output, and add as a row to a final dataframe.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>module 5</category>
  <category>week 10</category>
  <category>lists</category>
  <category>for loops</category>
  <category>programming</category>
  <guid>https://mbutler808.github.io/posts/2023-03-23-lists-loops/index.html</guid>
  <pubDate>Thu, 23 Mar 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing your own functions</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-21-functions/index.html</link>
  <description><![CDATA[ 




<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand the components of a function</li>
<li>Be able to write your own functions</li>
<li>Understand the scope of variables within functions</li>
<li>Understand methods dispatch</li>
<li>Have a better understanding of how packages work</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>We’ve learned how to write good scripts and debug at the console. You may have noticed that you sometimes have to do the same things over and over again. And you find yourself cutting and pasting bits of code and making minor changes to it. This is a situation where writing your own <em>function</em> is a big help.</p>
<p>Functions help in several ways. Once you perfect a bit of code, they help achieve these goals of good programming by writing code that is:</p>
<ul>
<li>Reusable and Generic<br>
</li>
<li>Modular<br>
</li>
<li>Easy to Maintain</li>
</ul>
<p>When do you want to write a function? Any time you find yourself cutting and pasting bits of your code (more than once or twice). Think ahead to making your function <em>reusable</em>.</p>
</section>
<section id="functions-are-wrappers-for-code-that-you-want-to-reuse" class="level1">
<h1>Functions are wrappers for code that you want to reuse</h1>
<p>Functions are just bits of code that you want to reuse. You can even build up your own function library in a script like <code>myfunctions.R</code> which you can source with every script you write. So in this way, you can save yourself a lot of trouble by designing and maintaining a <strong>tight</strong> function library.</p>
<p>A function is very easy to define. You need a name for your function, some arguments (the input), a valid R statement (i.e., some code to run), and output to return. You then put it together in this following format:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">my_function_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( argument )  statement</span></code></pre></div>
</div>
<p>The only things that are actually required are the name of your function, and the word <code>function</code> followed by parentheses. Arguments are optional (well so are the statements, but what would be the point of that?).</p>
<p>Here is a very simple function to calculate the square of a value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mysq <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( x ) {   <span class="co" style="color: #5E5E5E;"># function name is mysq</span></span>
<span id="cb2-2">  x<span class="sc" style="color: #5E5E5E;">*</span>x      <span class="co" style="color: #5E5E5E;"># the function will return the square of x</span></span>
<span id="cb2-3">}</span></code></pre></div>
</div>
<p>Once you run the function definition through the console, your function will be stored in RAM. Then you can then use your function in the normal way that you use functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">mysq</span>(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
</div>
<p>You can have multiple lines of R code to run, and you can even have functions within functions.The output from the function (the return value) is the last value computed. It is often best practice to explicitly use the <code>return</code> function as in the code below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mysq <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( x ) {</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">plot</span>( x, x<span class="sc" style="color: #5E5E5E;">*</span>x, <span class="at" style="color: #657422;">ylab=</span><span class="st" style="color: #20794D;">"Square of x"</span>)   <span class="co" style="color: #5E5E5E;"># plot x and x*x on the y axis</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">return</span> (x<span class="sc" style="color: #5E5E5E;">*</span>x)    <span class="co" style="color: #5E5E5E;"># return the square of x</span></span>
<span id="cb5-4">  }</span>
<span id="cb5-5">  </span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;">mysq</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>)  </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-21-functions/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
</section>
<section id="arguments" class="level1">
<h1>Arguments</h1>
<p>Generally speaking, arguments are included in functions because you might want to change them. Things that stay the same are usually hard-coded into the function. But what if you want to change it sometimes but not others?In our little example, what if you wanted to be able to change the label on the y-axis sometimes, but most of the time you wanted it to just say “Square of x”?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">mysq <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( x, <span class="at" style="color: #657422;">yylab=</span><span class="st" style="color: #20794D;">"Square of x"</span> ) {   <span class="co" style="color: #5E5E5E;"># default argument for the y-label</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">plot</span>( x, x<span class="sc" style="color: #5E5E5E;">*</span>x, <span class="at" style="color: #657422;">ylab=</span>yylab) </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">return</span> (x<span class="sc" style="color: #5E5E5E;">*</span>x)    </span>
<span id="cb7-5"></span>
<span id="cb7-6">  }</span>
<span id="cb7-7">  </span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">mysq</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">yylab=</span><span class="st" style="color: #20794D;">"X times X"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-21-functions/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
<p>What happens if you just run the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">mysq</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-21-functions/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
<p>These arguments with default values are therefore <em>optional</em>. Because they will run just fine even if you don’t put anything for them. Whenever I write functions, I try to make as many default arguments as I can so that I can run them with minimal brain power. When you look at it 6 months later, you don’t want to have to reconstruct <em>why you wrote it in the first place just to make it go</em>.</p>
<p>Another cute trick is that if you don’t want to have anything as your default value, but you still want to have the option to change it, set the default to <code>NULL</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">mysq <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( x, <span class="at" style="color: #657422;">yylab=</span><span class="cn" style="color: #8f5902;">NULL</span>) {   <span class="co" style="color: #5E5E5E;"># default arg is no value for the y-label, </span></span>
<span id="cb11-2"></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">plot</span>( x, x<span class="sc" style="color: #5E5E5E;">*</span>x, <span class="at" style="color: #657422;">ylab=</span>yylab) <span class="co" style="color: #5E5E5E;"># but you can specify it if you want to.</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">return</span> (x<span class="sc" style="color: #5E5E5E;">*</span>x)    </span>
<span id="cb11-5"></span>
<span id="cb11-6">  }</span>
<span id="cb11-7">  </span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;">mysq</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">yylab=</span><span class="st" style="color: #20794D;">"X times X"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-21-functions/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
</section>
<section id="order-of-arguments" class="level1">
<h1>Order of arguments</h1>
<p>You may have noticed that you can run a function with or without naming the arguments. For example (here I have supressed printing the figure in quarto):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">mysq</span>(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">mysq</span>(<span class="at" style="color: #657422;">x=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
</div>
<p>work just the same.</p>
<p>The reason is that R will assume that if you don’t name the arguments, they are <em>in the same order</em> as in the function definition. Therefore,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">mysq</span>( <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="st" style="color: #20794D;">"Squares of prime numbers"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1  9 25 49</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">mysq</span>( <span class="at" style="color: #657422;">yylab =</span> <span class="st" style="color: #20794D;">"Squares of prime numbers"</span>, <span class="at" style="color: #657422;">x=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1  9 25 49</code></pre>
</div>
</div>
<p>Are the same. Another way to put this, if you don’t want to worry about the order that the arguments are defined in, <em>always use</em> the <code>names=</code>.</p>
</section>
<section id="arbitrary-numbers-of-arguments" class="level1">
<h1>Arbitrary numbers of arguments</h1>
<p>R is very flexible with its arguments. You can also have an arbitrary number of arguments by adding <code>...</code> This is often used to pass additional arguments to <code>plot()</code>, such as below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">myfun <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y,  ...) {</span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">plot</span>(x, y, ...)</span>
<span id="cb21-3">  }</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;"># optional args color and line plot are passed to plot()</span></span>
<span id="cb21-6"><span class="fu" style="color: #4758AB;">myfun</span>( <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>), <span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"red"</span>, <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"l"</span>)   </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-21-functions/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Note: We did not create arguments for color or type in <code>myfun</code>, but these are arguments for <code>plot</code>, so the <code>...</code> in the function definition is like the expandable suitcase that allows us to pass anything through. This is for the <code>plot()</code> function, which has many optional arguments, but it can be used for anything.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">myfun</span>( <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>), <span class="at" style="color: #657422;">cex=</span><span class="dv" style="color: #AD0000;">3</span>)   <span class="co" style="color: #5E5E5E;"># optional arg for point size passed to plot()</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-21-functions/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Another common place where variable numbers of arguments comes up is in database queries, where you may want to run a search on a number of terms.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">query <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( ... ) {</span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">paste</span>( ... )</span>
<span id="cb23-3">  }</span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="fu" style="color: #4758AB;">query</span>( <span class="st" style="color: #20794D;">"cat"</span>, <span class="st" style="color: #20794D;">"dog"</span>, <span class="st" style="color: #20794D;">"rabbit"</span>)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "cat dog rabbit"</code></pre>
</div>
</div>
<p>Or any situation where you are just not sure how many inputs you will have. For example, you could have a list builder (this is a real function! no joke):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">addlist <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( ... ) {</span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;">list</span>( ... )</span>
<span id="cb25-3">  }</span>
<span id="cb25-4"></span>
<span id="cb25-5">metadat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">addlist</span> ( <span class="at" style="color: #657422;">dataset =</span> <span class="st" style="color: #20794D;">"myeco"</span>, <span class="at" style="color: #657422;">date=</span><span class="st" style="color: #20794D;">"Jan 20, 2023"</span>)</span>
<span id="cb25-6">metadat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$dataset
[1] "myeco"

$date
[1] "Jan 20, 2023"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">addlist</span> (<span class="at" style="color: #657422;">ind=</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">names=</span>letters[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>], <span class="at" style="color: #657422;">eco=</span><span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>) )  </span>
<span id="cb27-2">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$ind
 [1]  1  2  3  4  5  6  7  8  9 10

$names
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j"

$eco
 [1] -0.9572213 -0.3388834 -0.9815275  1.5341439 -0.3236124 -2.0562527
 [7] -0.5141652 -0.8511749 -0.3397510 -0.5002090</code></pre>
</div>
</div>
<p>This may seem like a silly example (and it is), but it is kept simple so you can see what’s going on. These default arguments are very useful for making your functions <strong>flexible</strong> so that they can be more <em>generic</em> and <em>reusable</em> for many purposes.</p>
</section>
<section id="return-value" class="level1">
<h1>Return value</h1>
<p>As you have seen in the examples, R will return the last value computed (by default) or whatever you specify in the <code>return()</code> function. One thing that is a little peculiar to R is that you can only return <strong>one</strong> and <strong>only one</strong> object. So what do you do if you have several pieces of information you want returned? Use a list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">mysq <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( x, <span class="at" style="color: #657422;">yylab=</span><span class="st" style="color: #20794D;">"Square of x"</span> ) {   <span class="co" style="color: #5E5E5E;"># default argument for the y-label</span></span>
<span id="cb29-2"></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;">plot</span>( x, x<span class="sc" style="color: #5E5E5E;">*</span>x, <span class="at" style="color: #657422;">ylab=</span>yylab)</span>
<span id="cb29-4">  output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>( <span class="at" style="color: #657422;">input=</span>x, <span class="at" style="color: #657422;">output=</span>x<span class="sc" style="color: #5E5E5E;">*</span>x )   </span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;">return</span> (output)     </span>
<span id="cb29-6"></span>
<span id="cb29-7">  }</span></code></pre></div>
</div>
<p>This is in fact what many model-fitting packages do. They return a list with the inputs, any fitted parameters, and model fit statistics, as well as characteristics of the objects such as names and factor levels, etc.</p>
</section>
<section id="looking-inside-r-functions-that-are-inside-packages" class="level1">
<h1>Looking inside R: functions that are inside packages</h1>
<p>If you want to look at how any particular function in R is written – you can! R is open-source. You just type the name of the function with no parentheses:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (object, ...) 
UseMethod("summary")
&lt;bytecode: 0x7fefc0814670&gt;
&lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>You can see that it is a generic function, and that it uses different <code>methods</code> depending on the <code>class</code> of the object.</p>
<p>Here are all the methods that are defined for <code>summary</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">methods</span>(<span class="st" style="color: #20794D;">'summary'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] summary.aov                         summary.aovlist*                   
 [3] summary.aspell*                     summary.check_packages_in_dir*     
 [5] summary.connection                  summary.data.frame                 
 [7] summary.Date                        summary.default                    
 [9] summary.ecdf*                       summary.factor                     
[11] summary.glm                         summary.infl*                      
[13] summary.lm                          summary.loess*                     
[15] summary.manova                      summary.matrix                     
[17] summary.mlm*                        summary.nls*                       
[19] summary.packageStatus*              summary.POSIXct                    
[21] summary.POSIXlt                     summary.ppr*                       
[23] summary.prcomp*                     summary.princomp*                  
[25] summary.proc_time                   summary.rlang_error*               
[27] summary.rlang_message*              summary.rlang_trace*               
[29] summary.rlang_warning*              summary.rlang:::list_of_conditions*
[31] summary.srcfile                     summary.srcref                     
[33] summary.stepfun                     summary.stl*                       
[35] summary.table                       summary.tukeysmooth*               
[37] summary.vctrs_sclr*                 summary.vctrs_vctr*                
[39] summary.warnings                   
see '?methods' for accessing help and source code</code></pre>
</div>
</div>
<p>Here’s how we find out what’s inside <code>summary.factor</code> for example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">summary.factor</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (object, maxsum = 100L, ...) 
{
    nas &lt;- is.na(object)
    ll &lt;- levels(object)
    if (ana &lt;- any(nas)) 
        maxsum &lt;- maxsum - 1L
    tbl &lt;- table(object)
    tt &lt;- c(tbl)
    names(tt) &lt;- dimnames(tbl)[[1L]]
    if (length(ll) &gt; maxsum) {
        drop &lt;- maxsum:length(ll)
        o &lt;- sort.list(tt, decreasing = TRUE)
        tt &lt;- c(tt[o[-drop]], `(Other)` = sum(tt[o[drop]]))
    }
    if (ana) 
        c(tt, `NA's` = sum(nas))
    else tt
}
&lt;bytecode: 0x7fefba4bf1d0&gt;
&lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>Note: <strong>Internal</strong> functions are <em>hidden</em> inside the namespace of a package – the programmer has chosen to not make it available to the global environment. To find these, use <code>getAnywhere('functionname')</code> ha!</p>
</section>
<section id="scope" class="level1">
<h1>Scope</h1>
<p>It is important to know that when you write a function, everything that happens inside the function is local in scope. It’s like a big family secret –</p>
<blockquote class="blockquote">
<p>everything that is said in the family stays in the family.</p>
</blockquote>
<p>If you try to go talking about it to the outside world, no one will know what you are talking about. For example, suppose you wrote a function with some internal variables like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">myfunc <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( fattony, littlejimmy) {</span>
<span id="cb36-2"></span>
<span id="cb36-3">  canolis <span class="ot" style="color: #003B4F;">&lt;-</span> fattony<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">+</span> littlejimmy</span>
<span id="cb36-4">  <span class="fu" style="color: #4758AB;">return</span>(canolis)</span>
<span id="cb36-5">}</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="fu" style="color: #4758AB;">myfunc</span>( <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span> )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 14</code></pre>
</div>
</div>
<p>If we try type the following on the command line, we will get an error <code>... object 'canolis' not found</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">canolis</span></code></pre></div>
</div>
<p>Even though you ran the function, you can’t <em>ask R how many canolis you need</em> because <em>what’s created in the function stays in the function</em>. When the function is over, poof! It’s gone. That’s because the objects used within the function are <em>local in scope</em> and not available to the global environment.</p>
<p>Of course, global variables are available to use inside of functions, just as family members are aware of what’s going on in the outside world. So for example, it is perfectly valid to use <code>pi</code> or anything you’ve defined previously in the global environment inside a function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">myfunc <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>( fattony, littlejimmy) {</span>
<span id="cb39-2"></span>
<span id="cb39-3">  canolis <span class="ot" style="color: #003B4F;">&lt;-</span> fattony<span class="sc" style="color: #5E5E5E;">*</span>pi <span class="sc" style="color: #5E5E5E;">+</span> littlejimmy<span class="sc" style="color: #5E5E5E;">+</span>littlebit</span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;">return</span>( <span class="fu" style="color: #4758AB;">round</span>(canolis) )</span>
<span id="cb39-5">}</span>
<span id="cb39-6"></span>
<span id="cb39-7">littlebit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb39-8"><span class="fu" style="color: #4758AB;">myfunc</span>( <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span> )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 21</code></pre>
</div>
</div>
<p>The code above worked because <code>littlebit</code> was defined prior to running our function. But you can see that it’s often a good idea to actually pass into a function anything that is needed to make it go.</p>
<p>So you may be wondering why it works this way? Well in general, in most advanced programming languages,</p>
<blockquote class="blockquote">
<p>the objects within functions are local in scope. This is to make it easier to program.</p>
</blockquote>
<p>If there is a clean separation between what goes on inside a function and what is outside of it, then you can write functions without worrying about every possibility regarding what could happen. You only have to worry about what is happening inside your little function. That’s what helps to make it modular and extensible – so your functions can play nice with other codes.</p>
</section>
<section id="search-paths-and-environment" class="level1">
<h1>Search Paths and Environment</h1>
<p>Remember what we were saying about functions in R are objects? So if we look at our workspace, our functions should be there:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;">ls</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "addlist"   "dat"       "littlebit" "metadat"   "myfun"     "myfunc"   
[7] "mysq"      "query"    </code></pre>
</div>
</div>
<p>And sure enough they are! As well as all of our data frames, lists, and other objects that we created. Now I should note that it is possible to write a function in R <strong>with the same name</strong> as a built-in function in R. For example, if for some crazy reason, we wanted to redefine the <code>mean</code> function, we can!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">mean <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(...) {</span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;">return</span> (<span class="st" style="color: #20794D;">"dirty harry"</span>)</span>
<span id="cb43-3">  }</span>
<span id="cb43-4">  </span>
<span id="cb43-5"><span class="fu" style="color: #4758AB;">mean</span>( <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span> )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "dirty harry"</code></pre>
</div>
</div>
<p>What happened? Well we wrote our own function for <code>mean</code>. Why is R only returning our new function, an not the built-in one?</p>
<blockquote class="blockquote">
<p>Well, any object that we create (including our own functions) are in the <strong>Global Environment</strong>.</p>
</blockquote>
<p>Whereas functions in packages are in their further down the search path. R knows where things are by the order that they are attached. The global environment is first (containing any user-created objects), followed by attached packages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">search</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] ".GlobalEnv"        "tools:quarto"      "tools:quarto"     
 [4] "package:stats"     "package:graphics"  "package:grDevices"
 [7] "package:utils"     "package:datasets"  "package:methods"  
[10] "Autoloads"         "package:base"     </code></pre>
</div>
</div>
<p>The function <code>mean()</code> is in the <code>base</code> package, which is all the way at the end. So when we type <code>mean()</code> R will first look to see if there is any function by that name in our global environment, then in any of the other attached packages before finally finding it in <code>base</code>. Needless to say, it’s very confusing (and potentially dangerous!) to name objects by the same name as R key words or built-in functions. Don’t do it!</p>
<p>If you need to get rid of the custom build mean function, just type <code>rm(mean)</code> at the console.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;">rm</span>(mean)</span>
<span id="cb47-2"><span class="fu" style="color: #4758AB;">mean</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5.5</code></pre>
</div>
</div>
<p>Whew! Or just shut down and restart R. It’s a clean slate after that! (Don’t worry, you can’t break R ;).</p>
</section>
<section id="exercises" class="level1">
<h1>Exercises</h1>
<ol type="1">
<li>Write your own function for calculating a mean of a vector, using only the <code>sum()</code> and the <code>length()</code> functions. The input should be a vector, and the output is the mean.</li>
<li>Write your own function for calculating the standard error. You can use the <code>sd()</code>, <code>sqrt()</code>, and the <code>length()</code> functions. The input should be a vector of values.</li>
<li>Go back to some of the class data Iʻve given you. Write a function that will read in the irradiance data, trim it to wavelengths between 300 and 750 nm, and plot the data. Then use that function to read in files for the different directions: <code>up</code>, <code>for</code> (forward), <code>left</code>, and <code>right</code>: <code>20070725\_01upirr.txt</code>, <code>20070725\_01forirr.txt</code>, <code>20070725\_01leftirr.txt</code>, <code>20070725\_01rightirr.txt</code>. Your function should take as input just the file name. Write a script that defines the function and then calls the function four times, once for each file.</li>
<li>Now take the function you just made, and add optional arguments for the cut off values 300 and 750. You may want to trim the data to different values. Try trimming it to different values and see what happens using your new function.</li>
</ol>


</section>

 ]]></description>
  <category>module 4</category>
  <category>week 8</category>
  <category>programming</category>
  <category>functions</category>
  <category>methods</category>
  <category>scope</category>
  <guid>https://mbutler808.github.io/posts/2023-03-21-functions/index.html</guid>
  <pubDate>Tue, 21 Mar 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Joining data with dplyr</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-09-joining-data/index.html</link>
  <description><![CDATA[ 




<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/relational-data" class="uri">https://r4ds.had.co.nz/relational-data</a></li>
<li><a href="https://rafalab.github.io/dsbook/joining-tables" class="uri">https://rafalab.github.io/dsbook/joining-tables</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-08-joining-data-in-r/" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-08-joining-data-in-r/</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics" class="uri">https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics</a></li>
<li><a href="https://r4ds.had.co.nz/relational-data" class="uri">https://r4ds.had.co.nz/relational-data</a></li>
<li><a href="https://rafalab.github.io/dsbook/joining-tables" class="uri">https://rafalab.github.io/dsbook/joining-tables</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to define relational data and keys</li>
<li>Be able to define the three types of join functions for relational data</li>
<li>Be able to implement mutational join functions</li>
</ul>
</div>
</div>
<section id="new-packages" class="level2">
<h2 class="anchored" data-anchor-id="new-packages">New Packages</h2>
<p>You will have to install if you donʻt already have them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"gapminder"</span>)  <span class="co" style="color: #5E5E5E;"># a dataset package</span></span></code></pre></div>
</div>
</section>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>Last time we talked about tidy data. One common issue is that people sometimes use column names to store data. For example take a look at this built-in dataset that comes with <code>tidyr</code> on <strong>religion and income survey data</strong> with the number of respondents with income range in column name.</p>
</section>
<section id="joining-data-a.k.a.-merging" class="level1">
<h1>Joining data (a.k.a. Merging)</h1>
<section id="relational-data" class="level2">
<h2 class="anchored" data-anchor-id="relational-data">Relational data</h2>
<p>Data analyses rarely involve only a single table of data.</p>
<p>Typically you have many tables of data, and you <strong>must combine the datasets</strong> to answer the questions that you are interested in. Some examples include morphology and ecology data on the same species, or sequence data and metadata.</p>
<p>Collectively, <strong>multiple tables of data are called relational data</strong> because it is the <em>relations</em>, not just the individual datasets, that are important.</p>
<p>Relations are <strong>always defined between a pair of tables</strong>. All other relations are built up from this simple idea: the relations of three or more tables are always a property of the relations between each pair.</p>
<p>Sometimes both elements of a pair can be in the same table! This is needed if, for example, you have a table of people, and each person has a reference to their parents, or if you have nodes in a phylogeny and each is linked to an ancestral node.</p>
<p>Relational data are combined with <strong>merges or joins</strong>.</p>
</section>
<section id="example-with-merge" class="level2">
<h2 class="anchored" data-anchor-id="example-with-merge">Example with <code>merge()</code></h2>
<p>Letʻs use the <code>geospiza</code> data from the <code>geiger</code> package to practice merging with the base R <code>merge()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">require</span>(geiger)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">data</span>(geospiza)   <span class="co" style="color: #5E5E5E;"># load the dataset into the workspace</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">ls</span>()               <span class="co" style="color: #5E5E5E;"># list the objects in the workspace</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "geospiza"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">geospiza</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$geospiza.tree

Phylogenetic tree with 14 tips and 13 internal nodes.

Tip labels:
  fuliginosa, fortis, magnirostris, conirostris, scandens, difficilis, ...

Rooted; includes branch lengths.

$geospiza.data
                wingL  tarsusL  culmenL    beakD   gonysW
magnirostris 4.404200 3.038950 2.724667 2.823767 2.675983
conirostris  4.349867 2.984200 2.654400 2.513800 2.360167
difficilis   4.224067 2.898917 2.277183 2.011100 1.929983
scandens     4.261222 2.929033 2.621789 2.144700 2.036944
fortis       4.244008 2.894717 2.407025 2.362658 2.221867
fuliginosa   4.132957 2.806514 2.094971 1.941157 1.845379
pallida      4.265425 3.089450 2.430250 2.016350 1.949125
fusca        3.975393 2.936536 2.051843 1.191264 1.401186
parvulus     4.131600 2.973060 1.974420 1.873540 1.813340
pauper       4.232500 3.035900 2.187000 2.073400 1.962100
Pinaroloxias 4.188600 2.980200 2.311100 1.547500 1.630100
Platyspiza   4.419686 3.270543 2.331471 2.347471 2.282443
psittacula   4.235020 3.049120 2.259640 2.230040 2.073940

$phy

Phylogenetic tree with 14 tips and 13 internal nodes.

Tip labels:
  fuliginosa, fortis, magnirostris, conirostris, scandens, difficilis, ...

Rooted; includes branch lengths.

$dat
                wingL  tarsusL  culmenL    beakD   gonysW
magnirostris 4.404200 3.038950 2.724667 2.823767 2.675983
conirostris  4.349867 2.984200 2.654400 2.513800 2.360167
difficilis   4.224067 2.898917 2.277183 2.011100 1.929983
scandens     4.261222 2.929033 2.621789 2.144700 2.036944
fortis       4.244008 2.894717 2.407025 2.362658 2.221867
fuliginosa   4.132957 2.806514 2.094971 1.941157 1.845379
pallida      4.265425 3.089450 2.430250 2.016350 1.949125
fusca        3.975393 2.936536 2.051843 1.191264 1.401186
parvulus     4.131600 2.973060 1.974420 1.873540 1.813340
pauper       4.232500 3.035900 2.187000 2.073400 1.962100
Pinaroloxias 4.188600 2.980200 2.311100 1.547500 1.630100
Platyspiza   4.419686 3.270543 2.331471 2.347471 2.282443
psittacula   4.235020 3.049120 2.259640 2.230040 2.073940</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">geo <span class="ot" style="color: #003B4F;">&lt;-</span> geospiza<span class="sc" style="color: #5E5E5E;">$</span>dat  <span class="co" style="color: #5E5E5E;"># save the morphometric data as geo</span></span></code></pre></div>
</div>
<p>This is a 5 column dataframe. Letʻs take just the <code>tarsusL</code> data to build our example dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">tarsusL <span class="ot" style="color: #003B4F;">&lt;-</span> geo[,<span class="st" style="color: #20794D;">"tarsusL"</span>]  <span class="co" style="color: #5E5E5E;"># geo is a matrix, select tarsusL column</span></span>
<span id="cb7-2">geot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(tarsusL, <span class="st" style="color: #20794D;">"ecology"</span> <span class="ot" style="color: #003B4F;">=</span> LETTERS[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(tarsusL)])</span></code></pre></div>
</div>
<p>Often we will be merging data that donʻt perfectly match. Some parts of the data will be missing, for example we may only have ecology data for the first five species. The question is what do you want the merge behavior to be?</p>
<p>The default is to drop all observations that are not in BOTH datasets. Here we merge the original <code>geo</code> with only the first five rows of <code>geot</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">                    <span class="co" style="color: #5E5E5E;"># only maches to both datasets are included</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">merge</span>(<span class="at" style="color: #657422;">x=</span>geo[,<span class="st" style="color: #20794D;">"tarsusL"</span>], <span class="at" style="color: #657422;">y=</span>geot[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, ], <span class="at" style="color: #657422;">by=</span> <span class="st" style="color: #20794D;">"row.names"</span>)    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Row.names        x  tarsusL ecology
1  conirostris 2.984200 2.984200       B
2   difficilis 2.898917 2.898917       C
3       fortis 2.894717 2.894717       E
4 magnirostris 3.038950 3.038950       A
5     scandens 2.929033 2.929033       D</code></pre>
</div>
</div>
<p>If we want to keep everything, use the <code>all=T</code> flag:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">                    <span class="co" style="color: #5E5E5E;"># all species in both datasets are included</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">merge</span>(<span class="at" style="color: #657422;">x=</span>geo[,<span class="st" style="color: #20794D;">"tarsusL"</span>], <span class="at" style="color: #657422;">y=</span>geot[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>,], <span class="at" style="color: #657422;">by=</span> <span class="st" style="color: #20794D;">"row.names"</span>, <span class="at" style="color: #657422;">all=</span>T)    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Row.names        x  tarsusL ecology
1   conirostris 2.984200 2.984200       B
2    difficilis 2.898917 2.898917       C
3        fortis 2.894717 2.894717       E
4    fuliginosa 2.806514       NA    &lt;NA&gt;
5         fusca 2.936536       NA    &lt;NA&gt;
6  magnirostris 3.038950 3.038950       A
7       pallida 3.089450       NA    &lt;NA&gt;
8      parvulus 2.973060       NA    &lt;NA&gt;
9        pauper 3.035900       NA    &lt;NA&gt;
10 Pinaroloxias 2.980200       NA    &lt;NA&gt;
11   Platyspiza 3.270543       NA    &lt;NA&gt;
12   psittacula 3.049120       NA    &lt;NA&gt;
13     scandens 2.929033 2.929033       D</code></pre>
</div>
</div>
<p>There is also <code>all.x</code> which keeps all values of the first data table but drops non-matching rows of the second table, and <code>all.y</code> which keeps all of the second.</p>
<p>The results of <code>merge</code> are sorted by default on the sort key. To turn it off:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">geo <span class="ot" style="color: #003B4F;">&lt;-</span> geo[<span class="fu" style="color: #4758AB;">rev</span>(<span class="fu" style="color: #4758AB;">rownames</span>(geo)), ]   <span class="co" style="color: #5E5E5E;"># reverse the species order of geo</span></span>
<span id="cb12-2">                     <span class="co" style="color: #5E5E5E;"># merge on geo first, then geot</span></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;">merge</span>(<span class="at" style="color: #657422;">x=</span>geo[,<span class="st" style="color: #20794D;">"tarsusL"</span>], <span class="at" style="color: #657422;">y=</span>geot[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, ], <span class="at" style="color: #657422;">by=</span> <span class="st" style="color: #20794D;">"row.names"</span>, <span class="at" style="color: #657422;">sort=</span>F)   </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Row.names        x  tarsusL ecology
1       fortis 2.894717 2.894717       E
2     scandens 2.929033 2.929033       D
3   difficilis 2.898917 2.898917       C
4  conirostris 2.984200 2.984200       B
5 magnirostris 3.038950 3.038950       A</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">                     <span class="co" style="color: #5E5E5E;"># geot first, then geo</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">merge</span>(<span class="at" style="color: #657422;">x=</span>geot[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>,], <span class="at" style="color: #657422;">y=</span>geo[,<span class="st" style="color: #20794D;">"tarsusL"</span>], <span class="at" style="color: #657422;">by=</span> <span class="st" style="color: #20794D;">"row.names"</span>, <span class="at" style="color: #657422;">sort=</span>F)   </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Row.names  tarsusL ecology        y
1 magnirostris 3.038950       A 3.038950
2  conirostris 2.984200       B 2.984200
3   difficilis 2.898917       C 2.898917
4     scandens 2.929033       D 2.929033
5       fortis 2.894717       E 2.894717</code></pre>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>In a <code>merge</code>, the non-key columns are copied over into the new table.</li>
</ul>
</div>
</div>
<p>Check out the help page for <code>?merge</code> for more info.</p>
</section>
</section>
<section id="keys" class="level1">
<h1>Keys</h1>
<p>The <strong>variables used to connect each pair of tables</strong> are called <strong>keys</strong>. A key is a variable (or set of variables) that <strong>uniquely identifies an observation</strong>. In simple cases, a single variable is sufficient to identify an observation.</p>
<p>In the example above the key was the <strong>species names</strong>, which was contained in the <code>row.names</code> attribute. The key was specified in the merge in the <code>by=</code> argument. A merge or join key is a generic concept that is used in many database operations.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are two types of keys:</p>
<ul>
<li>A <strong>primary key</strong> uniquely identifies an observation in its own table.</li>
<li>A <strong>foreign key</strong> uniquely identifies an observation in another table.</li>
</ul>
</div>
</div>
<p>Let’s consider an example to help us understand the difference between a <strong>primary key</strong> and <strong>foreign key</strong>.</p>
<section id="example-of-keys" class="level2">
<h2 class="anchored" data-anchor-id="example-of-keys">Example of keys</h2>
<p>Imagine you are conduct a study and <strong>collecting data on subjects and a health outcome</strong>.</p>
<p>Often, subjects will <strong>have multiple observations</strong> (a longitudinal study). Similarly, we may record other information, such as the type of housing.</p>
<section id="the-first-table" class="level3">
<h3 class="anchored" data-anchor-id="the-first-table">The first table</h3>
<p>This code creates a simple table with some made up data about some hypothetical subjects’ outcomes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb16-2"></span>
<span id="cb16-3">outcomes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb16-4">        <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"c"</span>), <span class="at" style="color: #657422;">each =</span> <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb16-5">        <span class="at" style="color: #657422;">visit =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb16-6">        <span class="at" style="color: #657422;">outcome =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb16-7">)</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="fu" style="color: #4758AB;">print</span>(outcomes)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 3
  id    visit outcome
  &lt;chr&gt; &lt;int&gt;   &lt;dbl&gt;
1 a         0    4.41
2 a         1    1.55
3 a         2    3.73
4 b         0    4.40
5 b         1    3.13
6 b         2    3.77
7 c         0    2.43
8 c         1    2.09
9 c         2    3.17</code></pre>
</div>
</div>
<p>Note that subjects are labeled by a unique identifer in the <code>id</code> column.</p>
</section>
<section id="a-second-table" class="level3">
<h3 class="anchored" data-anchor-id="a-second-table">A second table</h3>
<p>Here is some code to create a second table containing data about the hypothetical subjects’ housing type.</p>
<div class="cell" data-exercise="true">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">subjects <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb18-2">        <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"c"</span>),</span>
<span id="cb18-3">        <span class="at" style="color: #657422;">house =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"detached"</span>, <span class="st" style="color: #20794D;">"rowhouse"</span>, <span class="st" style="color: #20794D;">"rowhouse"</span>)</span>
<span id="cb18-4">)</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="fu" style="color: #4758AB;">print</span>(subjects)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  id    house   
  &lt;chr&gt; &lt;chr&gt;   
1 a     detached
2 b     rowhouse
3 c     rowhouse</code></pre>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the <strong>primary key</strong> and <strong>foreign key</strong>?</p>
<ul>
<li>The <code>outcomes$id</code> is a <strong>primary key</strong> because it uniquely identifies each subject in the <code>outcomes</code> table.</li>
<li>The <code>subjects$id</code> is a <strong>foreign key</strong> because it appears in the <code>subjects</code> table where it matches each subject to a unique <code>id</code>.</li>
</ul>
</div>
</div>
</section>
</section>
</section>
<section id="joining-in-dplyr" class="level1">
<h1>Joining in <code>dplyr</code></h1>
<p>In <code>dplyr</code>, merges are called joins (both are used in database science) and introduces a vocabulary that names each of these situations.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Three important families of joins
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="https://r4ds.had.co.nz/relational-data.html#mutating-joins"><strong>Mutating joins</strong></a>: add new variables to one data frame from matching observations in another.</p>
<ul>
<li>This is a typical <strong>merge</strong> operation. A mutating join <strong>combines variables from two tables</strong> into a new table. Observations in the two tables are matched by their keys, with the variables from the two tables copied into the new table. It is a mutating join because it adds columns with the merge, and in that way is analogous to the <code>mutate()</code> function for dataframes.<br>
</li>
<li>See Section&nbsp;7 for Table of mutating joins.</li>
</ul></li>
<li><p><a href="https://r4ds.had.co.nz/relational-data.html#filtering-joins"><strong>Filtering joins</strong></a>: filter observations from one data frame based on whether or not they match an observation in the other table</p>
<ul>
<li>Filtering joins are a way to filter one dataset by observations in another dataset (they are more filter and less join).</li>
<li>Filtering joins <strong>match observations</strong> by a key, as usual, <strong>but select the observations that match</strong> (not the variables). In other words, this type of join filters observations from one data frame based on whether or not they match an observation in the other.<br>
</li>
<li>Two types: <code>semi_join(x, y)</code> and <code>anti_join(x, y)</code>.</li>
</ul></li>
<li><p><a href="https://r4ds.had.co.nz/relational-data.html#set-operations"><strong>Set operations</strong></a>: treat observations as if they were set elements.</p>
<ul>
<li>Set operations can be useful when you want to break a single complex filter into simpler pieces. All these operations work with a complete row, comparing the values of every variable. These expect the x and y inputs to have the same variables, and treat the observations like sets:<br>
</li>
<li>Examples of set operations: <code>intersect(x, y)</code>, <code>union(x, y)</code>, and <code>setdiff(x, y)</code>.</li>
</ul></li>
</ul>
</div>
</div>
</section>
<section id="sec-mutjoins" class="level1">
<h1>Types of mutating joins</h1>
<p>The <code>dplyr</code> package provides a set of <strong>functions for joining two data frames</strong> into a single data frame based on a set of key columns.</p>
<p>There are several functions in the <code>*_join()</code> family.</p>
<ul>
<li>These functions all merge together two data frames</li>
<li>They differ in how they handle observations that exist in one but not both data frames.</li>
</ul>
<p>Here, are the <strong>four functions from this family</strong> that you will likely use the most often:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 12%">
<col style="width: 87%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Function</th>
<th style="text-align: left;">What it includes in merged data frame</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>left_join()</code></td>
<td style="text-align: left;">Includes all observations in the left data frame, whether or not there is a match in the right data frame</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>right_join()</code></td>
<td style="text-align: left;">Includes all observations in the right data frame, whether or not there is a match in the left data frame</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>inner_join()</code></td>
<td style="text-align: left;">Includes only observations that are in both data frames</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>full_join()</code></td>
<td style="text-align: left;">Includes all observations from both data frames</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><img src="https://mbutler808.github.io/posts/2023-03-09-joining-data/https:/d33wubrfki0l68.cloudfront.net/aeab386461820b029b7e7606ccff1286f623bae1/ef0d4/diagrams/join-venn.png" class="img-fluid"></p>
<p>[<a href="https://r4ds.had.co.nz/relational-data#relational-data">Source from R for Data Science</a>]</p>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Using prose, describe how the variables and observations are organised in a tidy dataset versus an non-tidy dataset.</p></li>
<li><p>What do the extra and fill arguments do in <code>separate()</code>? Experiment with the various options for the following two toy datasets.</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a,b,c"</span>, <span class="st" style="color: #20794D;">"d,e,f,g"</span>, <span class="st" style="color: #20794D;">"h,i,j"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">separate</span>(x, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"one"</span>, <span class="st" style="color: #20794D;">"two"</span>, <span class="st" style="color: #20794D;">"three"</span>))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a,b,c"</span>, <span class="st" style="color: #20794D;">"d,e"</span>, <span class="st" style="color: #20794D;">"f,g,i"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;">separate</span>(x, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"one"</span>, <span class="st" style="color: #20794D;">"two"</span>, <span class="st" style="color: #20794D;">"three"</span>))</span></code></pre></div>
</div>
<ol start="3" type="1">
<li><p>Both <code>unite()</code> and <code>separate()</code> have a remove argument. What does it do? Why would you set it to FALSE?</p></li>
<li><p>Compare and contrast <code>separate()</code> and <code>extract()</code>. Why are there three variations of separation (by position, by separator, and with groups), but only one <code>unite()</code>?</p></li>
</ol>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 3</category>
  <category>week 7</category>
  <category>tidyr</category>
  <category>tidyverse</category>
  <category>dplyr</category>
  <category>tibble</category>
  <category>pipe</category>
  <guid>https://mbutler808.github.io/posts/2023-03-09-joining-data/index.html</guid>
  <pubDate>Thu, 09 Mar 2023 10:00:00 GMT</pubDate>
  <media:content url="https://d33wubrfki0l68.cloudfront.net/aeab386461820b029b7e7606ccff1286f623bae1/ef0d4/diagrams/join-venn.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Reshaping data with dplyr</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-09-reshaping-data/index.html</link>
  <description><![CDATA[ 




<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/tidy-data" class="uri">https://r4ds.had.co.nz/tidy-data</a></li>
<li><a href="http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf">tidyr cheat sheet from RStudio</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-08-tidy-data-and-the-tidyverse/" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-08-tidy-data-and-the-tidyverse/</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to transform wide data into long data</li>
<li>Be able to separate character columns into multiple columns</li>
<li>Be able to unite/separate multiple character columns into one column</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>Common data table reshaping tasks include reshaping your matrices or dataframes manually, or converting between <strong>short-wide</strong> to <strong>tall-thin</strong> formats.</p>
</section>
<section id="manual-reshaping" class="level1">
<h1>Manual reshaping</h1>
<p>Recall from our discussion on data objects that internally, R objects are stored as one huge vector. The various shapes of objects are simply created by R knowing where to break the vector into rows and columns. So it is very easy to reshape matrices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">vv <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>  <span class="co" style="color: #5E5E5E;"># a vector</span></span>
<span id="cb1-2">mm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>( vv, <span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">2</span>)  <span class="co" style="color: #5E5E5E;"># a matrix</span></span>
<span id="cb1-3">mm</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">dim</span>(mm) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb3-2">mm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>( vv, <span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">byrow=</span>T)  <span class="co" style="color: #5E5E5E;"># a matrix, but cells are now filled by row</span></span>
<span id="cb3-3">mm</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    6    7    8    9   10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">dim</span>(mm) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb5-2">mm  <span class="co" style="color: #5E5E5E;"># vector is now n a different order because the collapse occurred by column</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  1  6  2  7  3  8  4  9  5 10</code></pre>
</div>
</div>
<p>Load the geospiza data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">require</span>(geiger)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: geiger</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ape</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">data</span>(geospiza)   <span class="co" style="color: #5E5E5E;"># load the dataset into the workspace</span></span>
<span id="cb10-2">geo <span class="ot" style="color: #003B4F;">&lt;-</span> geospiza<span class="sc" style="color: #5E5E5E;">$</span>dat  <span class="co" style="color: #5E5E5E;"># save the morphometric data as geo</span></span></code></pre></div>
</div>
<p>Other means of “collapsing” dataframes are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">unlist</span>(geo)   <span class="co" style="color: #5E5E5E;"># produces a vector from the dataframe</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                wingL  tarsusL  culmenL    beakD   gonysW
magnirostris 4.404200 3.038950 2.724667 2.823767 2.675983
conirostris  4.349867 2.984200 2.654400 2.513800 2.360167
difficilis   4.224067 2.898917 2.277183 2.011100 1.929983
scandens     4.261222 2.929033 2.621789 2.144700 2.036944
fortis       4.244008 2.894717 2.407025 2.362658 2.221867
fuliginosa   4.132957 2.806514 2.094971 1.941157 1.845379
pallida      4.265425 3.089450 2.430250 2.016350 1.949125
fusca        3.975393 2.936536 2.051843 1.191264 1.401186
parvulus     4.131600 2.973060 1.974420 1.873540 1.813340
pauper       4.232500 3.035900 2.187000 2.073400 1.962100
Pinaroloxias 4.188600 2.980200 2.311100 1.547500 1.630100
Platyspiza   4.419686 3.270543 2.331471 2.347471 2.282443
psittacula   4.235020 3.049120 2.259640 2.230040 2.073940</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">            <span class="co" style="color: #5E5E5E;"># the atomic type of a dataframe is a list</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">unclass</span>(geo)  <span class="co" style="color: #5E5E5E;"># removes the class attribute, turning the dataframe into a </span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                wingL  tarsusL  culmenL    beakD   gonysW
magnirostris 4.404200 3.038950 2.724667 2.823767 2.675983
conirostris  4.349867 2.984200 2.654400 2.513800 2.360167
difficilis   4.224067 2.898917 2.277183 2.011100 1.929983
scandens     4.261222 2.929033 2.621789 2.144700 2.036944
fortis       4.244008 2.894717 2.407025 2.362658 2.221867
fuliginosa   4.132957 2.806514 2.094971 1.941157 1.845379
pallida      4.265425 3.089450 2.430250 2.016350 1.949125
fusca        3.975393 2.936536 2.051843 1.191264 1.401186
parvulus     4.131600 2.973060 1.974420 1.873540 1.813340
pauper       4.232500 3.035900 2.187000 2.073400 1.962100
Pinaroloxias 4.188600 2.980200 2.311100 1.547500 1.630100
Platyspiza   4.419686 3.270543 2.331471 2.347471 2.282443
psittacula   4.235020 3.049120 2.259640 2.230040 2.073940</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">            <span class="co" style="color: #5E5E5E;"># series of vectors  plus any names attributes, same as setting </span></span>
<span id="cb15-2">            <span class="co" style="color: #5E5E5E;"># class(geo) &lt;- NULL</span></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;">c</span>(geo)  <span class="co" style="color: #5E5E5E;"># similar to unclass but without the attributes            </span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 4.404200 4.349867 4.224067 4.261222 4.244008 4.132957 4.265425 3.975393
 [9] 4.131600 4.232500 4.188600 4.419686 4.235020 3.038950 2.984200 2.898917
[17] 2.929033 2.894717 2.806514 3.089450 2.936536 2.973060 3.035900 2.980200
[25] 3.270543 3.049120 2.724667 2.654400 2.277183 2.621789 2.407025 2.094971
[33] 2.430250 2.051843 1.974420 2.187000 2.311100 2.331471 2.259640 2.823767
[41] 2.513800 2.011100 2.144700 2.362658 1.941157 2.016350 1.191264 1.873540
[49] 2.073400 1.547500 2.347471 2.230040 2.675983 2.360167 1.929983 2.036944
[57] 2.221867 1.845379 1.949125 1.401186 1.813340 1.962100 1.630100 2.282443
[65] 2.073940</code></pre>
</div>
</div>
</section>
<section id="an-example-of-untidy-data" class="level1">
<h1>An example of “untidy” data</h1>
<p>People often make tables in short-wide format that end up not being tidy data. When people use column names to store data, it is no longer tidy. For example take a look at this built-in dataset that comes with <code>tidyr</code> on <strong>religion and income survey data</strong> with the number of respondents with income range in column name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb17-2">relig_income</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 18 × 11
   religion      `&lt;$10k` $10-2…¹ $20-3…² $30-4…³ $40-5…⁴ $50-7…⁵ $75-1…⁶ $100-…⁷
   &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1 Agnostic           27      34      60      81      76     137     122     109
 2 Atheist            12      27      37      52      35      70      73      59
 3 Buddhist           27      21      30      34      33      58      62      39
 4 Catholic          418     617     732     670     638    1116     949     792
 5 Don’t know/r…      15      14      15      11      10      35      21      17
 6 Evangelical …     575     869    1064     982     881    1486     949     723
 7 Hindu               1       9       7       9      11      34      47      48
 8 Historically…     228     244     236     238     197     223     131      81
 9 Jehovah's Wi…      20      27      24      24      21      30      15      11
10 Jewish             19      19      25      25      30      95      69      87
11 Mainline Prot     289     495     619     655     651    1107     939     753
12 Mormon             29      40      48      51      56     112      85      49
13 Muslim              6       7       9      10       9      23      16       8
14 Orthodox           13      17      23      32      32      47      38      42
15 Other Christ…       9       7      11      13      13      14      18      14
16 Other Faiths       20      33      40      46      49      63      46      40
17 Other World …       5       2       3       4       2       7       3       4
18 Unaffiliated      217     299     374     365     341     528     407     321
# … with 2 more variables: `&gt;150k` &lt;dbl&gt;, `Don't know/refused` &lt;dbl&gt;, and
#   abbreviated variable names ¹​`$10-20k`, ²​`$20-30k`, ³​`$30-40k`, ⁴​`$40-50k`,
#   ⁵​`$50-75k`, ⁶​`$75-100k`, ⁷​`$100-150k`</code></pre>
</div>
</div>
<p>Take a second to look at this data. In this case the variables are religion (a proper vector), income bracket (in the column names), and the number of respts, which is the third variable, is presented inside the table. onden Converting this data to tidy format would give us</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb19-2"></span>
<span id="cb19-3">relig_income <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">-</span>religion, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"income"</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"respondents"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 180 × 3
   religion income             respondents
   &lt;chr&gt;    &lt;chr&gt;                    &lt;dbl&gt;
 1 Agnostic &lt;$10k                       27
 2 Agnostic $10-20k                     34
 3 Agnostic $20-30k                     60
 4 Agnostic $30-40k                     81
 5 Agnostic $40-50k                     76
 6 Agnostic $50-75k                    137
 7 Agnostic $75-100k                   122
 8 Agnostic $100-150k                  109
 9 Agnostic &gt;150k                       84
10 Agnostic Don't know/refused          96
# … with 170 more rows</code></pre>
</div>
</div>
<p>Now we have each variable along the columns and each row corresponds to one observation (or category, here a combination of religion and income bracket).</p>
</section>
<section id="reshaping-data-with-dplyr" class="level1">
<h1>Reshaping data with <code>dplyr</code></h1>
<section id="pivot_longer" class="level3">
<h3 class="anchored" data-anchor-id="pivot_longer"><code>pivot_longer()</code></h3>
<p>The <code>tidyr</code> package includes functions to transfer a data frame between <em>long</em> and <em>wide</em>.</p>
<ul>
<li><strong>Wide format</strong> data has different attributes or variables describing an observation <em>placed in separate columns</em>.</li>
<li><strong>Long format</strong> data tends to have different attributes encoded as <em>levels</em> of a single variable, followed by another column that contains <em>the values</em> of the observation at those different levels.</li>
</ul>
<p>The <strong>key problem</strong> with the tidyness of the original data is that the income variables are not in their own columns, but rather are embedded in the structure of the columns, making it hard to manipuate the income variables.</p>
<p>To <strong>fix this</strong>, you can use the <code>pivot_longer()</code> function to <strong>gather values spread across several columns into a single column</strong>, here with the column names gathered into an <code>income</code> column.</p>
</section>
<section id="mutate-to-convert-character-to-factor" class="level3">
<h3 class="anchored" data-anchor-id="mutate-to-convert-character-to-factor">Mutate to convert character to factor</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Gather everything EXCEPT religion to tidy data</span></span>
<span id="cb21-2">relig_income <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">-</span>religion, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"income"</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"respondents"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">religion =</span> <span class="fu" style="color: #4758AB;">factor</span>(religion), <span class="at" style="color: #657422;">income =</span> <span class="fu" style="color: #4758AB;">factor</span>(income))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 180 × 3
   religion income             respondents
   &lt;fct&gt;    &lt;fct&gt;                    &lt;dbl&gt;
 1 Agnostic &lt;$10k                       27
 2 Agnostic $10-20k                     34
 3 Agnostic $20-30k                     60
 4 Agnostic $30-40k                     81
 5 Agnostic $40-50k                     76
 6 Agnostic $50-75k                    137
 7 Agnostic $75-100k                   122
 8 Agnostic $100-150k                  109
 9 Agnostic &gt;150k                       84
10 Agnostic Don't know/refused          96
# … with 170 more rows</code></pre>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>When gathering, exclude any columns that you do not want “gathered” (<code>religion</code> in this case) by including the column names with a the <strong>minus sign</strong> in the <code>pivot_longer()</code> function.</li>
<li>Even if your data is in a tidy format, <code>pivot_longer()</code> is occasionally useful for pulling data together to take advantage of faceting, or plotting separate plots based on a grouping variable.</li>
</ul>
</div>
</div>
</section>
<section id="pivot_wider" class="level3">
<h3 class="anchored" data-anchor-id="pivot_wider"><code>pivot_wider()</code></h3>
<p>The <code>pivot_wider()</code> function is the opposite function. It is useful for creating summary tables for reports, but generally less commonly needed to tidy data.</p>
<p>You use the <code>summarize()</code> function in <code>dplyr</code> to summarize the total number of respondents per income category.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">relig_income <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">-</span>religion, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"income"</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"respondents"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">religion =</span> <span class="fu" style="color: #4758AB;">factor</span>(religion), <span class="at" style="color: #657422;">income =</span> <span class="fu" style="color: #4758AB;">factor</span>(income)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;">group_by</span>(income) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="at" style="color: #657422;">total_respondents =</span> <span class="fu" style="color: #4758AB;">sum</span>(respondents)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   income             total_respondents
   &lt;fct&gt;                          &lt;dbl&gt;
 1 &lt;$10k                           1930
 2 &gt;150k                           2608
 3 $10-20k                         2781
 4 $100-150k                       3197
 5 $20-30k                         3357
 6 $30-40k                         3302
 7 $40-50k                         3085
 8 $50-75k                         5185
 9 $75-100k                        3990
10 Don't know/refused              6121</code></pre>
</div>
</div>
<p><code>pivot_wider()</code> can be flexibly used in combination with <strong>pivot_longer</strong> to make a nicer table to print.</p>
<p>Notice in this example how <code>pivot_wider()</code> has been used at the <strong>very end of the code sequence</strong> to convert the summarized data into a shape that <strong>offers a better tabular presentation for a report</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">relig_income <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">-</span>religion, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"income"</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"respondents"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">religion =</span> <span class="fu" style="color: #4758AB;">factor</span>(religion), <span class="at" style="color: #657422;">income =</span> <span class="fu" style="color: #4758AB;">factor</span>(income)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;">group_by</span>(income) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="at" style="color: #657422;">total_respondents =</span> <span class="fu" style="color: #4758AB;">sum</span>(respondents)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-6"></span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from =</span> <span class="st" style="color: #20794D;">"income"</span>, </span>
<span id="cb25-8">              <span class="at" style="color: #657422;">values_from =</span> <span class="st" style="color: #20794D;">"total_respondents"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-9">  knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">kable</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 11%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 10%">
<col style="width: 21%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: right;">&lt;$10k</th>
<th style="text-align: right;">&gt;150k</th>
<th style="text-align: right;">$10-20k</th>
<th style="text-align: right;">$100-150k</th>
<th style="text-align: right;">$20-30k</th>
<th style="text-align: right;">$30-40k</th>
<th style="text-align: right;">$40-50k</th>
<th style="text-align: right;">$50-75k</th>
<th style="text-align: right;">$75-100k</th>
<th style="text-align: right;">Don’t know/refused</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1930</td>
<td style="text-align: right;">2608</td>
<td style="text-align: right;">2781</td>
<td style="text-align: right;">3197</td>
<td style="text-align: right;">3357</td>
<td style="text-align: right;">3302</td>
<td style="text-align: right;">3085</td>
<td style="text-align: right;">5185</td>
<td style="text-align: right;">3990</td>
<td style="text-align: right;">6121</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>In the <code>pivot_wider()</code> call, you first specify the name of the column to use for the new column names (<code>income</code> in this example) and then specify the column to use for the cell values (<code>total_respondents</code> here).</li>
<li>Long format is often (but not always) the shape we need for tidy data. The important thing, however, is to <strong>think carefully about the shape you need for your analysis</strong>.</li>
</ul>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example of <code>pivot_longer()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try another dataset. This data contain an excerpt of the <a href="https://cran.r-project.org/web/packages/gapminder/README.html#gapminder">Gapminder data</a> on life expectancy, GDP per capita, and population by country.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">library</span>(gapminder)</span>
<span id="cb26-2">gapminder</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,704 × 6
   country     continent  year lifeExp      pop gdpPercap
   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;
 1 Afghanistan Asia       1952    28.8  8425333      779.
 2 Afghanistan Asia       1957    30.3  9240934      821.
 3 Afghanistan Asia       1962    32.0 10267083      853.
 4 Afghanistan Asia       1967    34.0 11537966      836.
 5 Afghanistan Asia       1972    36.1 13079460      740.
 6 Afghanistan Asia       1977    38.4 14880372      786.
 7 Afghanistan Asia       1982    39.9 12881816      978.
 8 Afghanistan Asia       1987    40.8 13867957      852.
 9 Afghanistan Asia       1992    41.7 16317921      649.
10 Afghanistan Asia       1997    41.8 22227415      635.
# … with 1,694 more rows</code></pre>
</div>
</div>
<p>If we wanted to make <code>lifeExp</code>, <code>pop</code> and <code>gdpPercap</code> (all measurements that we observe) go from a wide table into a long table, what would we do?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>One more! Try using <code>pivot_longer()</code> to convert the the following data that contains simulated revenues for three companies by quarter for years 2006 to 2009.</p>
<p>Afterward, use <code>group_by()</code> and <code>summarize()</code> to calculate the average revenue for each company across all years and all quarters.</p>
<p><strong>Bonus</strong>: Calculate a mean revenue for each company AND each year (averaged across all 4 quarters).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb29-2">  <span class="st" style="color: #20794D;">"company"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">each=</span><span class="dv" style="color: #AD0000;">4</span>), </span>
<span id="cb29-3">  <span class="st" style="color: #20794D;">"year"</span>  <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">2006</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2009</span>, <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb29-4">  <span class="st" style="color: #20794D;">"Q1"</span>    <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">12</span>),</span>
<span id="cb29-5">  <span class="st" style="color: #20794D;">"Q2"</span>    <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">12</span>),</span>
<span id="cb29-6">  <span class="st" style="color: #20794D;">"Q3"</span>    <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">12</span>),</span>
<span id="cb29-7">  <span class="st" style="color: #20794D;">"Q4"</span>    <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">12</span>),</span>
<span id="cb29-8">)</span>
<span id="cb29-9">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 6
   company  year    Q1    Q2    Q3    Q4
     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;
 1       1  2006    77     4    95    88
 2       1  2007     0    22    70    45
 3       1  2008    53     7    87    97
 4       1  2009    64    80    33     8
 5       2  2006     3    33    50    14
 6       2  2007    98    39    11    37
 7       2  2008   100    35    88    22
 8       2  2009    38    96    78    89
 9       3  2006    61     6    14    87
10       3  2007    11    52    28    58
11       3  2008    46    37    29    18
12       3  2009    23    82    56    59</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># try it yourself </span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="separate-and-unite-cells-within-columns-of-data" class="level3">
<h3 class="anchored" data-anchor-id="separate-and-unite-cells-within-columns-of-data"><code>separate()</code> and <code>unite()</code> cells within columns of data</h3>
<p>Still in the<code>tidyr</code> package:</p>
<ul>
<li><code>unite()</code>: paste contents of two or more columns into a single column</li>
<li><code>separate()</code>: split contents of a column into two or more columns</li>
</ul>
<p>First, we combine the first three columns into one new column using <code>unite()</code>. This function is similar to <code>newvar &lt;- paste(A,B,C, sep="_")</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">names</span>(gapminder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "country"   "continent" "year"      "lifeExp"   "pop"       "gdpPercap"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">unite</span>(<span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"country_continent_year"</span>, </span>
<span id="cb34-3">        country<span class="sc" style="color: #5E5E5E;">:</span>year, </span>
<span id="cb34-4">        <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"_"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,704 × 4
   country_continent_year lifeExp      pop gdpPercap
   &lt;chr&gt;                    &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;
 1 Afghanistan_Asia_1952     28.8  8425333      779.
 2 Afghanistan_Asia_1957     30.3  9240934      821.
 3 Afghanistan_Asia_1962     32.0 10267083      853.
 4 Afghanistan_Asia_1967     34.0 11537966      836.
 5 Afghanistan_Asia_1972     36.1 13079460      740.
 6 Afghanistan_Asia_1977     38.4 14880372      786.
 7 Afghanistan_Asia_1982     39.9 12881816      978.
 8 Afghanistan_Asia_1987     40.8 13867957      852.
 9 Afghanistan_Asia_1992     41.7 16317921      649.
10 Afghanistan_Asia_1997     41.8 22227415      635.
# … with 1,694 more rows</code></pre>
</div>
</div>
<p>Next, we show how to separate the columns into three separate columns using <code>separate()</code> using the <code>col</code>, <code>into</code> and <code>sep</code> arguments. Note that this works by finding the delimiter, and relies on order of the information.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;">unite</span>(<span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"country_continent_year"</span>, </span>
<span id="cb36-3">        country<span class="sc" style="color: #5E5E5E;">:</span>year, </span>
<span id="cb36-4">        <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"_"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;">separate</span>(<span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"country_continent_year"</span>, </span>
<span id="cb36-6">           <span class="at" style="color: #657422;">into=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"country"</span>, <span class="st" style="color: #20794D;">"continent"</span>, <span class="st" style="color: #20794D;">"year"</span>), </span>
<span id="cb36-7">           <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"_"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,704 × 6
   country     continent year  lifeExp      pop gdpPercap
   &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;
 1 Afghanistan Asia      1952     28.8  8425333      779.
 2 Afghanistan Asia      1957     30.3  9240934      821.
 3 Afghanistan Asia      1962     32.0 10267083      853.
 4 Afghanistan Asia      1967     34.0 11537966      836.
 5 Afghanistan Asia      1972     36.1 13079460      740.
 6 Afghanistan Asia      1977     38.4 14880372      786.
 7 Afghanistan Asia      1982     39.9 12881816      978.
 8 Afghanistan Asia      1987     40.8 13867957      852.
 9 Afghanistan Asia      1992     41.7 16317921      649.
10 Afghanistan Asia      1997     41.8 22227415      635.
# … with 1,694 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Using prose, describe how the variables and observations are organised in a tidy dataset versus an non-tidy dataset.</p></li>
<li><p>What do the extra and fill arguments do in <code>separate()</code>? Experiment with the various options for the following two toy datasets.</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a,b,c"</span>, <span class="st" style="color: #20794D;">"d,e,f,g"</span>, <span class="st" style="color: #20794D;">"h,i,j"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;">separate</span>(x, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"one"</span>, <span class="st" style="color: #20794D;">"two"</span>, <span class="st" style="color: #20794D;">"three"</span>))</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a,b,c"</span>, <span class="st" style="color: #20794D;">"d,e"</span>, <span class="st" style="color: #20794D;">"f,g,i"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-5">  <span class="fu" style="color: #4758AB;">separate</span>(x, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"one"</span>, <span class="st" style="color: #20794D;">"two"</span>, <span class="st" style="color: #20794D;">"three"</span>))</span></code></pre></div>
</div>
<ol start="3" type="1">
<li><p>Both <code>unite()</code> and <code>separate()</code> have a remove argument. What does it do? Why would you set it to FALSE?</p></li>
<li><p>Compare and contrast <code>separate()</code> and <code>extract()</code>. Why are there three variations of separation (by position, by separator, and with groups), but only one <code>unite()</code>?</p></li>
</ol>
</div>
</div>
</section>
<section id="solution-for-gapminder-example" class="level3">
<h3 class="anchored" data-anchor-id="solution-for-gapminder-example">Solution for gapminder example</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(country, continent, year), <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"metrics"</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"values"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5,112 × 5
   country     continent  year metrics       values
   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt; &lt;chr&gt;          &lt;dbl&gt;
 1 Afghanistan Asia       1952 lifeExp         28.8
 2 Afghanistan Asia       1952 pop        8425333  
 3 Afghanistan Asia       1952 gdpPercap      779. 
 4 Afghanistan Asia       1957 lifeExp         30.3
 5 Afghanistan Asia       1957 pop        9240934  
 6 Afghanistan Asia       1957 gdpPercap      821. 
 7 Afghanistan Asia       1962 lifeExp         32.0
 8 Afghanistan Asia       1962 pop       10267083  
 9 Afghanistan Asia       1962 gdpPercap      853. 
10 Afghanistan Asia       1967 lifeExp         34.0
# … with 5,102 more rows</code></pre>
</div>
</div>
<p>We stacked the three variables <code>lifeExp</code>, <code>pop</code>, and <code>gdpPercap</code> so now the table is a little thinner and three times as long.</p>
<p>Why did we have to make the non-gathered variables into a vector?</p>


</section>
</section>

 ]]></description>
  <category>module 4</category>
  <category>week 8</category>
  <category>tidyr</category>
  <category>tidyverse</category>
  <category>dplyr</category>
  <category>tibble</category>
  <guid>https://mbutler808.github.io/posts/2023-03-09-reshaping-data/index.html</guid>
  <pubDate>Thu, 09 Mar 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>A small review of univariate parametric statistics</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-07-univariate/index.html</link>
  <description><![CDATA[ 




<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to perform basic univariate statistics</li>
<li>Be able to design plots to display univariate comparisons</li>
<li>Be able to relate questions to graphical representations of data</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>A small review of the linear regression and ANOVA</p>
</section>
<section id="tiny-review-of-univariate-statistics" class="level1">
<h1>Tiny review of Univariate statistics</h1>
<section id="linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="linear-regression">Linear Regression</h2>
<p>Linear regression asks whether there is a relationship between X and Y, that is if you know X can you predict the value of Y?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">with</span>(iris, <span class="fu" style="color: #4758AB;">plot</span>(Sepal.Width <span class="sc" style="color: #5E5E5E;">~</span> Sepal.Length))</span>
<span id="cb1-2">lm.fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>(iris, <span class="fu" style="color: #4758AB;">lm</span>(Sepal.Width <span class="sc" style="color: #5E5E5E;">~</span> Sepal.Length))</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">abline</span>(lm.fit, <span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"blue"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-07-univariate/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Linear regression results in two parameters, the best-fit slope and intercept:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">lm.fit </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = Sepal.Width ~ Sepal.Length)

Coefficients:
 (Intercept)  Sepal.Length  
     3.41895      -0.06188  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">summary</span>(lm.fit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = Sepal.Width ~ Sepal.Length)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.1095 -0.2454 -0.0167  0.2763  1.3338 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)   3.41895    0.25356   13.48   &lt;2e-16 ***
Sepal.Length -0.06188    0.04297   -1.44    0.152    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.4343 on 148 degrees of freedom
Multiple R-squared:  0.01382,   Adjusted R-squared:  0.007159 
F-statistic: 2.074 on 1 and 148 DF,  p-value: 0.1519</code></pre>
</div>
</div>
<p>Regression minimizes the <strong>sum of squared errors</strong> (or deviations) from the line. The “errors” are the difference between where Y is, and where Y should be if it followed a perfect line.</p>
<p>We can illustrate what this means:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> iris<span class="sc" style="color: #5E5E5E;">$</span>Sepal.Length</span>
<span id="cb6-2">y <span class="ot" style="color: #003B4F;">&lt;-</span> iris<span class="sc" style="color: #5E5E5E;">$</span>Sepal.Width</span>
<span id="cb6-3">yhat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(lm.fit)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;">with</span>(iris, <span class="fu" style="color: #4758AB;">plot</span>(Sepal.Width <span class="sc" style="color: #5E5E5E;">~</span> Sepal.Length))</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;">with</span>(iris, <span class="fu" style="color: #4758AB;">abline</span>(lm.fit, <span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"blue"</span>))</span>
<span id="cb6-7"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(x))  <span class="fu" style="color: #4758AB;">lines</span>(x[<span class="fu" style="color: #4758AB;">c</span>(i,i)],<span class="fu" style="color: #4758AB;">c</span>(y[i], yhat[i]), <span class="at" style="color: #657422;">col=</span><span class="st" style="color: #20794D;">"red"</span>, <span class="at" style="color: #657422;">lty=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-07-univariate/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The regression line is the best fit line that minimizes the sums of squared deviations from the regression. It turns out that the least-squares fit of the regression line is also provides the Maximum Likelihood fits of the parameters of the line (the slope and intercept).</p>
</section>
<section id="anova" class="level2">
<h2 class="anchored" data-anchor-id="anova">ANOVA</h2>
<p>Analysis of variance is very closely related to regression. It also works by minimizing sums of squares, but it asks a different question.</p>
<p>Does the data better fit a model with one group (one regression line?) or multiple groups (multiple regression lines, one for each group)?</p>
<p>Graphically, it looks like the plot below with the question <em>Is the data explained better by a single group with a grand mean? or with separate means for each</em> <code>Species</code>?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">with</span>(iris, <span class="fu" style="color: #4758AB;">boxplot</span>(Sepal.Length))</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">with</span>(iris, <span class="fu" style="color: #4758AB;">plot</span>(Sepal.Length <span class="sc" style="color: #5E5E5E;">~</span> Species))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-07-univariate/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<section id="is-one-of-these-groups-not-like-the-others" class="level3">
<h3 class="anchored" data-anchor-id="is-one-of-these-groups-not-like-the-others">Is One of these Groups not like the others?</h3>
<p>Statistically, this is asking whether the sums of squares is minimized by assuming there is only one group (one mean)? Or three groups?</p>
<p>For this plot we will add an index column (1 to number of observations), and use <code>ggplot2</code>, <code>dplyr</code>, and the pipe from <code>magrittr</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">require</span>(dplyr)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">require</span>(magrittr)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">require</span>(ggplot2)</span>
<span id="cb8-4"></span>
<span id="cb8-5">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cbind</span>(iris, <span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Species))</span>
<span id="cb8-6">yhat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">mean</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Sepal.Length)  <span class="co" style="color: #5E5E5E;"># grand mean of Sepal Length</span></span>
<span id="cb8-7"></span>
<span id="cb8-8">p <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>( <span class="at" style="color: #657422;">x =</span> id, <span class="at" style="color: #657422;">y =</span> Sepal.Length, <span class="at" style="color: #657422;">group=</span>Species)) </span>
<span id="cb8-9"></span>
<span id="cb8-10">q <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>( <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-11">  <span class="fu" style="color: #4758AB;">geom_hline</span>( <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="fu" style="color: #4758AB;">mean</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Sepal.Length)) ) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-12">  <span class="fu" style="color: #4758AB;">geom_segment</span>( <span class="at" style="color: #657422;">data=</span>dat, <span class="fu" style="color: #4758AB;">aes</span>( <span class="at" style="color: #657422;">x =</span> id, <span class="at" style="color: #657422;">y =</span> Sepal.Length, <span class="at" style="color: #657422;">xend =</span> id, <span class="at" style="color: #657422;">yend =</span> yhat), <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"red"</span>, <span class="at" style="color: #657422;">lty =</span> <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb8-13"></span>
<span id="cb8-14">q  </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-07-univariate/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We added two new ggplot2 functions:</p>
<ul>
<li><strong>geom_hline()</strong> which adds a horizontal line used for the grand mean. This is similar to base R <code>abline()</code><br>
</li>
<li><strong>geom_segment()</strong> which plots line segments indicated by x,y start points and xend,yend end points (this is based on the base R <code>segment()</code> function)</li>
</ul>
<p>To add in the group structure, we need to compute means by species, and know where one species ends and the other begins in the data vector. We can do this with <code>group_by()</code> and <code>summarize()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">spmeans  <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">        <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb9-3">          <span class="at" style="color: #657422;">sl =</span> <span class="fu" style="color: #4758AB;">mean</span>(Sepal.Length),</span>
<span id="cb9-4">          <span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">length</span>(Sepal.Length),</span>
<span id="cb9-5">          <span class="at" style="color: #657422;">minid =</span> <span class="fu" style="color: #4758AB;">min</span>(id),</span>
<span id="cb9-6">          <span class="at" style="color: #657422;">maxid =</span> <span class="fu" style="color: #4758AB;">max</span>(id)</span>
<span id="cb9-7">        )</span>
<span id="cb9-8"></span>
<span id="cb9-9">spmeans</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 5
  Species       sl     n minid maxid
  &lt;fct&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;
1 setosa      5.01    50     1    50
2 versicolor  5.94    50    51   100
3 virginica   6.59    50   101   150</code></pre>
</div>
</div>
<p>(You should always check that minid and maxid is what you intended)</p>
<p>We want to include this mean information in the dataframe, so to add it as a vector, we can <code>merge()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">merge</span>(dat, spmeans)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">head</span>(dat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Species Sepal.Length Sepal.Width Petal.Length Petal.Width id    sl  n minid
1  setosa          5.1         3.5          1.4         0.2  1 5.006 50     1
2  setosa          4.9         3.0          1.4         0.2  2 5.006 50     1
3  setosa          4.7         3.2          1.3         0.2  3 5.006 50     1
4  setosa          4.6         3.1          1.5         0.2  4 5.006 50     1
5  setosa          5.0         3.6          1.4         0.2  5 5.006 50     1
6  setosa          5.4         3.9          1.7         0.4  6 5.006 50     1
  maxid
1    50
2    50
3    50
4    50
5    50
6    50</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">dat[<span class="dv" style="color: #AD0000;">45</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">55</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Species Sepal.Length Sepal.Width Petal.Length Petal.Width id    sl  n
45     setosa          5.1         3.8          1.9         0.4 45 5.006 50
46     setosa          4.8         3.0          1.4         0.3 46 5.006 50
47     setosa          5.1         3.8          1.6         0.2 47 5.006 50
48     setosa          4.6         3.2          1.4         0.2 48 5.006 50
49     setosa          5.3         3.7          1.5         0.2 49 5.006 50
50     setosa          5.0         3.3          1.4         0.2 50 5.006 50
51 versicolor          7.0         3.2          4.7         1.4 51 5.936 50
52 versicolor          6.4         3.2          4.5         1.5 52 5.936 50
53 versicolor          6.9         3.1          4.9         1.5 53 5.936 50
54 versicolor          5.5         2.3          4.0         1.3 54 5.936 50
55 versicolor          6.5         2.8          4.6         1.5 55 5.936 50
   minid maxid
45     1    50
46     1    50
47     1    50
48     1    50
49     1    50
50     1    50
51    51   100
52    51   100
53    51   100
54    51   100
55    51   100</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">tail</span>(dat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Species Sepal.Length Sepal.Width Petal.Length Petal.Width  id    sl  n
145 virginica          6.7         3.3          5.7         2.5 145 6.588 50
146 virginica          6.7         3.0          5.2         2.3 146 6.588 50
147 virginica          6.3         2.5          5.0         1.9 147 6.588 50
148 virginica          6.5         3.0          5.2         2.0 148 6.588 50
149 virginica          6.2         3.4          5.4         2.3 149 6.588 50
150 virginica          5.9         3.0          5.1         1.8 150 6.588 50
    minid maxid
145   101   150
146   101   150
147   101   150
148   101   150
149   101   150
150   101   150</code></pre>
</div>
</div>
<p>Now that we have our dataframe with all of the necessary information, we can plot.</p>
<p>Note that there are two calls to <code>geom_segment()</code>. For the first, we are plotting the species means, so we use the smmeans dataset. For the second, we are plotting each pointʻs deviation from the species means so we use the full dataset. The rest is telling the function where the start and end points of each segment are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">r <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>( <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">geom_segment</span>( <span class="at" style="color: #657422;">data=</span>spmeans, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>minid, <span class="at" style="color: #657422;">y =</span> sl, <span class="at" style="color: #657422;">xend=</span>maxid, <span class="at" style="color: #657422;">yend=</span>sl, <span class="at" style="color: #657422;">group=</span>Species )) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">geom_segment</span>( <span class="at" style="color: #657422;">data=</span>dat, <span class="fu" style="color: #4758AB;">aes</span>( <span class="at" style="color: #657422;">x =</span> id, <span class="at" style="color: #657422;">y =</span> Sepal.Length, <span class="at" style="color: #657422;">xend =</span> id, <span class="at" style="color: #657422;">yend =</span> sl, <span class="at" style="color: #657422;">color=</span>Species), <span class="at" style="color: #657422;">lty =</span> <span class="dv" style="color: #AD0000;">3</span>) </span>
<span id="cb17-4"></span>
<span id="cb17-5">r  </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-07-univariate/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Back to our question - is the error sum of squares minimized by accouting for separate species or considering all irises as one group? Another way to state ANOVA is - is at least one of these groups different than the others?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">require</span>(cowplot)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: cowplot</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">plot_grid</span>(</span>
<span id="cb20-2">  q, </span>
<span id="cb20-3">  r <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position=</span><span class="st" style="color: #20794D;">"none"</span>), </span>
<span id="cb20-4">  <span class="at" style="color: #657422;">labels=</span><span class="st" style="color: #20794D;">"AUTO"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-07-univariate/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If we want to know whether species are different in sepal length, then we need to have lm fit the model by species. We do this like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">lm.fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>(iris, <span class="fu" style="color: #4758AB;">lm</span>(Sepal.Length <span class="sc" style="color: #5E5E5E;">~</span> Species))</span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;">summary</span>(lm.fit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = Sepal.Length ~ Species)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.6880 -0.3285 -0.0060  0.3120  1.3120 

Coefficients:
                  Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)         5.0060     0.0728  68.762  &lt; 2e-16 ***
Speciesversicolor   0.9300     0.1030   9.033 8.77e-16 ***
Speciesvirginica    1.5820     0.1030  15.366  &lt; 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.5148 on 147 degrees of freedom
Multiple R-squared:  0.6187,    Adjusted R-squared:  0.6135 
F-statistic: 119.3 on 2 and 147 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<p><strong>Interpretation:</strong> One-way ANOVA is like fitting a regression of the individual points against the grand mean of the points vs.&nbsp;separate regressions for each group. The summary shows that the the intercept (the mean of setosa) is about 5 (significantly different than zero), whereas the other species are contrasts against setosa, the first species. Versicolor is 0.93 higher than setosa, and virginica is 1.58 higher than setosa. Both of these contrasts are signficant. So they are actually all significantly different than each other</p>
<p>Notice that now have more parameters estimated. You can specify which parameter values and contrasts you want displayed. Often we just want an ANOVA table, which tests the hypothesis that <strong>at least one group is different than the others</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">anova</span>(lm.fit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Analysis of Variance Table

Response: Sepal.Length
           Df Sum Sq Mean Sq F value    Pr(&gt;F)    
Species     2 63.212  31.606  119.26 &lt; 2.2e-16 ***
Residuals 147 38.956   0.265                      
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>We can see that species are significantly different in sepal length. Can you make a plot that shows this and add the statistics to it?</p>
<p><em>And thatʻs how ANOVA is related to regression!</em></p>
</section>
</section>
<section id="ancova" class="level2">
<h2 class="anchored" data-anchor-id="ancova">ANCOVA</h2>
<p>There are many forms of regession and ANOVA. For example, if you want to see if the relationship between Sepal.Length and Sepal.Width differs by species, you woul do an ANCOVA (analysis of covariance):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">lm.fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>(iris, <span class="fu" style="color: #4758AB;">lm</span>(Sepal.Width <span class="sc" style="color: #5E5E5E;">~</span> Sepal.Length <span class="sc" style="color: #5E5E5E;">+</span> Species))</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;">summary</span>(lm.fit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = Sepal.Width ~ Sepal.Length + Species)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.95096 -0.16522  0.00171  0.18416  0.72918 

Coefficients:
                  Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)        1.67650    0.23536   7.123 4.46e-11 ***
Sepal.Length       0.34988    0.04630   7.557 4.19e-12 ***
Speciesversicolor -0.98339    0.07207 -13.644  &lt; 2e-16 ***
Speciesvirginica  -1.00751    0.09331 -10.798  &lt; 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.289 on 146 degrees of freedom
Multiple R-squared:  0.5693,    Adjusted R-squared:  0.5604 
F-statistic: 64.32 on 3 and 146 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<p>Which would fit separate Y-intercepts for each species.</p>


</section>
</section>

 ]]></description>
  <category>module 3</category>
  <category>week 8</category>
  <category>univariate</category>
  <category>statistics</category>
  <category>ggplot2</category>
  <category>dplyr</category>
  <guid>https://mbutler808.github.io/posts/2023-03-07-univariate/index.html</guid>
  <pubDate>Tue, 07 Mar 2023 10:00:00 GMT</pubDate>
</item>
<item>
  <title>A small tour of multivariate analysis</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-03-02-multivariate/index.html</link>
  <description><![CDATA[ 




<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to perform basic univariate statistics</li>
<li>Be able to perform basic multivariate statistics</li>
<li>Be able to relate questions to graphical representations of data</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>Most of us have some multivariate data that we would like to explore. After we have gone through the task of making bivariate plots, checking for errors in the data, and finalizing the raw data, it is time to start looking for patterns and exploring.</p>
</section>
<section id="data-transformation" class="level1">
<h1>Data transformation</h1>
<p>The first step you will often think about is do you have to log-transform your data? Or do some other transformation? You may need to, for example, if you are doing morphometrics and have a lot of size variation.</p>
<p>There are several reasons why you might need to do a transformation:</p>
<section id="nature-of-the-relationship-among-variables" class="level2">
<h2 class="anchored" data-anchor-id="nature-of-the-relationship-among-variables">Nature of the relationship among variables</h2>
<p>You may also expect your data to follow a power law, in which case a log-transformation will <strong>make the data linear</strong>. For example, things that scale with body size tend to have the form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20aMass%5Eb%20%20%0A"> <img src="https://latex.codecogs.com/png.latex?%0Alog(Y)%20=%20log(a)%20+%20b%5Ctimes%20log(Mass)%0A"></p>
</section>
<section id="fitting-assumptions-of-parametric-statistics" class="level2">
<h2 class="anchored" data-anchor-id="fitting-assumptions-of-parametric-statistics">Fitting assumptions of parametric statistics</h2>
<p>If you plan to do parametric statistics, for example many forms of regression, ANOVA, etc. one of the major assumptions is that the <strong>errors</strong> are <strong>normally distributed</strong>.</p>
<p>That is, the relationship follows the form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20%5Csim%20X%20+%20e%0A"></p>
<p>Which is read as <strong>Y</strong> is proportional to <strong>X</strong> plus random error. Where <code>e ~ N</code> or the errors or deviations from this relationship follow a normal distribution. Note that this assumes that X is known without error.</p>
<section id="checking-for-normality" class="level3">
<h3 class="anchored" data-anchor-id="checking-for-normality">Checking for normality</h3>
<p>A convenient tool for checking the normality of continuous data is <code>qqnorm()</code> which plots the QQ quantiles of the data. If it is normally distributed, the points should fall on a straight line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">qqnorm</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Sepal.Length)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">qqline</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Sepal.Length)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-02-multivariate/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Or the <code>ggplot2</code> version:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">require</span>(ggplot2)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ggplot2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">require</span>(magrittr)  <span class="co" style="color: #5E5E5E;"># for piping using %&gt;%</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: magrittr</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">ggplot</span>(iris, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">sample=</span>Sepal.Length)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">stat_qq</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">stat_qq_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-02-multivariate/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This data looks pretty good, except for some deviations along the edges. Most data will not ever be perfectly normal, you will get a sense of what is acceptable with more experience.</p>
<p>However, we do know that this data contains three species – what happens if you were to look at the data by species?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">iris <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;">ggplot</span>( <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">sample=</span>Sepal.Length)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb7-3">   <span class="fu" style="color: #4758AB;">stat_qq</span>( <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-4">   <span class="fu" style="color: #4758AB;">stat_qq_line</span>( <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species) )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-02-multivariate/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="skew" class="level3">
<h3 class="anchored" data-anchor-id="skew">Skew</h3>
<p>Deviations from normality are not the end of the world, and often a little is tolerated. What can be more problematic is strong skew. For that you will really want to transform the data:</p>
<p><img src="https://mbutler808.github.io/images/skew.gif" class="img-fluid"> <a href="https://medium.com/@TheDataGyan/day-8-data-transformation-skewness-normalization-and-much-more-4c144d370e55">Source</a></p>
<p>Right skewed data is data with a long tail to the right (the positive side). Left skeweed data has along tail to the left. Here are a few methods. There are more</p>
<table class="table">
<thead>
<tr class="header">
<th>Skew</th>
<th style="text-align: left;">Transform</th>
<th style="text-align: left;">Code</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>strong right</td>
<td style="text-align: left;">cube root</td>
<td style="text-align: left;"><code>z = x^(1/3)</code></td>
</tr>
<tr class="even">
<td></td>
<td style="text-align: left;">square root</td>
<td style="text-align: left;"><code>z = x6(1/2)</code></td>
</tr>
<tr class="odd">
<td></td>
<td style="text-align: left;">log</td>
<td style="text-align: left;"><code>z = log(x)</code></td>
</tr>
<tr class="even">
<td></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"><code>z = log10(x)</code></td>
</tr>
<tr class="odd">
<td></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"><code>z = log2(x)</code></td>
</tr>
<tr class="even">
<td>strong left</td>
<td style="text-align: left;">square</td>
<td style="text-align: left;"><code>z = x^2</code></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="separating-size-and-shape" class="level2">
<h2 class="anchored" data-anchor-id="separating-size-and-shape">Separating Size and Shape</h2>
<p>Will you want to do an analysis of the data along with a size-corrected dataset? If shape variation is interesting for your data (i.e., do they differ in shape when we control for differences in size, or are they <em>relatively</em> larger or smaller?), then you may want to find some sort of size-adjustment. Popular methods include</p>
<ul>
<li>Regressing against a size variable, and using residuals<br>
</li>
<li>PCA analysis excluding PC1 (PC1 is considered size),<br>
</li>
<li>Shear or Procrustes methods, and<br>
</li>
<li>Ratios with size.<br>
There is a huge wealth of literature on size and how to analyze shape.</li>
</ul>
</section>
</section>
<section id="principal-components-analysis" class="level1">
<h1>Principal Components Analysis</h1>
<p>Now you are ready to begin. Often we have many variables measured and we suspect that many of the variables are collinear (or correlated) so that many of them contain the same or similar information. To summarize the variation, we may want to do a Principal Components Analysis.</p>
<p>PCA is an ordination method that is useful to explore patterns of variation in the data. When variables are correlated (or non-independent), PCA finds linear combinations of the original data that summarize <em>most</em> of the variation. It is therefore very useful for reducing the number of variables to a few most important axes of variation.</p>
<p>It produces a number of Principal Component axes (the same number as the number of original variables). The first PC axis is along the direction of greatest variation in the data. The second PC axis is orthogonal (perpendicular) to the first, and in the direction of the next greatest source of variation in the data. The third is orthogonal to the first and second, etc. and so on. Because all of the axes are orthogonal to one another, they summarize independent variation.</p>
<section id="pca-loadings" class="level2">
<h2 class="anchored" data-anchor-id="pca-loadings">PCA Loadings</h2>
<p>Some things to look for in PC analysis: The <strong>loadings</strong> of the variables on the PC axes show <em>how much each variable is correlated with that PC axis</em>. The magnitude of the loading indicates how strong the correlation is, and the sign indicates the <em>direction</em>. The sign of the loading is only informative if variables load with different signs on the same PC axis. For example if variable A and B load positively with PC 2, and variable C loads negatively, this is often interpreted as varying along PC2 in an increasing direction indicating larger A and B but smaller C. In a morphological analysis, the first PC axis often loads positively and nearly equally on all variables, and is therefore considered to indicate size. PC1 also typically explains a large fraction of the variation.</p>
<p>The amount of variation each PC axis explains is called the <strong>proportion of variance explained</strong>. It is usually expressed as a percent or a fraction. It is not uncommon in morphological analysis for PC1 to explain 90% of the variation in the data.</p>
<p>It is important to note, however, that the amount of variation does not necessarily indicate it’s <strong>importance</strong>. Many ecological associations or functionally significant variation is reflected in shape variation, which as we said may be only 10% of the variation. However, this might be very functionally relevant. Size may vary a lot, but it might be whether or not you have very long legs relative to your size that tells us if you are a good runner. Long legs (in an absolute sense) may not make you a great runner if you are actually huge in size, so that relative to your body length, your legs are actually relatively short. So one thing to keep in mind is that you often will use only 3 axes, even though you have 10 or more variables. If you have managed to capture 90 or 95% of the variation with the first three variables (sometimes even more), you’re probably in great shape. It’s a tradeoff between keeping the analysis and interpretation manageable, and keeping all the variation in the data. Usually the minor axes have less than 1% of the variation, and are usually not interesting even if you were to keep them. Anyway, to conclude this paragraph, you may want to do a PC analysis on the data with size included, and then do a second analysis on the size-adjusted data (shape). Another strategy is to do a PC analysis on the data with size, and then leave out PC1 in downstream analyses of “shape”.</p>
</section>
</section>
<section id="example-fisherʻs-iris-data" class="level1">
<h1>Example Fisherʻs Iris data</h1>
<p>Let’s do a PC analysis on Fisher’s Iris data, which is a famous multivariate dataset build into R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">head</span>(iris)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa</code></pre>
</div>
</div>
<p>There are: - Four measurements of sepal and petal length and width - Three species of iris - Fifty individuals are measured for each iris species.</p>
<p>PC analysis in R uses the <code>princomp</code> function. You can either specify the columns of the data to do a PC analysis, or use the formula representation (with no response variables since it is not a regression). A tilde with a dot indicates all variables, and you can exclude columns with a minus sign as usual. You should only put continuous variables into a PC analysis. So in the iris data, we can exclude species with the minus sign:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">pc.iris <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">princomp</span> (<span class="sc" style="color: #5E5E5E;">~</span> .<span class="sc" style="color: #5E5E5E;">-</span>Species, <span class="at" style="color: #657422;">data=</span>iris, <span class="at" style="color: #657422;">scores=</span>T)</span></code></pre></div>
</div>
<p>We see the first two PC axes explain more than 97% of the variation, with PC1 explaining 92%, and PC2 5%. Because there are four original variables, we have two more PC axes but they only explain 1.7% and 0.5% of the variation and we will ignore them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">summary</span>(pc.iris)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Importance of components:
                          Comp.1     Comp.2     Comp.3      Comp.4
Standard deviation     2.0494032 0.49097143 0.27872586 0.153870700
Proportion of Variance 0.9246187 0.05306648 0.01710261 0.005212184
Cumulative Proportion  0.9246187 0.97768521 0.99478782 1.000000000</code></pre>
</div>
</div>
<p>We can see how the PC axes reflect the original variables by using the loadings accessor function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">loadings</span>(pc.iris)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Loadings:
             Comp.1 Comp.2 Comp.3 Comp.4
Sepal.Length  0.361  0.657  0.582  0.315
Sepal.Width          0.730 -0.598 -0.320
Petal.Length  0.857 -0.173        -0.480
Petal.Width   0.358        -0.546  0.754

               Comp.1 Comp.2 Comp.3 Comp.4
SS loadings      1.00   1.00   1.00   1.00
Proportion Var   0.25   0.25   0.25   0.25
Cumulative Var   0.25   0.50   0.75   1.00</code></pre>
</div>
</div>
<p>PC1 reflects variation primarily in petal length as evidenced by it’s high correlation (<strong>0.857</strong>), and to a lesser extent by sepal length and petal width. PC2 indicates variation in sepal width, as well as additional variation in sepal length. Petal length loads in the opposite direction and thus would decrease as sepal length and width increased, but the correlation value is rather low (<strong>0.173</strong>). PC3 actually shows a trade-off between sepal length and both sepal width and petal width (with all loadings having similar magnitudes), but it explains very little of the overall variation.</p>
<p>The scores are the values of each datapoint along the PC axes in PC space. It is an element of <code>pc.iris$scores</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">head</span>(pc.iris<span class="sc" style="color: #5E5E5E;">$</span>scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Comp.1     Comp.2      Comp.3       Comp.4
1 -2.684126  0.3193972  0.02791483  0.002262437
2 -2.714142 -0.1770012  0.21046427  0.099026550
3 -2.888991 -0.1449494 -0.01790026  0.019968390
4 -2.745343 -0.3182990 -0.03155937 -0.075575817
5 -2.728717  0.3267545 -0.09007924 -0.061258593
6 -2.280860  0.7413304 -0.16867766 -0.024200858</code></pre>
</div>
</div>
<p>We can access the PC scores, but it’s long. So for convenience let’s save it as something shorter.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">pc1 <span class="ot" style="color: #003B4F;">&lt;-</span> pc.iris<span class="sc" style="color: #5E5E5E;">$</span>scores[,<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb17-2">pc2 <span class="ot" style="color: #003B4F;">&lt;-</span> pc.iris<span class="sc" style="color: #5E5E5E;">$</span>scores[,<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb17-3">pc3 <span class="ot" style="color: #003B4F;">&lt;-</span> pc.iris<span class="sc" style="color: #5E5E5E;">$</span>scores[,<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;">plot</span>(pc2 <span class="sc" style="color: #5E5E5E;">~</span> pc1, <span class="at" style="color: #657422;">col=</span>iris<span class="sc" style="color: #5E5E5E;">$</span>Species, <span class="at" style="color: #657422;">cex=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-02-multivariate/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can see that there are three distinct groups of points. PC1 seems to contribute the most to separating the species, whereas PC2 seems to reflect variation within species.</p>
<p>One important point to note is that the axes should be scaled to match each other. One unit on the X axis should occupy the same length of graph as one unit on the Y axis, otherwise the plot will be visually deceptive with regard to how much variation each axis has. Here is how we should scale the Y-axis in order to match the X-axis. Now you can see what the meaning of 97% of the variation being along PC1 is!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">plot</span>(pc2 <span class="sc" style="color: #5E5E5E;">~</span> pc1, <span class="at" style="color: #657422;">col=</span>iris<span class="sc" style="color: #5E5E5E;">$</span>Species, <span class="at" style="color: #657422;">cex=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #657422;">ylim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-02-multivariate/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>What about PC3? It had only 1.7% of the variation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">plot</span>(pc3 <span class="sc" style="color: #5E5E5E;">~</span> pc1, <span class="at" style="color: #657422;">col=</span>iris<span class="sc" style="color: #5E5E5E;">$</span>Species, <span class="at" style="color: #657422;">cex=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #657422;">ylim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-02-multivariate/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">plot</span>(pc3 <span class="sc" style="color: #5E5E5E;">~</span> pc2, <span class="at" style="color: #657422;">col=</span>iris<span class="sc" style="color: #5E5E5E;">$</span>Species, <span class="at" style="color: #657422;">cex=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #657422;">ylim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>), <span class="at" style="color: #657422;">xlim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-02-multivariate/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So we see that most of the separation is achieved along PC1, and we can separate the groups pretty well if we just use PC1 with PC2 or PC3. We can see if the separation is significant using MANOVA:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">manova.iris <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">manova</span>( <span class="fu" style="color: #4758AB;">cbind</span>(pc1, pc2, pc3) <span class="sc" style="color: #5E5E5E;">~</span> Species, <span class="at" style="color: #657422;">data=</span>iris)</span></code></pre></div>
</div>
<p>We obtain the multivariate significance test (differences amongst species) using:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">summary</span>(manova.iris)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           Df Pillai approx F num Df den Df    Pr(&gt;F)    
Species     2 1.1756   69.402      6    292 &lt; 2.2e-16 ***
Residuals 147                                            
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>Or we can also see results using Wilks’ lambda:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">summary</span>(manova.iris, <span class="at" style="color: #657422;">test=</span><span class="st" style="color: #20794D;">"Wilks"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           Df    Wilks approx F num Df den Df    Pr(&gt;F)    
Species     2 0.024809   258.53      6    290 &lt; 2.2e-16 ***
Residuals 147                                              
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>And get univariate statistics here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">summary.aov</span>(manova.iris)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Response pc1 :
             Df Sum Sq Mean Sq F value    Pr(&gt;F)    
Species       2 585.77 292.886  973.27 &lt; 2.2e-16 ***
Residuals   147  44.24   0.301                      
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

 Response pc2 :
             Df Sum Sq Mean Sq F value    Pr(&gt;F)    
Species       2  4.986 2.49300  11.756 1.835e-05 ***
Residuals   147 31.172 0.21205                      
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

 Response pc3 :
             Df  Sum Sq Mean Sq F value    Pr(&gt;F)    
Species       2  1.2578 0.62892  8.8934 0.0002259 ***
Residuals   147 10.3954 0.07072                      
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>By comparing results we see that they are actually pretty well separated along each PC axis, with no real improvement gained by using a multivariate method. I should find another example!</p>
<p>Note: You should decide whether to do PCA using covariance matrices or correlation matrices. The default in R is covariance matrices, and this will preserve the original scale of the data. If we use correlation matrices, then each variable is allowed to contribute equally, irrespective of how wide the range of values within each variable (it’s like they’re all standardized first). So you should only use covariances when all measurements are in the same units, for example all lengths in same units, and it makes sense to relate the magnitude of variation in one to another. Otherwise use correlation matrices.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">pc.iris.cor <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">princomp</span> (<span class="sc" style="color: #5E5E5E;">~</span> .<span class="sc" style="color: #5E5E5E;">-</span>Species, <span class="at" style="color: #657422;">data=</span>iris, <span class="at" style="color: #657422;">scores=</span>T, <span class="at" style="color: #657422;">cor=</span>T)</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;">summary</span>(pc.iris.cor)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Importance of components:
                          Comp.1    Comp.2     Comp.3      Comp.4
Standard deviation     1.7083611 0.9560494 0.38308860 0.143926497
Proportion of Variance 0.7296245 0.2285076 0.03668922 0.005178709
Cumulative Proportion  0.7296245 0.9581321 0.99482129 1.000000000</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">loadings</span>(pc.iris.cor)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Loadings:
             Comp.1 Comp.2 Comp.3 Comp.4
Sepal.Length  0.521  0.377  0.720  0.261
Sepal.Width  -0.269  0.923 -0.244 -0.124
Petal.Length  0.580        -0.142 -0.801
Petal.Width   0.565        -0.634  0.524

               Comp.1 Comp.2 Comp.3 Comp.4
SS loadings      1.00   1.00   1.00   1.00
Proportion Var   0.25   0.25   0.25   0.25
Cumulative Var   0.25   0.50   0.75   1.00</code></pre>
</div>
</div>
<p>You can see that the picture we get is a little different. Now that we use correlation matrices, the dominance of the lengths are reduced (the petals and sepals are much more variable in length than in width). You should go through the analysis yourself.</p>
</section>
<section id="canonical-discriminant-analysis" class="level1">
<h1>Canonical Discriminant Analysis</h1>
<p>The PCA does not at all account for group structure. When we have multiple groups, we sometimes want to control for within-group structure. One reason is that if we adjust for within-group structure, the groups will be better separated. Another is that the directions of within-group differences might be slightly different than the between-group differences, and we don’t want to blend them together because they have different biological meanings. (In this view, the within-group variance is usually the less-interesting portion, and we really are interested in studying the between-group variance).</p>
<p>Another reason to do canonical discriminant analysis is to obtain scores as in PCA to do further analysis. It just produces scores accounting for group structure, so it is like a multi-group PCA. For example, I used this technique to produce a multivariate multi-group ordination in my studies of sexual dimorphism amongst multiple species. I allowed each species and sex to be a different group, and then tested to see if ecomorphs clustered together.</p>
<p>To do this analysis, you need to install the package <code>candisc</code>. And produce a multivariate model as in the manova example above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">require</span>(candisc)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: candisc</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: car</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: carData</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: heplots</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: broom</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'candisc'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:stats':

    cancor</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">iris.multiv <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>( <span class="fu" style="color: #4758AB;">cbind</span>(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) <span class="sc" style="color: #5E5E5E;">~</span> Species, <span class="at" style="color: #657422;">data=</span>iris )</span>
<span id="cb40-2">iris.can <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">candisc</span>( iris.multiv, <span class="at" style="color: #657422;">term=</span><span class="st" style="color: #20794D;">"Species"</span>)</span>
<span id="cb40-3">iris.can</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Canonical Discriminant Analysis for Species:

   CanRsq Eigenvalue Difference  Percent Cumulative
1 0.96987   32.19193     31.907 99.12126     99.121
2 0.22203    0.28539     31.907  0.87874    100.000

Test of H0: The canonical correlations in the 
current row and all that follow are zero

  LR test stat approx F numDF denDF   Pr(&gt; F)    
1      0.02344  199.145     8   288 &lt; 2.2e-16 ***
2      0.77797   13.794     3   145 5.794e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;">plot</span>(iris.can, <span class="at" style="color: #657422;">col=</span><span class="fu" style="color: #4758AB;">as.numeric</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Species))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Vector scale factor set to 7.122</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-03-02-multivariate/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So you can see that by accounting for within-species variation, we get better separation of species. Again, we see the greatest separation along Can1. But interestingly, we see that three of the variables are contributing the most to Can1 (but all are highly correlated).</p>
<p>You can see the loadings on the original variables, as well as the percent variance explained using the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">iris.can<span class="sc" style="color: #5E5E5E;">$</span>structure</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   Can1       Can2
Sepal.Length  0.7918878 0.21759312
Sepal.Width  -0.5307590 0.75798931
Petal.Length  0.9849513 0.04603709
Petal.Width   0.9728120 0.22290236</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">iris.can<span class="sc" style="color: #5E5E5E;">$</span>eigenvalues</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.219193e+01 2.853910e-01 8.276011e-16 7.355228e-16</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">iris.can<span class="sc" style="color: #5E5E5E;">$</span>pct</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9.912126e+01 8.787395e-01 2.548243e-15 2.264727e-15</code></pre>
</div>
</div>
<p><strong>Ninetly-nine percent of the variance</strong> is explained by <strong>Can1</strong>, which is itself dominated by Petal length and width (<strong>.98</strong> and <strong>.97</strong>), and also with a strong contribution by sepal length (<strong>.79</strong>). Sepal width provides a contribution in the opposite direction but its correlation value is less (-0.53). We can get most of the separation between species along simply Can1. The scores of each individual in Can space is given in <code>iris.can</code></p>


</section>

 ]]></description>
  <category>module 3</category>
  <category>week 7</category>
  <category>multivariate</category>
  <category>statistics</category>
  <category>R</category>
  <guid>https://mbutler808.github.io/posts/2023-03-02-multivariate/index.html</guid>
  <pubDate>Tue, 28 Feb 2023 10:00:00 GMT</pubDate>
  <media:content url="https://mbutler808.github.io/images/skew.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Getting data in shape with dplyr</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-02-28-dplyr/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<!-- R emoji aliases:  https://gist.github.com/rxaviers/7360908 -->
<p>🌴</p>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/tibbles" class="uri">https://r4ds.had.co.nz/tibbles</a></li>
<li><a href="https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling" class="uri">https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling</a></li>
<li><a href="http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf">dplyr cheat sheet from RStudio</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-06-managing-data-frames-with-tidyverse/" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-06-managing-data-frames-with-tidyverse/</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-managing-data-frames-with-the-tidyverse" class="uri">https://rdpeng.github.io/Biostat776/lecture-managing-data-frames-with-the-tidyverse</a></li>
<li><a href="https://jhudatascience.org/tidyversecourse/get-data.html#tibbles" class="uri">https://jhudatascience.org/tidyversecourse/get-data.html#tibbles</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand the tools available to get data into the proper structure and shape for downstream analyses</li>
<li>Learn about the dplyr R package to manage data frames</li>
<li>Recognize the key verbs (functions) to manage data frames in dplyr</li>
<li>Use the “pipe” operator to combine verbs together</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>It is still important to understand base R manipulations, particularly for things such as cleaning raw data, troubleshooting, and writing custom functions. But the tidyverse provides many useful tools for data manipuation and analysis of cleaned data. In this session we will learn about <strong>dplyr</strong> and friends.</p>
</section>
<section id="tidy-data" class="level1">
<h1>Tidy data</h1>
<p>The tidyverse has many slogans. A particularly good one for all data analysis is the notion of <strong>tidy data</strong>.</p>
<p>As defined by Hadley Wickham in his 2014 paper published in the <em>Journal of Statistical Software</em>, a <a href="https://www.jstatsoft.org/article/view/v059i10">tidy dataset</a> has the following properties:</p>
<ol type="1">
<li><p>Each variable forms a column.</p></li>
<li><p>Each observation forms a row.</p></li>
<li><p>Each type of observational unit forms a table.</p></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-02-28-dplyr/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/tidydata_1.jpg" class="img-fluid figure-img" style="width:80.0%"></p>
<p></p><figcaption class="figure-caption">Artwork by Allison Horst on tidy data</figcaption><p></p>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
</section>
<section id="what-shapes-does-the-data-need-to-be-in" class="level1">
<h1>What shapes does the data need to be in?</h1>
<p>Beyond the data being tidy, however, we also need to think about what shape it needs to be in. Weʻll review concepts and tools in the next two lessons.</p>
<p>Now that we have had some experience plotting our data, we can see the value of having rectangular dataframes. We can also see that for particular graphics and analyses, we need to have the data arranged in particular ways.</p>
<p>For example, take a look at this elegant graphic below. This single graphic is packed with information on fat, BMR, TEE, and activity levels, all for mulitple species. Is it more effective that individual bar plots? This arrangement is so helpful because you can imagine questions that can be answered with it by comparing the different aspects of the data.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
A very informative figure!
</div>
</div>
<div class="callout-body-container callout-body">
<p><img src="https://mbutler808.github.io/images/humanTEE.png" class="img-fluid" alt="Human total energy expenditure compared with other primates."> <a href="https://www.science.org/content/article/scientist-busts-myths-about-how-humans-burn-calories-and-why?fbclid=IwAR3fzOwd09LBUOR9ely2t4om0-CtYcuT8ux_f46OopQnpiAVENgX_24bWpY">Source: Gibbons, 2022 based on data of H. Ponzer et al., NATURE, 533:90, 2016</a></p>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Can you imagine what this dataset looks like in terms of organization?
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>First imagine what it would look like variable by variable.</li>
<li>How might you intially plot the data?</li>
<li>What organization would you need to make a single figure such as this?</li>
</ol>
</div>
</div>
<p>We often do not know exactly what we need at the start of a data analysis. We have to play around with different data structures, rearrange the data, look for interesting plots to try, rerrange to fit the input requirements of new functions weʻve discovered, and so on.</p>
</section>
<section id="tibbles" class="level1">
<h1>Tibbles</h1>
<p>The <strong>tidyverse</strong> uses as its central data structure, the <strong>tibble</strong> or <strong>tbl_df</strong>. Tibbles are a variation on data frames, claimed to be <em>lazy</em> and <em>surly</em>:</p>
<ul>
<li>They don’t change variable names or types when you construct the tibble.</li>
<li>Don’t convert strings to factors (the default behavior in <code>data.frame()</code>).</li>
<li>Complain more when a variable doesnʻt exist.</li>
<li>No <code>row.names()</code> in a tibble. Instead, you must create a new variable.</li>
<li>Display a different summary style for its <code>print()</code> method.</li>
<li>Allows non-standard R names for variables</li>
<li>Allows columns to be lists.</li>
</ul>
<p>However, most tidyverse functions also work on data frames. Itʻs up to you.</p>
<section id="tibble-constructor" class="level3">
<h3 class="anchored" data-anchor-id="tibble-constructor"><code>tibble()</code> constructor</h3>
<p>Just as with data frames, there is a <code>tibble()</code> constructor function, which functions in many ways with similar syntax as the <code>data.frame()</code> constructor.</p>
<p>If you havenʻt already done so, install the tidyverse:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">require</span>(tibble)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: tibble</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">tibble</span>( iris[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>,] )  <span class="co" style="color: #5E5E5E;"># the first few rows of iris</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 5
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  
1          5.1         3.5          1.4         0.2 setosa 
2          4.9         3            1.4         0.2 setosa 
3          4.7         3.2          1.3         0.2 setosa 
4          4.6         3.1          1.5         0.2 setosa </code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">tibble</span>( x, x <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span> )  <span class="co" style="color: #5E5E5E;"># name assigned at construction</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
      x `x * 2`
  &lt;int&gt;   &lt;dbl&gt;
1     1       2
2     2       4
3     3       6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">silly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(      <span class="co" style="color: #5E5E5E;"># an example of a non-standard names</span></span>
<span id="cb8-2">  <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">one - 3</span><span class="st" style="color: #20794D;">`</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>,  <span class="co" style="color: #5E5E5E;"># name = value syntax</span></span>
<span id="cb8-3">  <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">12</span><span class="st" style="color: #20794D;">`</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"numeric"</span>,</span>
<span id="cb8-4">  <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:)</span><span class="st" style="color: #20794D;">`</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"smile"</span>,</span>
<span id="cb8-5">)</span>
<span id="cb8-6">silly</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  `one - 3` `12`    `:)` 
      &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;
1         1 numeric smile
2         2 numeric smile
3         3 numeric smile</code></pre>
</div>
</div>
</section>
<section id="as_tibble-coersion" class="level3">
<h3 class="anchored" data-anchor-id="as_tibble-coersion"><code>as_tibble()</code> coersion</h3>
<p><code>as_tibble()</code> converts an existing object, such as a data frame or matrix, into a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">as_tibble</span>( iris[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>,] )  <span class="co" style="color: #5E5E5E;"># coercing a dataframe to tibble</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 5
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  
1          5.1         3.5          1.4         0.2 setosa 
2          4.9         3            1.4         0.2 setosa 
3          4.7         3.2          1.3         0.2 setosa 
4          4.6         3.1          1.5         0.2 setosa </code></pre>
</div>
</div>
</section>
<section id="as-output" class="level3">
<h3 class="anchored" data-anchor-id="as-output">As output</h3>
<p>Most often we will get tibbles returned from tidyverse functions such as <code>read_csv()</code> from the <code>readr</code> package.</p>
</section>
</section>
<section id="the-dplyr-package" class="level1">
<h1>The <strong>dplyr</strong> package</h1>
<p>The <strong>dplyr</strong> package, which is part of the <strong>tidyverse</strong> was written to supply a <em>grammar for data manipulation</em>, with verbs for the most common data manipulation tasks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-02-28-dplyr/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_wrangling.png" class="img-fluid figure-img" style="width:80.0%"></p>
<p></p><figcaption class="figure-caption">Artwork by Allison Horst on the dplyr package</figcaption><p></p>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<section id="dplyr-functions" class="level3">
<h3 class="anchored" data-anchor-id="dplyr-functions"><code>dplyr</code> functions</h3>
<ul>
<li><p><code>select()</code>: return a subset of the data frame, using a flexible notation</p></li>
<li><p><code>filter()</code>: extract a subset of rows from a data frame using logical conditions</p></li>
<li><p><code>arrange()</code>: reorder rows of a data frame</p></li>
<li><p><code>rename()</code>: rename columns in a data frame</p></li>
<li><p><code>mutate()</code>: add new columns or transform existing variables</p></li>
<li><p><code>summarize()</code>: generate summary statistics of the variables in the data frame, by strata if data are hierarchical</p></li>
<li><p><code>%&gt;%</code>: the “pipe” operator (from <strong>magrittr</strong>) connects multiple verbs together into a data wrangling pipeline (kind of like making a compound sentence)</p></li>
</ul>
<p>Note: Everything <code>dplyr</code> does could already be done with base R. What is different is a new syntax, which allows for more clarity of the data manipulations and the order, and perhaps makes the code more readable.</p>
<p>Instead of the nested syntax, or typing the dataframe name over and over, we can pipe one operation into the next.</p>
<p>Another useful contribution is that <code>dplyr</code> functions are <strong>very</strong> fast, as many key operations are coded in C++. This will be important for very large datasets or repeated manipulations (say in a simulation study).</p>
</section>
<section id="starwars-dataset" class="level3">
<h3 class="anchored" data-anchor-id="starwars-dataset"><code>starwars</code> dataset</h3>
<p>We will use the <code>starwars</code> dataset included with <code>dplyr</code>. You should check out the help page for this dataset <code>?starwars</code>.</p>
<p>Letʻs start by using the <code>skim()</code> function to check out the dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">require</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: dplyr</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">class</span>(starwars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "tbl_df"     "tbl"        "data.frame"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">skimr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">skim</span>(starwars)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">starwars</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">87</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">14</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">8</td>
</tr>
<tr class="odd">
<td style="text-align: left;">list</td>
<td style="text-align: left;">3</td>
</tr>
<tr class="even">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">3</td>
</tr>
<tr class="odd">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 19%">
<col style="width: 13%">
<col style="width: 19%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">name</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">21</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">87</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">hair_color</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">0.94</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">12</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">skin_color</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">19</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">31</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">eye_color</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">15</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">sex</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0.95</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">gender</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0.95</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">9</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">homeworld</td>
<td style="text-align: right;">10</td>
<td style="text-align: right;">0.89</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">48</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">species</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0.95</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">37</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: list</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 20%">
<col style="width: 14%">
<col style="width: 20%">
<col style="width: 13%">
<col style="width: 15%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">min_length</th>
<th style="text-align: right;">max_length</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">films</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">24</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">7</td>
</tr>
<tr class="even">
<td style="text-align: left;">vehicles</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
</tr>
<tr class="odd">
<td style="text-align: left;">starships</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">5</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 17%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 3%">
<col style="width: 7%">
<col style="width: 4%">
<col style="width: 7%">
<col style="width: 6%">
<col style="width: 7%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">height</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">0.93</td>
<td style="text-align: right;">174.36</td>
<td style="text-align: right;">34.77</td>
<td style="text-align: right;">66</td>
<td style="text-align: right;">167.0</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">191.0</td>
<td style="text-align: right;">264</td>
<td style="text-align: left;">▁▁▇▅▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">mass</td>
<td style="text-align: right;">28</td>
<td style="text-align: right;">0.68</td>
<td style="text-align: right;">97.31</td>
<td style="text-align: right;">169.46</td>
<td style="text-align: right;">15</td>
<td style="text-align: right;">55.6</td>
<td style="text-align: right;">79</td>
<td style="text-align: right;">84.5</td>
<td style="text-align: right;">1358</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">birth_year</td>
<td style="text-align: right;">44</td>
<td style="text-align: right;">0.49</td>
<td style="text-align: right;">87.57</td>
<td style="text-align: right;">154.69</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">35.0</td>
<td style="text-align: right;">52</td>
<td style="text-align: right;">72.0</td>
<td style="text-align: right;">896</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="selecting-columns-with-select" class="level3">
<h3 class="anchored" data-anchor-id="selecting-columns-with-select">Selecting columns with <code>select()</code></h3>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Suppose we wanted to take the first 3 columns only. There are a few ways to do this.</p>
<p>We could for example use numerical indices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">names</span>(starwars)[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "name"   "height" "mass"  </code></pre>
</div>
</div>
<p>But we can also use the names directly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">subset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">select</span>(starwars, <span class="fu" style="color: #4758AB;">c</span>(name, sex<span class="sc" style="color: #5E5E5E;">:</span>species))</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;">head</span>(subset)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  name           sex    gender    homeworld species
  &lt;chr&gt;          &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;  
1 Luke Skywalker male   masculine Tatooine  Human  
2 C-3PO          none   masculine Tatooine  Droid  
3 R2-D2          none   masculine Naboo     Droid  
4 Darth Vader    male   masculine Tatooine  Human  
5 Leia Organa    female feminine  Alderaan  Human  
6 Owen Lars      male   masculine Tatooine  Human  </code></pre>
</div>
</div>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>:</code> normally cannot be used with names or strings, but inside the <code>select()</code> function you can use it to specify a range of variable names.</p>
</div>
</div>
<section id="by-exclusion" class="level4">
<h4 class="anchored" data-anchor-id="by-exclusion">By exclusion</h4>
<p>Variables can be <strong>omited</strong> using the negative sign withing <code>select()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">select</span>( starwars, <span class="sc" style="color: #5E5E5E;">-</span>(sex<span class="sc" style="color: #5E5E5E;">:</span>species))</span></code></pre></div>
</div>
<p>The <code>select()</code> function also has several helper functions that allow matching on patterns. So, for example, if you wanted to keep every variable that ends with “color”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">subset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">select</span>(starwars, <span class="fu" style="color: #4758AB;">ends_with</span>(<span class="st" style="color: #20794D;">"color"</span>))</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;">str</span>(subset)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [87 × 3] (S3: tbl_df/tbl/data.frame)
 $ hair_color: chr [1:87] "blond" NA NA "none" ...
 $ skin_color: chr [1:87] "fair" "gold" "white, blue" "white" ...
 $ eye_color : chr [1:87] "blue" "yellow" "red" "yellow" ...</code></pre>
</div>
</div>
<p>Or all variables that start with n or m:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">subset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">select</span>(starwars, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"n"</span>) <span class="sc" style="color: #5E5E5E;">|</span> <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"m"</span>))</span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;">str</span>(subset)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [87 × 2] (S3: tbl_df/tbl/data.frame)
 $ name: chr [1:87] "Luke Skywalker" "C-3PO" "R2-D2" "Darth Vader" ...
 $ mass: num [1:87] 77 75 32 136 49 120 75 32 84 77 ...</code></pre>
</div>
</div>
<p>You can also use more general <strong>regular expressions</strong>. See the help page (<code>?select</code>) for more details.</p>
</section>
</section>
<section id="subsetting-with-filter" class="level3">
<h3 class="anchored" data-anchor-id="subsetting-with-filter">Subsetting with <code>filter()</code></h3>
<p>The <code>filter()</code> function is used to <strong>extract subsets of rows</strong> or observations from a data frame. This function is similar to the existing <code>subset()</code> function in base R, or indexing by logical comparisons.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-02-28-dplyr/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg" class="img-fluid figure-img" style="width:80.0%"></p>
<p></p><figcaption class="figure-caption">Artwork by Allison Horst on filter() function</figcaption><p></p>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Suppose we wanted to extract the rows of the <code>starwars</code> data frame where the birthyear is greater than 100:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">age100 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">filter</span>(starwars, birth_year <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;">head</span>(age100)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 14
  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵
  &lt;chr&gt;         &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  
1 C-3PO           167    75 &lt;NA&gt;    gold    yellow      112 none  mascu… Tatooi…
2 Chewbacca       228   112 brown   unknown blue        200 male  mascu… Kashyy…
3 Jabba Desil…    175  1358 &lt;NA&gt;    green-… orange      600 herm… mascu… Nal Hu…
4 Yoda             66    17 white   green   brown       896 male  mascu… &lt;NA&gt;   
5 Dooku           193    80 white   fair    brown       102 male  mascu… Serenno
# … with 4 more variables: species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;,
#   starships &lt;list&gt;, and abbreviated variable names ¹​hair_color, ²​skin_color,
#   ³​eye_color, ⁴​birth_year, ⁵​homeworld</code></pre>
</div>
</div>
</div>
</div>
<p>You can see that there are now only 5 rows in the data frame and the distribution of the <code>birth_year</code> values is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">summary</span>(age100<span class="sc" style="color: #5E5E5E;">$</span>birth_year)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    102     112     200     382     600     896 </code></pre>
</div>
</div>
<p>We can also filter on multiple conditions: <em>and</em> requires both conditions to be true, whereas <em>or</em> requires only one to be true. This time letʻs choose <code>birth_year &lt; 100</code> and <code>homeworld == "Tatooine</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">age_tat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">filter</span>(starwars, birth_year <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> homeworld <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Tatooine"</span>)</span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;">select</span>(age_tat, name, height, mass, birth_year, sex)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8 × 5
  name               height  mass birth_year sex   
  &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt; 
1 Luke Skywalker        172    77       19   male  
2 Darth Vader           202   136       41.9 male  
3 Owen Lars             178   120       52   male  
4 Beru Whitesun lars    165    75       47   female
5 Biggs Darklighter     183    84       24   male  
6 Anakin Skywalker      188    84       41.9 male  
7 Shmi Skywalker        163    NA       72   female
8 Cliegg Lars           183    NA       82   male  </code></pre>
</div>
</div>
<p>Other logical operators you should be aware of include:</p>
<table class="table">
<colgroup>
<col style="width: 15%">
<col style="width: 37%">
<col style="width: 46%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: right;">Operator</th>
<th style="text-align: right;">Meaning</th>
<th style="text-align: right;">Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;"><code>==</code></td>
<td style="text-align: right;">Equals</td>
<td style="text-align: right;"><code>homeworld == Tatooine</code></td>
</tr>
<tr class="even">
<td style="text-align: right;"><code>!=</code></td>
<td style="text-align: right;">Does not equal</td>
<td style="text-align: right;"><code>homeworld != Tatooine</code></td>
</tr>
<tr class="odd">
<td style="text-align: right;"><code>&gt;</code></td>
<td style="text-align: right;">Greater than</td>
<td style="text-align: right;"><code>height &gt; 170.0</code></td>
</tr>
<tr class="even">
<td style="text-align: right;"><code>&gt;=</code></td>
<td style="text-align: right;">Greater than or equal to</td>
<td style="text-align: right;"><code>height &gt;= 170.0</code></td>
</tr>
<tr class="odd">
<td style="text-align: right;"><code>&lt;</code></td>
<td style="text-align: right;">Less than</td>
<td style="text-align: right;"><code>height &lt; 170.0</code></td>
</tr>
<tr class="even">
<td style="text-align: right;"><code>&lt;=</code></td>
<td style="text-align: right;">Less than or equal to</td>
<td style="text-align: right;"><code>height &lt;= 170.0</code></td>
</tr>
<tr class="odd">
<td style="text-align: right;"><code>%in%</code></td>
<td style="text-align: right;">Included in</td>
<td style="text-align: right;"><code>homeworld %in% c("Tatooine", "Naboo")</code></td>
</tr>
<tr class="even">
<td style="text-align: right;"><code>is.na()</code></td>
<td style="text-align: right;">Is a missing value</td>
<td style="text-align: right;"><code>is.na(mass)</code></td>
</tr>
</tbody>
</table>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you are ever unsure of how to write a logical statement, but know how to write its opposite, you can use the <code>!</code> operator to negate the whole statement.</p>
<p>A common use of this is to identify observations with non-missing data (e.g., <code>!(is.na(homweworld))</code>).</p>
</div>
</div>
</section>
<section id="sorting-data-with-arrange" class="level3">
<h3 class="anchored" data-anchor-id="sorting-data-with-arrange">Sorting data with <code>arrange()</code></h3>
<p><code>arrange()</code> is like the sort function in a spreadsheet, or <code>order()</code> in base R. <code>arrange()</code> <strong>reorders rows</strong> of a data frame according to one of the columns. Think of this as sorting your rows on the value of a column.</p>
<p>Here we can order the rows of the data frame by birth_year, so that the first row is the earliest (oldest) observation and the last row is the latest (most recent) observation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">starwars <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrange</span>(starwars, birth_year)</span></code></pre></div>
</div>
<p>We can now check the first few rows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">select</span>(starwars, name, birth_year), <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  name                  birth_year
  &lt;chr&gt;                      &lt;dbl&gt;
1 Wicket Systri Warrick          8
2 IG-88                         15
3 Luke Skywalker                19</code></pre>
</div>
</div>
<p>and the last few rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">select</span>(starwars, name, birth_year), <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  name           birth_year
  &lt;chr&gt;               &lt;dbl&gt;
1 Poe Dameron            NA
2 BB8                    NA
3 Captain Phasma         NA</code></pre>
</div>
</div>
<p>Columns can be arranged in descending order using the helper function <code>desc()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">starwars <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrange</span>(starwars, <span class="fu" style="color: #4758AB;">desc</span>(birth_year))</span></code></pre></div>
</div>
<p>Looking at the first three and last three rows shows the dates in descending order.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">select</span>(starwars, name, birth_year), <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  name                  birth_year
  &lt;chr&gt;                      &lt;dbl&gt;
1 Yoda                         896
2 Jabba Desilijic Tiure        600
3 Chewbacca                    200</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">select</span>(starwars, name, birth_year), <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  name           birth_year
  &lt;chr&gt;               &lt;dbl&gt;
1 Poe Dameron            NA
2 BB8                    NA
3 Captain Phasma         NA</code></pre>
</div>
</div>
</section>
<section id="renaming-columns-with-rename" class="level3">
<h3 class="anchored" data-anchor-id="renaming-columns-with-rename">Renaming columns with <code>rename()</code></h3>
<p><strong>Renaming a variable</strong> in a data frame in R is accomplished using the <code>names()</code> function. The <code>rename()</code> function is designed to make this process easier.</p>
<p>Here you can see the names of the first six variables in the <code>starwars</code> data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">head</span>(starwars[, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>], <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 6
  name                  height  mass hair_color skin_color       eye_color
  &lt;chr&gt;                  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;            &lt;chr&gt;    
1 Yoda                      66    17 white      green            brown    
2 Jabba Desilijic Tiure    175  1358 &lt;NA&gt;       green-tan, brown orange   
3 Chewbacca                228   112 brown      unknown          blue     </code></pre>
</div>
</div>
<p>Suppose we wanted to drop the <code>_color</code>. The syntax is <code>newname = oldname</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">starwars <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rename</span>(starwars, <span class="at" style="color: #657422;">hair =</span> hair_color, <span class="at" style="color: #657422;">skin =</span> skin_color, <span class="at" style="color: #657422;">eye =</span> eye_color)</span>
<span id="cb47-2"><span class="fu" style="color: #4758AB;">head</span>(starwars[, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>], <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 6
  name                  height  mass hair  skin             eye   
  &lt;chr&gt;                  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt; 
1 Yoda                      66    17 white green            brown 
2 Jabba Desilijic Tiure    175  1358 &lt;NA&gt;  green-tan, brown orange
3 Chewbacca                228   112 brown unknown          blue  </code></pre>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>How would you do the equivalent in base R without <code>dplyr</code>?</p>
</div>
</div>
</section>
<section id="adding-columns-with-mutate" class="level3">
<h3 class="anchored" data-anchor-id="adding-columns-with-mutate">Adding columns with <code>mutate()</code></h3>
<p>The <code>mutate()</code> function <strong>computes transformations of variables</strong> in a data frame.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-02-28-dplyr/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png" class="img-fluid figure-img" style="width:80.0%"></p>
<p></p><figcaption class="figure-caption">Artwork by Allison Horst on mutate() function</figcaption><p></p>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<p>For example, we may want to adjust height for mass:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">starwars <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">mutate</span>(starwars, <span class="at" style="color: #657422;">heightsize =</span> height <span class="sc" style="color: #5E5E5E;">/</span> mass )</span>
<span id="cb49-2"><span class="fu" style="color: #4758AB;">head</span>(starwars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 15
  name       height  mass hair  skin  eye   birth…¹ sex   gender homew…² species
  &lt;chr&gt;       &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;  
1 Yoda           66    17 white green brown     896 male  mascu… &lt;NA&gt;    Yoda's…
2 Jabba Des…    175  1358 &lt;NA&gt;  gree… oran…     600 herm… mascu… Nal Hu… Hutt   
3 Chewbacca     228   112 brown unkn… blue      200 male  mascu… Kashyy… Wookiee
4 C-3PO         167    75 &lt;NA&gt;  gold  yell…     112 none  mascu… Tatooi… Droid  
5 Dooku         193    80 white fair  brown     102 male  mascu… Serenno Human  
6 Qui-Gon J…    193    89 brown fair  blue       92 male  mascu… &lt;NA&gt;    Human  
# … with 4 more variables: films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;,
#   heightsize &lt;dbl&gt;, and abbreviated variable names ¹​birth_year, ²​homeworld</code></pre>
</div>
</div>
<p>There is also the related <code>transmute()</code> function, which <code>mutate()</code>s and <em>keeps only the transformed variables</em>. Therefore, the result is only two columns in the transmuted data frame.</p>
</section>
<section id="perform-functions-on-groups-using-group_by" class="level3">
<h3 class="anchored" data-anchor-id="perform-functions-on-groups-using-group_by">Perform functions on groups using <code>group_by()</code></h3>
<p>The <code>group_by()</code> function is used to <strong>indicate groups within the data</strong>.</p>
<p>For example, what is the average height by homeworld?</p>
<p><strong>In conjunction</strong> with the <code>group_by()</code> function, we often use the <code>summarize()</code> function.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <strong>general operation</strong> here is a combination of</p>
<ol type="1">
<li>Splitting a data frame by group defined by a variable or group of variables (<code>group_by()</code>)</li>
<li><code>summarize()</code> across those subsets</li>
</ol>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>We can create a separate data frame that splits the original data frame by <code>homeworld</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">worlds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">group_by</span>(starwars, homeworld)</span></code></pre></div>
</div>
<p>Compute summary statistics by planet (just showing mean and median here, almost any summary stat is available):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;">summarize</span>(worlds, <span class="at" style="color: #657422;">height =</span> <span class="fu" style="color: #4758AB;">mean</span>(height, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>), </span>
<span id="cb52-2">          <span class="at" style="color: #657422;">maxheight =</span> <span class="fu" style="color: #4758AB;">max</span>(height, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb52-3">          <span class="at" style="color: #657422;">mass =</span> <span class="fu" style="color: #4758AB;">median</span>(mass, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 49 × 4
   homeworld      height maxheight  mass
   &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;
 1 Alderaan         176.      176.  64  
 2 Aleen Minor       79        79   15  
 3 Bespin           175       175   79  
 4 Bestine IV       180       180  110  
 5 Cato Neimoidia   191       191   90  
 6 Cerea            198       198   82  
 7 Champala         196       196   NA  
 8 Chandrila        150       150   NA  
 9 Concord Dawn     183       183   79  
10 Corellia         175       175   78.5
# … with 39 more rows</code></pre>
</div>
</div>
</div>
</div>
<p><code>summarize()</code> returns a data frame with <code>homeworld</code> as the first column, followed by the requested summary statistics. This is similar to the base R function <code>aggregate()</code>.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
More complicated example
</div>
</div>
<div class="callout-body-container callout-body">
<p>In a slightly more complicated example, we might want to know what are the average masses within quintiles of <code>height</code>:</p>
<p>First, we can create a categorical variable of <code>height5</code> divided into quintiles</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">qq <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">quantile</span>(starwars<span class="sc" style="color: #5E5E5E;">$</span>height, <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>), <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb54-2">starwars <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">mutate</span>(starwars, <span class="at" style="color: #657422;">height.quint =</span> <span class="fu" style="color: #4758AB;">cut</span>(height, qq))</span></code></pre></div>
</div>
<p>Now we can group the data frame by the <code>height.quint</code> variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">quint <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">group_by</span>(starwars, height.quint)</span></code></pre></div>
</div>
<p>Finally, we can compute the mean of <code>mass</code> within quintiles of <code>height</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;">summarize</span>(quint, <span class="at" style="color: #657422;">mquint =</span> <span class="fu" style="color: #4758AB;">mean</span>(mass, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  height.quint mquint
  &lt;fct&gt;         &lt;dbl&gt;
1 (66,165]       44.2
2 (165,175]     187. 
3 (175,183]      79.2
4 (183,193]      80.2
5 (193,264]     106. 
6 &lt;NA&gt;           17  </code></pre>
</div>
</div>
</div>
</div>
<p>Oddly enough there is a maximum mass in the second height quintile of Starwars characters. The biologist in me thinks maybe outliers?</p>
</section>
<section id="piping-multiple-functions-using" class="level3">
<h3 class="anchored" data-anchor-id="piping-multiple-functions-using">Piping multiple functions using <code>%&gt;%</code></h3>
<p>The pipe operator <code>%&gt;%</code> is very handy for <strong>stringing together multiple <code>dplyr</code> functions in a sequence of operations</strong>. It comes from the <strong>magritter</strong> package.</p>
<p><img src="https://mbutler808.github.io/posts/2023-02-28-dplyr/https:/s3-us-west-2.amazonaws.com/collections.lacma.org-images/remote_images/ma-150089-WEB.jpg?AIhOIuuCkaqUYKpVvGmkLe995PGXVHxg" class="img-fluid"> <a href="https://collections.lacma.org/node/239578">Source:</a></p>
<p>In base R, there are two styles of applying multiple functions. The first is the resave the object after each operation.</p>
<p>The second is to nest functions, with the first at the deepest level (the heart of the onion), then working our way out:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;">third</span>(<span class="fu" style="color: #4758AB;">second</span>(<span class="fu" style="color: #4758AB;">first</span>(x)))</span></code></pre></div>
</div>
<p>The <code>%&gt;%</code> operator allows you to string operations in a left-to-right fashion, where the output of one flows into the next, i.e.:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;">first</span>(x) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> second <span class="sc" style="color: #5E5E5E;">%&gt;%</span> third</span></code></pre></div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Take the example that we just did in the last section.</p>
<p>That can be done with the following sequence:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">starwars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb60-2">  <span class="fu" style="color: #4758AB;">group_by</span>(homeworld) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb60-3">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="at" style="color: #657422;">height =</span> <span class="fu" style="color: #4758AB;">mean</span>(height, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>), </span>
<span id="cb60-4">          <span class="at" style="color: #657422;">maxheight =</span> <span class="fu" style="color: #4758AB;">max</span>(height, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb60-5">          <span class="at" style="color: #657422;">mass =</span> <span class="fu" style="color: #4758AB;">median</span>(mass, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 49 × 4
   homeworld      height maxheight  mass
   &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;
 1 Alderaan         176.      176.  64  
 2 Aleen Minor       79        79   15  
 3 Bespin           175       175   79  
 4 Bestine IV       180       180  110  
 5 Cato Neimoidia   191       191   90  
 6 Cerea            198       198   82  
 7 Champala         196       196   NA  
 8 Chandrila        150       150   NA  
 9 Concord Dawn     183       183   79  
10 Corellia         175       175   78.5
# … with 39 more rows</code></pre>
</div>
</div>
</div>
</div>
<section id="data-masking" class="level4">
<h4 class="anchored" data-anchor-id="data-masking">Data masking</h4>
<p>Notice that we did not have to specify the dataframe. This is because dplyr functions are built on a data masking syntax. From the dplyr data-masking help page:</p>
<blockquote class="blockquote">
<p>Data masking allows you to refer to variables in the “current” data frame (usually supplied in the .data argument), without any other prefix. It’s what allows you to type (e.g.) <code>filter(diamonds, x == 0 &amp; y == 0 &amp; z == 0)</code> instead of <code>diamonds[diamonds$x == 0 &amp; diamonds$y == 0 &amp; diamonds$z == 0, ]</code></p>
</blockquote>
<p>When you look at the help page for <code>?mutate</code> for example, you will see a function definition like so:</p>
<blockquote class="blockquote">
<p><code>mutate(.data, ...)</code></p>
</blockquote>
<p>Note the <code>.data</code>, Which means that the data can be supplied as usual, or it can be inherited from the “current” data frame which is passed to it via a pipe.</p>
</section>
</section>
<section id="sample-rows-of-data-with-slice_" class="level3">
<h3 class="anchored" data-anchor-id="sample-rows-of-data-with-slice_">Sample rows of data with <code>slice_*()</code></h3>
<p>The <code>slice_sample()</code> function will <strong>randomly sample rows</strong> of data.</p>
<p>The number of rows to show is specified by the <code>n</code> argument.</p>
<ul>
<li>This can be useful if you <strong>do not want to print the entire tibble</strong>, but you want to get a greater sense of the variation.</li>
</ul>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;">slice_sample</span>(starwars, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 16
   name      height  mass hair  skin  eye   birth…¹ sex   gender homew…² species
   &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;  
 1 C-3PO        167    75 &lt;NA&gt;  gold  yell…     112 none  mascu… Tatooi… Droid  
 2 Eeth Koth    171    NA black brown brown      NA male  mascu… Iridon… Zabrak 
 3 Poe Dame…     NA    NA brown light brown      NA male  mascu… &lt;NA&gt;    Human  
 4 Cordé        157    NA brown light brown      NA fema… femin… Naboo   Human  
 5 Wilhuff …    180    NA aubu… fair  blue       64 male  mascu… Eriadu  Human  
 6 Kit Fisto    196    87 none  green black      NA male  mascu… Glee A… Nautol…
 7 Quarsh P…    183    NA black dark  brown      62 &lt;NA&gt;  &lt;NA&gt;   Naboo   &lt;NA&gt;   
 8 Rugor Na…    206    NA none  green oran…      NA male  mascu… Naboo   Gungan 
 9 Cliegg L…    183    NA brown fair  blue       82 male  mascu… Tatooi… Human  
10 Mas Amed…    196    NA none  blue  blue       NA male  mascu… Champa… Chagri…
# … with 5 more variables: films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;,
#   heightsize &lt;dbl&gt;, height.quint &lt;fct&gt;, and abbreviated variable names
#   ¹​birth_year, ²​homeworld</code></pre>
</div>
</div>
</div>
</div>
<p>You can also use <code>slice_head()</code> or <code>slice_tail()</code> to take a look at the top rows or bottom rows of your tibble. Again the number of rows can be specified with the <code>n</code> argument.</p>
<p>This will show the first 5 rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;">slice_head</span>(starwars, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 16
  name       height  mass hair  skin  eye   birth…¹ sex   gender homew…² species
  &lt;chr&gt;       &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;  
1 Yoda           66    17 white green brown     896 male  mascu… &lt;NA&gt;    Yoda's…
2 Jabba Des…    175  1358 &lt;NA&gt;  gree… oran…     600 herm… mascu… Nal Hu… Hutt   
3 Chewbacca     228   112 brown unkn… blue      200 male  mascu… Kashyy… Wookiee
4 C-3PO         167    75 &lt;NA&gt;  gold  yell…     112 none  mascu… Tatooi… Droid  
5 Dooku         193    80 white fair  brown     102 male  mascu… Serenno Human  
# … with 5 more variables: films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;,
#   heightsize &lt;dbl&gt;, height.quint &lt;fct&gt;, and abbreviated variable names
#   ¹​birth_year, ²​homeworld</code></pre>
</div>
</div>
<p>This will show the last 5 rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;">slice_tail</span>(starwars, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 16
  name       height  mass hair  skin  eye   birth…¹ sex   gender homew…² species
  &lt;chr&gt;       &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;  
1 Finn           NA    NA black dark  dark       NA male  mascu… &lt;NA&gt;    Human  
2 Rey            NA    NA brown light hazel      NA fema… femin… &lt;NA&gt;    Human  
3 Poe Damer…     NA    NA brown light brown      NA male  mascu… &lt;NA&gt;    Human  
4 BB8            NA    NA none  none  black      NA none  mascu… &lt;NA&gt;    Droid  
5 Captain P…     NA    NA unkn… unkn… unkn…      NA &lt;NA&gt;  &lt;NA&gt;   &lt;NA&gt;    &lt;NA&gt;   
# … with 5 more variables: films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;,
#   heightsize &lt;dbl&gt;, height.quint &lt;fct&gt;, and abbreviated variable names
#   ¹​birth_year, ²​homeworld</code></pre>
</div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>The <code>dplyr</code> package provides an alternative syntax for manipulating data frames. In particular, we can often conduct the beginnings of an exploratory analysis with the powerful combination of <code>group_by()</code> and <code>summarize()</code>.</p>
<p>Once you learn the <code>dplyr</code> grammar there are a few additional benefits</p>
<ul>
<li><p><code>dplyr</code> can work with other data frame “back ends” such as SQL databases. There is an SQL interface for relational databases via the DBI package</p></li>
<li><p><code>dplyr</code> can be integrated with the <code>data.table</code> package for large fast tables</p></li>
<li><p>Many people like the piping syntax for readability and clarity</p></li>
</ul>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>How can you tell if an object is a tibble?</li>
<li>Using the <code>trees</code> dataset in base R (this dataset stores the girth, height, and volume for Black Cherry Trees) and using the pipe operator:
<ol type="i">
<li>convert the <code>data.frame</code> to a tibble.</li>
<li>filter for rows with a tree height of greater than 70, and</li>
<li>order rows by <code>Volume</code> (smallest to largest).</li>
</ol></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;">head</span>(trees)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Girth Height Volume
1   8.3     70   10.3
2   8.6     65   10.3
3   8.8     63   10.2
4  10.5     72   16.4
5  10.7     81   18.8
6  10.8     83   19.7</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling" class="uri">https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling</a></li>
<li><a href="http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf">dplyr cheat sheet from RStudio</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 3</category>
  <category>week 7</category>
  <category>tidyr</category>
  <category>tidyverse</category>
  <category>dplyr</category>
  <category>tibble</category>
  <category>pipe</category>
  <guid>https://mbutler808.github.io/posts/2023-02-28-dplyr/index.html</guid>
  <pubDate>Tue, 28 Feb 2023 10:00:00 GMT</pubDate>
  <media:content url="https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/tidydata_1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The ggplot2 package</title>
  <dc:creator>Marguerite Butler</dc:creator>
  <link>https://mbutler808.github.io/posts/2023-02-21-ggplot2/index.html</link>
  <description><![CDATA[ 




<!-- R emoji aliases:  https://gist.github.com/rxaviers/7360908 -->
<!-- NA -->
<section id="excellent-references" class="level3">
<h3 class="anchored" data-anchor-id="excellent-references">Excellent references</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
For more details see
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Wonderful Window shopping in the R graph gallery (with code): <a href="https://r-graph-gallery.com" class="uri">https://r-graph-gallery.com</a></li>
<li>The “grammar of graphics” explained in Hadley Wickamʻs article: <a href="http://vita.had.co.nz/papers/layered-grammar.pdf" class="uri">http://vita.had.co.nz/papers/layered-grammar.pdf</a></li>
<li>Very gentle intro for beginners: <a href="https://posit.cloud/learn/primers/3" class="uri">https://posit.cloud/learn/primers/3</a></li>
<li>Hadley Wickamʻs overview: <a href="https://r4ds.had.co.nz/data-visualisation" class="uri">https://r4ds.had.co.nz/data-visualisation</a></li>
<li>Cedric Schererʻs Step-by-step tutorial: <a href="https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/" class="uri">https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/</a></li>
<li>For in-depth reading, Hadley Wickamʻs ggplot2 book: <a href="https://ggplot2-book.org" class="uri">https://ggplot2-book.org</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html" class="uri">http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html</a></li>
<li><a href="https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-15-ggplot2-plotting-system-part-2/" class="uri">https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-15-ggplot2-plotting-system-part-2/</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-2" class="uri">https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-2</a></li>
</ul>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to build up layers of graphics using <code>ggplot()</code></li>
<li>Be able to modify properties of a <code>ggplot()</code> including layers and labels</li>
</ul>
</div>
</div>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>Last time we discussed the elements of plotting in the R base graphical system. The base functions such as <code>plot()</code> open a new plot window and set up the coordinate system, axes, and often return the default plot. Annotations can be added onto a plot with additional functions such as <code>points()</code>, <code>lines()</code>, <code>text()</code>, etc. Many other plotting functions exist too, you can check out the <code>graphics</code> package <a href="https://rdocumentation.org/packages/graphics/versions/3.6.2" class="uri">https://rdocumentation.org/packages/graphics/versions/3.6.2</a>. Or type <code>?graphics</code> at the R prompt and check out the help page index.</p>
<p>Today we will learn about the <a href="https://ggplot2.tidyverse.org"><code>ggplot2</code> package</a> written by Hadley Wickam <a href="https://hadley.nz" class="uri">https://hadley.nz</a>. <code>ggplot2</code> introduces a new syntax for plotting, based on the idea of a <em>grammar of graphics</em>. The idea is that the user supplies the data, specifies how ggplot2 maps variables to aesthetics, what graphical primitives or types to use, and it takes care of the details. The grammar of graphics builds plots in layers.</p>
<p>Just as in spoken language, where a beginner can form many sentences from only learning a handful of verbs, nouns and adjectives, using the ggplot2 grammar, even beginners can create hundreds of different plots.</p>
<p>Note that <code>ggplot2</code> is part of the <code>tidyverse</code> and thus is designed to work exclusively with data tables in tidy format (rectangular data where rows are observations and columns are variables).</p>
<p>Being literate in ggplot2 requires using several functions and arguments, which may not make sense at first. The ggplot2 cheat sheet can be super helpful: <a href="https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf" class="uri">https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf</a> or google “ggplot2 cheat sheet”.</p>
<p>The first step in learning <code>ggplot2</code> is to understand the basic elements of the grammar:</p>
<section id="basic-components-of-a-ggplot2-plot" class="level2">
<h2 class="anchored" data-anchor-id="basic-components-of-a-ggplot2-plot">Basic components of a ggplot2 plot</h2>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Key components
</div>
</div>
<div class="callout-body-container callout-body">
<p>A <strong><code>ggplot2</code> plot</strong> consists of a number of <strong>key components</strong>.</p>
<ul>
<li><strong>Data</strong>: In the form of a dataframe or tibble, containing all of the data that will be displayed on the plot.</li>
<li><strong>Geometry</strong>: The geometry or <code>geoms</code> define the style of the plot such as scatterplot, barplot, histogram, violin plots, smooth densities, qqplot, boxplot, and others.</li>
<li><strong>Aesthetic mapping</strong>: Aesthetic mappings describe how data are mapped to color, size, shape, location, or to legend elements. How we define the mapping depends on what geometry we are using.</li>
</ul>
<p>Nearly all plots drawn with ggplot2 will have the above compoents. In addition you may want to have specify <strong>additional elements</strong>:</p>
<ul>
<li><p><strong>Facets</strong>: When used, facets describe how panel plots based on partions of the data should be drawn.</p></li>
<li><p><strong>Statistical Transformations</strong>: Or <strong>stats</strong> are transformations of the data such as log-transformation, binning, quantiles, smoothing.</p></li>
<li><p><strong>Scales</strong>: Scales are used to indicate which factors are associated with the levels of the aesthetic mapping. Use manual scales to specify each level.</p></li>
<li><p><strong>Coordinate System</strong>: ggplot2 will use a default coordinate system drawn from the data, but you can customize the coordinate system in which the locations of the geoms will be drawn</p></li>
</ul>
</div>
</div>
<p>Plots are built up in layers, with the typical ordering being</p>
<ol type="1">
<li>Plot the data</li>
<li>Overlay a summary that reveals the relationship</li>
<li>Add metadata and annotation</li>
</ol>
</section>
</section>
<section id="creating-a-ggplot-object" class="level1">
<h1>Creating a ggplot object</h1>
<p><code>ggplot2</code> works by creating a ggplot object that can you can then add to. The <code>ggplot()</code> function initializes the graph object, usually by specifying the data. See the <code>?ggplot</code> help page.</p>
<p>Weʻll start by loading the ggplot package and using the built-in <code>iris</code> dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">require</span>(ggplot2) </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ggplot2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data =</span> iris)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Another way to send data to the function is through piping. These are both equivalent to the line above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">iris <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">ggplot</span>()</span>
<span id="cb4-2">iris <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">ggplot</span>()</span></code></pre></div>
</div>
<p>The <code>%&gt;%</code> is the older pipe operator, but you will start to see <code>|&gt;</code> more often now too.</p>
<p>You have sent data to <code>ggplot()</code> but it is a blank canvas because you have given it no geometry to plot (no points, bars, etc.)</p>
<p>It is an object, so you can save it to a named variable, say <code>p</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data =</span> iris)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">class</span>(p)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "gg"     "ggplot"</code></pre>
</div>
</div>
<p>To render the plot associated with this object, we simply print the object p.&nbsp;We can do this in interactive mode by simply typing <code>p</code> at the command line or using the <code>print()</code> function. However, in a script, you will want to use the <code>print()</code> function, and typically print it to a pdf device.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb7-2">p</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;">pdf</span>()       <span class="co" style="color: #5E5E5E;"># opens a pdf device</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;">print</span>(p)  <span class="co" style="color: #5E5E5E;"># prints the plot</span></span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;">dev.off</span>()   <span class="co" style="color: #5E5E5E;"># closes pdf device</span></span></code></pre></div>
</div>
</section>
<section id="layers" class="level1">
<h1>Layers</h1>
<p>Additional components are added in layers, which is to say, separate R statements added on to the object with the <code>+</code> operator. Layers are very flexible and can define geometries, compute summary statistics, define what scales to use, or even change styles.</p>
<p>A template for creating a plot with layers would look like this:</p>
<blockquote class="blockquote">
<p>DATA |&gt; ggplot() + LAYER1 + LAYER2 + … + LAYERN</p>
</blockquote>
<p>To save it to a ggplot object, say <code>p</code>:</p>
<blockquote class="blockquote">
<p>p &lt;- DATA |&gt; ggplot() + LAYER1 + LAYER2</p>
</blockquote>
<p>Or if you want to save different varieties of objects or at different stages, just assign them to different names:</p>
<blockquote class="blockquote">
<p>q &lt;- p + LAYER3<br>
r &lt;- p + LAYER4</p>
</blockquote>
</section>
<section id="geometries" class="level1">
<h1>Geometries</h1>
<p>The geometry specifies the geometrical elements such as points, lines, etc. which in turn determines the kind of plot that we want to make. If We want to make a scatterplot. What geometry do we use?</p>
<p>Taking a quick look at the <a href="https://posit.co/resources/cheatsheets/">cheat sheet</a>, we see that the function used to create plots with this geometry is <code>geom_point</code>.</p>
<p><embed src="https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf" class="img-fluid"></p>
<p>It will take you a bit to get familiar with the naming conventions, but with them you can use some powerful tools.</p>
<p>Geometry function names follow the pattern: geom_ followed by the name of the geometry. Some examples include <code>geom_point</code>, <code>geom_bar</code>, and <code>geom_histogram</code>.</p>
<p>For <code>geom_point</code> to run properly we need to provide <strong>data</strong> and a <strong>mapping</strong>. We have already connected the object p with the iris data table, and if we add the layer <code>geom_point</code> it defaults to using this data.</p>
<p>To find out what mappings are expected, jump down to the <strong>Aesthetics section</strong> of the help file <code>geom_point</code> help file. It states that the required aesthetics are in bold. Which arguments are required?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">?geom_point</span></code></pre></div>
</div>
<p>It should come as no surprise that to make points appear, you need to specify <code>x</code> and <code>y</code>.</p>
</section>
<section id="aesthetic-mappings" class="level1">
<h1>Aesthetic mappings</h1>
<p><strong>Aesthetic mappings</strong> connect elements of the data with features of the graph, such as distance along an axis, size, or color.</p>
<p>The <code>aes()</code> function, used inside of a <strong>geom</strong> is where the mappings happen, that is where data are connected with graph elements through defining <strong>aesthetic mappings</strong> (you will see this lingo a lot).</p>
<p>To produce a scatterplot of <code>Petal.Length</code> by <code>Petal.Width</code> we could use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">iris <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Petal.Length, <span class="at" style="color: #657422;">y =</span> Petal.Width))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can drop the x = and y = if we wanted to since these are the first and second expected arguments, as seen in the help page.</p>
<p>Instead of defining our plot from scratch, if we save the object as <code>p</code> we can also add a layer to the <code>p</code> object. The lines below produce the same plot (verify yourself):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data =</span> iris)</span>
<span id="cb10-2">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(Petal.Length, Petal.Width))</span></code></pre></div>
</div>
<p>Nothing else was specified, so the <strong>scale</strong> and <strong>labels</strong> are defined by default when adding this layer. <strong>aes</strong> uses the variable names from the vectors within the data object: we donʻt have to call them as <code>iris$Petal.Length</code> and <code>iris$Petal.Width</code>.</p>
<p>The behavior of recognizing the variables from the data component is quite specific to <strong>aes</strong>. With most functions, if you try to access the values of Petal.Length outside of aes you receive an error.</p>
</section>
<section id="adding-annotations-more-layers" class="level1">
<h1>Adding annotations (more layers)</h1>
<p>Suppose we wanted to label each point on the plot. First we add numbers to the iris data and remake the ggplot object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">iris<span class="sc" style="color: #5E5E5E;">$</span>id <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Species)) </span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">head</span>(iris)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species id
1          5.1         3.5          1.4         0.2  setosa  1
2          4.9         3.0          1.4         0.2  setosa  2
3          4.7         3.2          1.3         0.2  setosa  3
4          4.6         3.1          1.5         0.2  setosa  4
5          5.0         3.6          1.4         0.2  setosa  5
6          5.4         3.9          1.7         0.4  setosa  6</code></pre>
</div>
</div>
<p>The <code>geom_label</code> and <code>geom_text</code> functions add text to the plot with and without a rectangle behind the text, respectively.</p>
<p>Because each point has a label (id), we need an aesthetic mapping to make the connection between points and labels. By reading the help file, we learn that we supply the mapping between point and label through the label argument of aes. So the code looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> iris <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(Petal.Length, Petal.Width)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(Petal.Length, Petal.Width, <span class="at" style="color: #657422;">label =</span> id))</span>
<span id="cb13-4">p  </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Itʻs a mess because there are many identical points, but you can see how it works.</p>
<p>Pay special attention to what goes <strong>inside</strong> and <strong>outside</strong> of the <code>aes()</code>.</p>
<p>Note:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">p_test <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(Petal.Length, Petal.Width, <span class="at" style="color: #657422;">label =</span> id))</span></code></pre></div>
</div>
<p>Works, but moving <code>label=id</code>outside of the <code>aes()</code> does not:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">p_test <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(Petal.Length, Petal.Width), <span class="at" style="color: #657422;">label =</span> id)</span></code></pre></div>
</div>
<p>The variable <code>id</code> is only understood to be part of the original dataframe inside of <code>aes()</code>. More on this later.</p>
</section>
<section id="global-versus-local-aesthetic-mappings" class="level1">
<h1>Global versus local aesthetic mappings</h1>
<p>In the previous example, we define the mapping <code>aes(Petal.Length, Petal.Width)</code> twice, once in each geometry.</p>
<p>If the same mapping applies to each component of the plot, we can use a <strong>global aesthetic mapping</strong>. Generally we do this when we define the blank slate ggplot object. Remember that the function ggplot contains an argument that permits us to define aesthetic mappings:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">args</span>(ggplot)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (data = NULL, mapping = aes(), ..., environment = parent.frame()) 
NULL</code></pre>
</div>
</div>
<p>If we define a mapping in ggplot, all the geometries that are added as layers will default to this mapping. We redefine p:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> iris <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(Petal.Length, Petal.Width, <span class="at" style="color: #657422;">label=</span>id)) </span></code></pre></div>
</div>
<p>and then we can simply write the following code to produce the previous plot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="at" style="color: #657422;">nudge_x =</span> .<span class="dv" style="color: #AD0000;">15</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We keep the size and nudge_x arguments in geom_point and geom_text, respectively, because we want to only increase the size of points and only nudge the labels. If we put those arguments in aes then they would apply to both plots. Also note that the geom_point function does not need a label argument and therefore ignores that aesthetic.</p>
<p>If necessary, we can override the global mapping by defining a new mapping within each layer. These local definitions override the global. Here is an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Hello there!"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Clearly, the second call to geom_text does not use population and total.</p>
</section>
<section id="scales" class="level1">
<h1>Scales</h1>
<p>Changing scales is a common task. For example, in morphometrics, we often use a log scale. We can log transform the plot (how it looks without changing the data) through a scales layer. A quick look at the cheat sheet reveals the <strong>scale_x_continuous</strong> function lets us control the behavior of scales. We use them like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="at" style="color: #657422;">nudge_x =</span> <span class="fl" style="color: #AD0000;">0.05</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">trans =</span> <span class="st" style="color: #20794D;">"log10"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">trans =</span> <span class="st" style="color: #20794D;">"log10"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Because we are in the log-scale now, the nudge must be made smaller.</p>
<p>This particular transformation is so common that ggplot2 provides the special functions <strong>scale_x_log10</strong> and <strong>scale_y_log10</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="at" style="color: #657422;">nudge_x =</span> <span class="fl" style="color: #AD0000;">0.05</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="labels-and-titles" class="level1">
<h1>Labels and titles</h1>
<p>Similarly, the cheat sheet shows that to change labels and add a title, we use the following functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">q <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="at" style="color: #657422;">nudge_x =</span> <span class="fl" style="color: #AD0000;">0.05</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Petal Length (log scale)"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb23-6">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Petal Width (log scale)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-7">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Fisherʻs Iris dataset"</span>)</span></code></pre></div>
</div>
<p>We are almost there! All we have left to do is add color, a legend, and optional changes to the style.</p>
</section>
<section id="color-annotations-by-group" class="level1">
<h1>Color annotations by group</h1>
<p>We can change the color of the points using the <code>col</code> argument in the <code>geom_point()</code> function. To facilitate demonstration of new features, we will save the log-scaled plot as q and include everything except the points layer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">q <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">color =</span><span class="st" style="color: #20794D;">"blue"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This, of course, is not what we want. We want to assign color depending on the Species. A nice default behavior of ggplot2 is that if we assign a categorical variable to color, it automatically assigns a different color to each category and also adds a legend.</p>
<p>Since the choice of color is determined by a feature of each observation, this is an aesthetic mapping. To map each point to a color, we need to use aes. We use the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">q <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Why donʻt we need to supply the x and y? Those mappings are inherited from the global aes specification in <strong>p</strong>.</p>
<p>Suppose we wanted to use a custom color palette for our data. How do we specify them? Notice that the <strong>aes(col=Species)</strong> indicates which <strong>points</strong> are grouped by color according to the <strong>Species</strong> value. <em>Nothing in the vector Species indicates a color.</em></p>
<p>Recall that Species is actually a <strong>factor</strong>, and so the values would be 1,2,3. How does this information get translated? In R, numbers are translated into a default color vector for plot.</p>
<section id="specifying-custom-colors" class="level3">
<h3 class="anchored" data-anchor-id="specifying-custom-colors">Specifying custom colors</h3>
<p>The values of the colors we wish to use are specified in the scale parameter <strong>scale_color_manual</strong>. For these examples, letʻs go back to the untransformed values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>, <span class="st" style="color: #20794D;">"blue"</span>, <span class="st" style="color: #20794D;">"purple"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>R has hundreds of named colors. You can see the names with the <code>colors()</code> function. There is a cool little function in the <strong>easyGgplot2</strong> package that displays the colors. Now we have a lot of fancy colors to play with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"remotes"</span>)</span>
<span id="cb27-2">remotes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"kassambara/easyGgplot2"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">easyGgplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">showCols</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="specifying-colors-by-level" class="level3">
<h3 class="anchored" data-anchor-id="specifying-colors-by-level">Specifying colors by level</h3>
<p>We can control which color is matched with which level of species. Looking at the help page for <strong>scale_color_manual</strong>, under <em>values</em> we see the explanation:</p>
<blockquote class="blockquote">
<p><strong>values</strong><br>
a set of aesthetic values to map data values to. The values will be matched in order (usually alphabetical) with the limits of the scale, or with breaks if provided. If this is a <strong>named vector</strong>, then the <em>values will be matched based on the names instead</em>. Data values that don’t match will be given na.value.</p>
</blockquote>
<p>Letʻs use some of these fun colors, by creating a vector <code>cols</code> of color names and passing it to the <code>values</code> argument of <code>scale_color_manual</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">cols <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"darkorange"</span>, <span class="st" style="color: #20794D;">"navyblue"</span>, <span class="st" style="color: #20794D;">"deeppink"</span>)</span>
<span id="cb29-2"></span>
<span id="cb29-3">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is great! But what if we wanted to have pink on the bottom (setosa), orange in the middle (versicolor), and navy (virginica) on the top? Playing with the vector by trial and error always works, but what if we had a dozen species?</p>
</section>
<section id="named-color-vector" class="level3">
<h3 class="anchored" data-anchor-id="named-color-vector">Named color vector</h3>
<p>We can specify the match of colors to specific species by naming the <code>cols</code> vector with the species names. Then the <code>cols</code> vector will have color values, named by the species they represent:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">cols <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"darkorange"</span>, <span class="st" style="color: #20794D;">"navyblue"</span>, <span class="st" style="color: #20794D;">"deeppink"</span>)</span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;">names</span>(cols) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"versicolor"</span>, <span class="st" style="color: #20794D;">"virginica"</span>, <span class="st" style="color: #20794D;">"setosa"</span>)</span>
<span id="cb30-3"></span>
<span id="cb30-4">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb30-5">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Voila! <code>names(cols)</code> and <code>cols</code> are a perfect example of a key - value pair.</p>
</section>
<section id="transparency" class="level3">
<h3 class="anchored" data-anchor-id="transparency">Transparency</h3>
<p>The transparency of colors is controlled by the aesthetic <code>alpha</code>, where 1 indicates 100% opacity (or 0 transparency), with smaller decimals indicating more transparency.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Transparency really helps with overlapping points.</p>
</section>
<section id="jitter" class="level3">
<h3 class="anchored" data-anchor-id="jitter">Jitter</h3>
<p>Another way of dealing with overlapping points is to add a little random noise to each, called <strong>jitter</strong>. Try using <code>geom_jitter</code> instead of <code>geom_point</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If you want to see where the jitter is relative to the true coordinates, you can use both:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here the true points are in color, and the jitter is shown in the smaller black points.</p>
<p>Jitter is fine for discrete values to spread it out for visualization (say jitter along the discrete axis but not the continuous axis), <em>but not as ideal for metric data where distance along the axis really mean something</em>.</p>
</section>
</section>
<section id="side-by-side-plots" class="level1">
<h1>Side by side plots</h1>
<p>Facets work great when they are subsets of the same data, but when you have different data or you want to apply different geoms or aesthetics and compare, you need a more general purpose panel system.</p>
<p>The <code>cowplot</code> package was written for arranging multiple plots. Letʻs compare what it looks like to jitter the black dots vs.&nbsp;jittering the transparent circles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"cowplot"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;">require</span>(cowplot)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: cowplot</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">plot1 <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>))</span>
<span id="cb37-4"></span>
<span id="cb37-5">plot2 <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-6">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-7">  <span class="fu" style="color: #4758AB;">geom_jitter</span>()</span>
<span id="cb37-8">  </span>
<span id="cb37-9"><span class="fu" style="color: #4758AB;">plot_grid</span>(plot1, plot2, <span class="at" style="color: #657422;">labels=</span><span class="st" style="color: #20794D;">"AUTO"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The labels arguement is to label the plots, for example for publication.</p>
<p>Another example, suppose we want to explore variation along <code>Sepal.Length</code> by <code>Species</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">plot1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(iris, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Species, <span class="at" style="color: #657422;">y =</span> Sepal.Length, <span class="at" style="color: #657422;">fill=</span>Species)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols,  <span class="at" style="color: #657422;">aesthetics=</span><span class="st" style="color: #20794D;">"fill"</span>) </span>
<span id="cb38-4"> </span>
<span id="cb38-5">plot2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(iris, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Sepal.Length, <span class="at" style="color: #657422;">fill =</span> Species, <span class="at" style="color: #657422;">col=</span>Species)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb38-6">  <span class="fu" style="color: #4758AB;">geom_density</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb38-7">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols, <span class="at" style="color: #657422;">aesthetics=</span><span class="st" style="color: #20794D;">"fill"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb38-8">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.8</span>))</span>
<span id="cb38-9">  </span>
<span id="cb38-10"><span class="fu" style="color: #4758AB;">plot_grid</span>(plot1, plot2, <span class="at" style="color: #657422;">labels=</span><span class="st" style="color: #20794D;">"AUTO"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is not quite right - we need to fix it! Please check the help pages.</p>
</section>
<section id="annotation-shapes-and-adjustments" class="level1">
<h1>Annotation, shapes, and adjustments</h1>
<p>We often want to add shapes or annotation to figures that are not derived directly from the aesthetic mapping; examples include labels, boxes, shaded areas, and lines.</p>
<section id="scatterplot-with-smoother" class="level3">
<h3 class="anchored" data-anchor-id="scatterplot-with-smoother">Scatterplot with smoother</h3>
<p><strong>geom_smooth()</strong> adds a smoothing line but the default is a <strong>loess</strong> smoother, which is flexible and nonparametric but might be too flexible for our purposes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb39-2">    <span class="fu" style="color: #4758AB;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The following aesthetics were dropped during statistical transformation: label
ℹ This can happen when ggplot fails to infer the correct grouping structure in
  the data.
ℹ Did you forget to specify a `group` aesthetic or to convert a numerical
  variable into a factor?</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-32-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We get a warning because we are not using the <code>label</code> aesthetic (remember it is =id). There is no problem but to stop the annoying warnings, letʻs leave off <code>label</code> until we need it.</p>
<p>If we want to explain a simple linear trend between the <code>x</code> and <code>y</code> variables, perhaps we’d prefer a linear regression line.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> iris <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Petal.Length, <span class="at" style="color: #657422;">y =</span> Petal.Width))</span>
<span id="cb42-2"></span>
<span id="cb42-3">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb42-4">    <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-33-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Or without the standard error envelope:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb44-2">    <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>, <span class="at" style="color: #657422;">se=</span><span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-34-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can also compute the regression separately and add the line using <code>geom_abline()</code>, similar to the base R <code>abline()</code> function. Note: the ab in the name is to remind us we are supplying the intercept (a) and slope (b).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">lm.fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Petal.Width <span class="sc" style="color: #5E5E5E;">~</span> iris<span class="sc" style="color: #5E5E5E;">$</span>Petal.Length)</span>
<span id="cb46-2"></span>
<span id="cb46-3">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-4">    <span class="fu" style="color: #4758AB;">geom_abline</span>(<span class="at" style="color: #657422;">intercept =</span> <span class="fu" style="color: #4758AB;">coef</span>(lm.fit)[<span class="dv" style="color: #AD0000;">1</span>], <span class="at" style="color: #657422;">slope=</span> <span class="fu" style="color: #4758AB;">coef</span>(lm.fit)[<span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here <code>geom_abline()</code> does not use any information from the data object, only the regression coefficients.</p>
<p>We can change the line type and color of the lines using arguments. Also, we draw it first so it doesn’t go over our points.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_abline</span>(<span class="at" style="color: #657422;">intercept =</span> <span class="fu" style="color: #4758AB;">coef</span>(lm.fit)[<span class="dv" style="color: #AD0000;">1</span>], </span>
<span id="cb47-2">                <span class="at" style="color: #657422;">slope=</span> <span class="fu" style="color: #4758AB;">coef</span>(lm.fit)[<span class="dv" style="color: #AD0000;">2</span>],</span>
<span id="cb47-3">                <span class="at" style="color: #657422;">lty =</span> <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb47-4">                <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkgrey"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb47-5">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>)  </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="geom_-by-group" class="level3">
<h3 class="anchored" data-anchor-id="geom_-by-group"><strong>geom</strong>_ by group</h3>
<p>We can see that although the three species of iris generally fall along a line, that there are clusters by species. Perhaps separate linear models by group may be a better fit.</p>
<p>There are two ways that we can do this. The first is to put a grouping aesthetic within the smoother.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb48-2">    <span class="fu" style="color: #4758AB;">geom_smooth</span>( <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group=</span>Species), <span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-37-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Another way to do this is to add col (here as a grouping variable) in the global ggplot aesthetic, which will apply to all downstream layers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">r <span class="ot" style="color: #003B4F;">&lt;-</span> iris <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Petal.Length, <span class="at" style="color: #657422;">y=</span> Petal.Width, <span class="at" style="color: #657422;">col=</span>Species)) </span>
<span id="cb50-2"> </span>
<span id="cb50-3">r <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb50-4">    <span class="fu" style="color: #4758AB;">geom_smooth</span>( <span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="multi-panel-plots-facet_wrap" class="level3">
<h3 class="anchored" data-anchor-id="multi-panel-plots-facet_wrap">Multi panel plots <strong>facet_wrap</strong></h3>
<p><a href="https://ggplot2-book.org/facet.html">Facets</a> are what ggplot calls multi-panel plots. They split the data by some factor, which can be very helpful for viewing varition of subsets of the data.</p>
<p>The two main functions are <code>facet_wrap()</code> and <code>facet_grid()</code></p>
<p><strong>facet_wrap()</strong> lays the panels out in a ribbon, in sequential order. See the documentation for arguments to control the number of rows or columns, etc.</p>
<p>The faceting variable (here, Species) is using formula syntax <code>~Species</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb52-2">   <span class="fu" style="color: #4758AB;">geom_smooth</span>( <span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb52-3">   <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>Species)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-39-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><strong>facet_grid()</strong> is explicity a grid. The syntax <code>. ~ Species</code> facets by column. a</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb54-2">   <span class="fu" style="color: #4758AB;">geom_smooth</span>( <span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb54-3">   <span class="fu" style="color: #4758AB;">facet_grid</span>(. <span class="sc" style="color: #5E5E5E;">~</span> Species)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The syntax <code>Species ~ .</code> facets by row. The syntax <code>Y ~ X</code> would facet by rows and columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb56-2">   <span class="fu" style="color: #4758AB;">geom_smooth</span>( <span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb56-3">   <span class="fu" style="color: #4758AB;">facet_grid</span>(Species <span class="sc" style="color: #5E5E5E;">~</span> .)   </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-41-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="more-customization" class="level1">
<h1>More customization</h1>
<p>The default plots created by ggplot2 are already very useful. However, we frequently need to make minor tweaks to the default behavior. Although it is not always obvious how to make these even with the cheat sheet, ggplot2 is very flexible.</p>
<section id="legend" class="level2">
<h2 class="anchored" data-anchor-id="legend">Legend</h2>
<p>For example, we can make changes to the legend title via the <code>scale_color_discrete function()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;">scale_color_discrete</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"Iris Varieties"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-42-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="no-legend" class="level2">
<h2 class="anchored" data-anchor-id="no-legend">No legend</h2>
<p>ggplot2 automatically adds a legend that maps color to species. To remove the legend we set the <code>geom_point()</code> argument <code>show.legend = FALSE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">show.legend=</span><span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
</section>
<section id="themes" class="level2">
<h2 class="anchored" data-anchor-id="themes">Themes</h2>
<p>The <strong>default theme for <code>ggplot2</code> uses the gray background</strong> with white grid lines.</p>
<p>If you don’t like this, you can use the black and white theme by using the <code>theme_bw()</code> function.</p>
<p>The <code>theme_bw()</code> function also allows you to set the typeface for the plot, in case you don’t want the default Helvetica. Here we change the typeface to Times.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>For things that only make sense globally, use <code>theme()</code>, i.e.&nbsp;<code>theme(legend.position = "none")</code>. Two standard appearance themes are included</p>
<ul>
<li><code>theme_gray()</code>: The default theme (gray background)</li>
<li><code>theme_bw()</code>: More stark/plain</li>
</ul>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb60-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> Species)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb60-3">  <span class="fu" style="color: #4758AB;">theme_bw</span>(<span class="at" style="color: #657422;">base_family =</span> <span class="st" style="color: #20794D;">"Times"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-44-1.png" class="img-fluid figure-img" width="672"></p>
<p></p><figcaption class="figure-caption">Modifying the theme for a plot</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="add-on-packages" class="level1">
<h1>Add-on packages</h1>
<p>The power of ggplot2 is augmented further due to the availability of add-on packages. The remaining changes needed to put the finishing touches on our plot require the <code>ggthemes</code> and <code>ggrepel</code> packages.</p>
<section id="ggthemes" class="level2">
<h2 class="anchored" data-anchor-id="ggthemes"><strong>ggthemes</strong></h2>
<p>The style of a ggplot2 graph can be changed using the theme functions. Several themes are included as part of the ggplot2 package.</p>
<p>Many other themes are added by the package <code>ggthemes</code>. Among those are the <code>theme_economist</code> theme that we used. After installing the package, you can change the style by adding a layer like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;">require</span>(ggthemes)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ggthemes</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'ggthemes'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:cowplot':

    theme_map</code></pre>
</div>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb65-2">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;">theme_economist</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-45-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>You can see how some of the other themes look by simply changing the function. For instance, you might try the <code>theme_fivethirtyeight()</code> theme instead.</p>
<p><strong>ggrepel</strong></p>
<p>The final difference has to do with the position of the labels. In our plot, some of the labels fall on top of each other. The package <code>ggrepel</code> includes a geometry that adds labels while ensuring that they don’t fall on top of each other. We simply change <code>geom_text</code> with <code>geom_text_repel</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;">require</span>(ggrepel)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ggrepel</code></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col=</span>Species, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb68-2">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb68-3">  <span class="fu" style="color: #4758AB;">theme_economist</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb68-4">  <span class="fu" style="color: #4758AB;">geom_text_repel</span>(<span class="fu" style="color: #4758AB;">aes</span>(Petal.Length, Petal.Width, <span class="at" style="color: #657422;">label =</span> id))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: ggrepel: 90 unlabeled data points (too many overlaps). Consider
increasing max.overlaps</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-46-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="putting-it-all-together" class="level1">
<h1>Putting it all together</h1>
<p>Now that we are done testing, we can write one piece of code that produces our desired plot from scratch.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">iris<span class="sc" style="color: #5E5E5E;">$</span>id <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Species)</span>
<span id="cb70-2">cols <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"darkorange"</span>, <span class="st" style="color: #20794D;">"navyblue"</span>, <span class="st" style="color: #20794D;">"deeppink"</span>)</span>
<span id="cb70-3"><span class="fu" style="color: #4758AB;">names</span>(cols) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"versicolor"</span>, <span class="st" style="color: #20794D;">"virginica"</span>, <span class="st" style="color: #20794D;">"setosa"</span>)</span>
<span id="cb70-4"></span>
<span id="cb70-5">iris <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Petal.Length, <span class="at" style="color: #657422;">y =</span> Petal.Width, <span class="at" style="color: #657422;">col=</span>Species)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb70-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha=</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb70-7">   <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb70-8">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values=</span>cols) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb70-9">  <span class="fu" style="color: #4758AB;">theme_economist</span>() </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://mbutler808.github.io/posts/2023-02-21-ggplot2/index_files/figure-html/unnamed-chunk-47-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I left off the point labels because itʻs too busy, but you can modify as you wish! It is often useful to label points when you are data cleaning or if you are interested in highlighting certain points. In that case, you could label only specific points.</p>
</section>
<section id="saving" class="level1">
<h1>Saving</h1>
<p>You can save your plots using the base R <code>pdf()</code> and <code>dev.off()</code> combination, opening the device, printing your plots, then closing the device.</p>
<p>There is also a <code>ggsave()</code> function specifically to save ggplot objects to different format. Check out the help page for it.</p>
</section>
<section id="exercises" class="level1">
<h1>Exercises</h1>
<ol type="1">
<li>In the final ggplot above, modify it to label only point 50, 100, and 150. Hint: You can make another column of the iris dataframe that has labels only on those specific rows, and use that as your label argument.</li>
<li>Try making a different kind of plot from the same data. Maybe a violin plot? Or any plot of your choice.</li>
<li>Try plotting a different kind of data using ggplot (maybe a discrete variable?). You can look at the built-in <code>mtcars</code> dataset or any new dataset.</li>
</ol>


</section>

 ]]></description>
  <category>module 3</category>
  <category>week 7</category>
  <category>R</category>
  <category>programming</category>
  <category>plotting</category>
  <category>ggplot2</category>
  <category>data visualization</category>
  <guid>https://mbutler808.github.io/posts/2023-02-21-ggplot2/index.html</guid>
  <pubDate>Tue, 21 Feb 2023 10:00:00 GMT</pubDate>
  <media:content url="https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf" medium="image"/>
</item>
</channel>
</rss>
