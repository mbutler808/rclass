---
title: "Reshaping and joining data with dplyr"
author:
  - name: Marguerite Butler
    url: https://butlerlab.org
    affiliation: School of Life Sciences, University of Hawaii
    affiliation_url: https://manoa.hawaii.edu/lifesciences/
description: "Add"
date: 2023-02-28
categories: [module 3, week 7, tidyr, tidyverse, dplyr, tibble, pipe]
---

# Pre-lecture materials

### Read ahead

::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

1.  <https://r4ds.had.co.nz/tidy-data>
2.  [tidyr cheat sheet from RStudio](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)
3.  <https://r4ds.had.co.nz/relational-data>
4.  <https://rafalab.github.io/dsbook/joining-tables>
:::

### Acknowledgements

Material for this lecture was borrowed and adopted from

-   <https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-08-tidy-data-and-the-tidyverse/>
-   <https://www.stephaniehicks.com/jhustatcomputing2022/posts/2022-09-08-joining-data-in-r/>
-   <https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics>
-   <https://r4ds.had.co.nz/relational-data>
-   <https://rafalab.github.io/dsbook/joining-tables>

# Learning objectives

::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Be able to transform wide data into long data
-   Be able to separate character columns into multiple columns
-   Be able to unite/separate multiple character columns into one column
-   Be able to define relational data and keys
-   Be able to define the three types of join functions for relational data
-   Be able to implement mutational join functions
:::

## New Packages

You will have to install if you donÊ»t already have them:

```{r}
#| eval: FALSE
install.packages("gapminder")  # a dataset package
```

# Overview

Last time we talked about tidy data. One common issue is that people sometimes use column names to store data. For example take a look at this built-in dataset that comes with `tidyr` on **religion and income survey data** with the number of respondents with income range in column name.


```{r}
library(tidyr)
relig_income
```

Take a second to look at this data. 
-   In this case the variables are religion (a proper vector), income bracket (in the column names), and the number of respondents, which is the third variable, is presented inside the table.

Converting this data to tidy format would give us

```{r, message=FALSE}
library(tidyverse)

relig_income %>%
  pivot_longer(-religion, names_to = "income", values_to = "respondents") %>%
  mutate(religion = factor(religion), income = factor(income))
```

Now we have each variable along the columns and each row corresponds to one observation (or category, here a combination of religion and income bracket). 

# Reshaping data

### `pivot_longer()`

The `tidyr` package includes functions to transfer a data frame between *long* and *wide*.

-   **Wide format** data has different attributes or variables describing an observation _placed in separate columns_.
-   **Long format** data tends to have different attributes encoded as _levels_ of a single variable, followed by another column that contains _the values_ of the observation at those different levels.


The **key problem** with the tidyness of the original data is that the income variables are not in their own columns, but rather are embedded in the structure of the columns, making it hard to manipuate the income variables.

To **fix this**, you can use the `pivot_longer()` function to **gather values spread across several columns into a single column**, here with the column names gathered into an `income` column.


### For example:

```{r}
# Gather everything EXCEPT religion to tidy data
relig_income %>%
  pivot_longer(-religion, names_to = "income", values_to = "respondents")
```


::: callout-tip
### Note
-  When gathering, exclude any columns that you do not want "gathered" (`religion` in this case) by including the column names with a the __minus sign__ in the `pivot_longer()` function.
-  Even if your data is in a tidy format, `pivot_longer()` is occasionally useful for pulling data together to take advantage of faceting, or plotting separate plots based on a grouping variable. 
:::

### `pivot_wider()`

The `pivot_wider()` function is the opposite function. It is useful for creating summary tables for reports, but generally less commonly needed to tidy data. 

It can be flexibly used in combination with __pivot_longer__ as in this example to make a nicer table to print.

You use the `summarize()` function in `dplyr` to summarize the total number of respondents per income category.

```{r}
relig_income %>%
  pivot_longer(-religion, names_to = "income", values_to = "respondents") %>%
  mutate(religion = factor(religion), income = factor(income)) %>% 
  group_by(income) %>% 
  summarize(total_respondents = sum(respondents)) %>%
  pivot_wider(names_from = "income", 
              values_from = "total_respondents") %>%
  knitr::kable()
```

Notice in this example how `pivot_wider()` has been used at the **very end of the code sequence** to convert the summarized data into a shape that **offers a better tabular presentation for a report**.


::: callout-tip
### Note

-  In the `pivot_wider()` call, you first specify the name of the column to use for the new column names (`income` in this example) and then specify the column to use for the cell values (`total_respondents` here).
-  Long format is often (but not always) the shape we need for tidy data. The important thing, however, is to __think carefully about the shape you need for your analysis__. 
:::

::: callout-tip
### Example of `pivot_longer()`

Let's try another dataset. This data contain an excerpt of the [Gapminder data](https://cran.r-project.org/web/packages/gapminder/README.html#gapminder) on life expectancy, GDP per capita, and population by country.

```{r}
library(gapminder)
gapminder
```

If we wanted to make `lifeExp`, `pop` and `gdpPercap` (all measurements that we observe) go from a wide table into a long table, what would we do?

```{r}
# try it yourself

```
:::

::: callout-tip
### Example

One more! Try using `pivot_longer()` to convert the the following data that contains simulated revenues for three companies by quarter for years 2006 to 2009.

Afterward, use `group_by()` and `summarize()` to calculate the average revenue for each company across all years and all quarters.

**Bonus**: Calculate a mean revenue for each company AND each year (averaged across all 4 quarters).

```{r, set.seed(123)}
df <- tibble(
  "company" = rep(1:3, each=4), 
  "year"  = rep(2006:2009, 3),
  "Q1"    = sample(x = 0:100, size = 12),
  "Q2"    = sample(x = 0:100, size = 12),
  "Q3"    = sample(x = 0:100, size = 12),
  "Q4"    = sample(x = 0:100, size = 12),
)
df
```

```{r}
# try it yourself 

```
:::

### `separate()` and `unite()` cells within columns of data

Still in the`tidyr` package:

-   `unite()`: paste contents of two or more columns into a single column
-   `separate()`: split contents of a column into two or more columns

First, we combine the first three columns into one new column using `unite()`. This function is similar to `newvar <- paste(A,B,C, sep="_")`

```{r}
gapminder %>% 
  unite(col="country_continent_year", 
        country:year, 
        sep="_")
```

Next, we show how to separate the columns into three separate columns using `separate()` using the `col`, `into` and `sep` arguments. Note that this works by finding the delimiter, and relies on order of the information. 

```{r}
gapminder %>% 
  unite(col="country_continent_year", 
        country:year, 
        sep="_") %>% 
  separate(col="country_continent_year", 
           into=c("country", "continent", "year"), 
           sep="_")
```

# Joining data (a.k.a. Merging)

## Relational data

Data analyses rarely involve only a single table of data.

Typically you have many tables of data, and you **must combine the datasets** to answer the questions that you are interested in.  Some examples include morphology and ecology data on the same species, or sequence data and metadata. 

Collectively, **multiple tables of data are called relational data** because it is the *relations*, not just the individual datasets, that are important.

Relations are **always defined between a pair of tables**. All other relations are built up from this simple idea: the relations of three or more tables are always a property of the relations between each pair.

Sometimes both elements of a pair can be in the same table! This is needed if, for example, you have a table of people, and each person has a reference to their parents, or if you have nodes in a phylogeny and each is linked to an ancestral node.

Relational data are combined with **merges or joins**.

::: callout-tip
### Three important families of joins

-   [**Mutating joins**](https://r4ds.had.co.nz/relational-data.html#mutating-joins): A mutating join **combines variables from two tables**. It first matches observations by their keys, then copies across variables from one table to the other on the right side of the table (similar to `mutate()`). It mutates because it adds on. This is a typical __merge__ operation.
    -   See @sec-mutjoins for Table of mutating joins.
-   [**Filtering joins**](https://r4ds.had.co.nz/relational-data.html#filtering-joins): Filtering joins **match observations** in the same way as mutating joins, **but select the observations that match** (not the variables). In other words, this type of join filters observations from one data frame based on whether or not they match an observation in the other.
    -   Two types: `semi_join(x, y)` and `anti_join(x, y)`.
-   [**Set operations**](https://r4ds.had.co.nz/relational-data.html#set-operations): Treat **observations as if they were set elements**. Typically used less frequently, but occasionally useful when you want to break a single complex filter into simpler pieces. All these operations work with a complete row, comparing the values of every variable. These expect the x and y inputs to have the same variables, and treat the observations like sets:
    -   Examples of set operations: `intersect(x, y)`, `union(x, y)`, and `setdiff(x, y)`.
:::

## Keys

The **variables used to connect each pair of tables** are called **keys**. A key is a variable (or set of variables) that __uniquely identifies an observation__. In simple cases, a single variable is sufficient to identify an observation.

::: callout-tip
### Note

There are two types of keys:

-   A **primary key** uniquely identifies an observation in its own table.
-   A **foreign key** uniquely identifies an observation in another table.
:::

Let's consider an example to help us understand the difference between a **primary key** and **foreign key**.

## Example of keys

Imagine you are conduct a study and **collecting data on subjects and a health outcome**.

Often, subjects will **have multiple observations** (a longitudinal study). Similarly, we may record other information, such as the type of housing.

### The first table

This code creates a simple table with some made up data about some hypothetical subjects' outcomes.

```{r,message=FALSE}
library(tidyverse)

outcomes <- tibble(
        id = rep(c("a", "b", "c"), each = 3),
        visit = rep(0:2, 3),
        outcome = rnorm(3 * 3, 3)
)

print(outcomes)
```

Note that subjects are labeled by a unique identifer in the `id` column.

### A second table

Here is some code to create a second table containing  data about the hypothetical subjects' housing type.

```{r second_table,exercise=TRUE,message=FALSE}
subjects <- tibble(
        id = c("a", "b", "c"),
        house = c("detached", "rowhouse", "rowhouse")
)

print(subjects)
```

::: callout-note
### Question

What is the **primary key** and **foreign key**?

-   The `outcomes$id` is a **primary key** because it uniquely identifies each subject in the `outcomes` table.
-   The `subjects$id` is a **foreign key** because it appears in the `subjects` table where it matches each subject to a unique `id`.
:::

# Mutating joins {#sec-mutjoins}

The `dplyr` package provides a set of **functions for joining two data frames** into a single data frame based on a set of key columns.

There are several functions in the `*_join()` family.

-   These functions all merge together two data frames
-   They differ in how they handle observations that exist in one but not both data frames.

Here, are the **four functions from this family** that you will likely use the most often:

```{r}
#| echo: false
#| out-width: '60%'
#| fig-align: 'center'
library(knitr)
join_funcs <- data.frame(func = c("`left_join()`",
                                  "`right_join()`",
                                  "`inner_join()`",
                                  "`full_join()`"),
                         does = c("Includes all observations in the left data frame, whether or not there is a match in the right data frame",
                                  "Includes all observations in the right data frame, whether or not there is a match in the left data frame",
                                  "Includes only observations that are in both data frames",
                                  "Includes all observations from both data frames"))
knitr::kable(join_funcs, col.names = c("Function", "What it includes in merged data frame"))
```

![](https://d33wubrfki0l68.cloudfront.net/aeab386461820b029b7e7606ccff1286f623bae1/ef0d4/diagrams/join-venn.png)

\[[Source from R for Data Science](https://r4ds.had.co.nz/relational-data#relational-data)\]




# Post-lecture materials

### Final Questions

Here are some post-lecture questions to help you think about the material discussed.

::: callout-note
### Questions

1.  Using prose, describe how the variables and observations are organised in a tidy dataset versus an non-tidy dataset.

2.  What do the extra and fill arguments do in `separate()`? Experiment with the various options for the following two toy datasets.

```{r, eval=FALSE}
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>% 
  separate(x, c("one", "two", "three"))

tibble(x = c("a,b,c", "d,e", "f,g,i")) %>% 
  separate(x, c("one", "two", "three"))
```

3.  Both `unite()` and `separate()` have a remove argument. What does it do? Why would you set it to FALSE?

4.  Compare and contrast `separate()` and `extract()`. Why are there three variations of separation (by position, by separator, and with groups), but only one `unite()`?
:::



