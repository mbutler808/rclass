{
  "hash": "fcf983348f8ac696900800adaebca29a",
  "result": {
    "markdown": "---\ntitle: \"The ggtree-verse\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"Working with trees with tidytree and plotting with ggtree\"\ndate: 2023-04-25\ncategories: [module 7, week 13, phylogenetic trees, phylo, ggtree, treedata]\nbibliography: ../refs.bib\n---\n\n\n### Acknowledgements\n\nReferences for this Material:\n\n- Treedata book by Guangchuang Yu <https://yulab-smu.top/treedata-book/>\n- <https://bioconnector.github.io/workshops/r-ggtree.html>\n\n# Learning objectives\n\n::: callout-note\n# Learning Objectives\n\n**At the end of this lesson you will:**\n\n-  Understand information content of phylogenetically structured data\n-  Understand particular R tree formats in ape, phylobase, and ouch\n-  Be able to hand-make trees\n-  Be able to import trees from nexus, newick, and other major formats in use today\n-  Be able to convert trees  from one format to another\n-   Be able to perform basic tree manipulations\n\n:::\n\n\n:::{.callout-note}\n# R packages you will need\n- `ape`\n- `ggtree`\n- `tidytree`\n- `treeio`\n:::\n\n# Overview\n\n`ggtree` is a powerful phylogenetic tree plotting package, that is used alongside `treeio` and `tidytree` packages to import/export and to manipulate phylogenetic trees, respectively. These packages allow you to subset or combine trees with data, annotate, and plot in so many different ways using the grammar of graphics. \n\nBecause itʻs written in the style of `ggplot2` and the `tidyverse`, there are a lot of functions to remember, and now there are also multiple object types. The key to working effectively with `ggtree` is to be aware of what type of object you are working with, whether it is a `dataframe`, a `tibble`, a `phylo` tree, a `treedata` tibble, or `ggtree` object. It is easy to convert between these at will if you know what you are dealing with. \n\n\n# phylo -> treedata\n\nFunctions like `read.tree` amd `read.nexus`, etc. will read in objects of class `phylo` (they are actually referencing the ape function). \n\nTo show this, letʻs first generate a random tree using `ape::rtree()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ape)\nrequire(ggtree)\nrequire(treeio)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree <- rtree(20)\nclass(tree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n\n```{.r .cell-code}\nplot(tree)  # ape plotting function\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nNote: `ggtree` can also accept `phylo` objects as arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(tree)  # ggtree plotting function\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nTo save as newick and nexus formats, `treeio` has the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreeio::write.nexus(tree, file=\"tree.nex\")\ntreeio::write.tree(tree, file=\"tree.tree\")\nlist.files()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"anolis.SSD.raw.csv\" \"bigtree.nex\"        \"ggtree_functions.R\"\n [4] \"ggtree.R\"           \"index_files\"        \"index.qmd\"         \n [7] \"index.rmarkdown\"    \"mytree.tree\"        \"rnw2qmd.R\"         \n[10] \"tree.nex\"           \"tree.tree\"         \n```\n:::\n:::\n\n\nTake a look at these files. They should be in nexus and newick formats, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_nex <- treeio::read.nexus(file=\"tree.nex\")\ntree_new <- treeio::read.newick(file=\"tree.tree\")\nclass(tree_nex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n\n```{.r .cell-code}\nclass(tree_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n:::\n\n\n::: callout-note\nIf you have trees from `iqtree`, `BEAST` etc., you should use the specialized read functions because they will capture the metadata embedded in the treeformat including support values. \n:::\n\n\n## Coverting between data types\n\n\nThe main functions for coersion are:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.phylo (tree)  # to phylo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t8, t12, t6, t10, t7, t5, ...\n\nRooted; includes branch lengths.\n```\n:::\n\n```{.r .cell-code}\nas.treedata(tree) # to treedata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t8, t12, t6, t10, t7, t5, ...\n\nRooted; includes branch lengths.\n```\n:::\n\n```{.r .cell-code}\ntreedata <- as.treedata(tree)  \nas_tibble(treedata)  # to tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 39 × 4\n   parent  node branch.length label\n    <int> <int>         <dbl> <chr>\n 1     24     1        0.858  t8   \n 2     26     2        0.0752 t12  \n 3     29     3        0.798  t6   \n 4     29     4        0.369  t10  \n 5     28     5        0.657  t7   \n 6     30     6        0.571  t5   \n 7     30     7        0.499  t2   \n 8     32     8        0.349  t14  \n 9     33     9        0.478  t20  \n10     33    10        0.458  t9   \n# … with 29 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\n\n# Simulate phenotypic data\n\n### Add tiplabels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(tree) + geom_tiplab()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Get the tip labels\n\nThere is a function `get_taxa_name()` which is very handy, but NOTE: its argument is a `ggtree` object, not a `treedata` object. \n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggtree(tree) + geom_tiplab()\nget_taxa_name(p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"t10\" \"t6\"  \"t7\"  \"t2\"  \"t5\"  \"t12\" \"t9\"  \"t20\" \"t14\" \"t16\" \"t8\"  \"t3\" \n[13] \"t11\" \"t18\" \"t1\"  \"t17\" \"t15\" \"t19\" \"t13\" \"t4\" \n```\n:::\n\n```{.r .cell-code}\ntaxa <- get_taxa_name(p)\n```\n:::\n\n\nSimulate a data matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- length(taxa)\nsize <- rnorm(n, mean=20, sd=5)\nhabitat <- sample(c(\"desert\", \"grassland\", \"forest\", \"intertidal\"), size=n, replace=T)\ndat <- data.frame( \"label\"= taxa, size, habitat)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   label      size    habitat\n1    t10 22.766419 intertidal\n2     t6 25.361921     desert\n3     t7 18.973862  grassland\n4     t2  6.666526     desert\n5     t5 22.996807     forest\n6    t12 12.036695  grassland\n7     t9 28.550117 intertidal\n8    t20 16.479378 intertidal\n9    t14 13.844942  grassland\n10   t16 29.260815     desert\n11    t8 24.814669 intertidal\n12    t3 14.290960     forest\n13   t11 25.339519     forest\n14   t18 25.539699 intertidal\n15    t1 18.830934  grassland\n16   t17 19.534304     forest\n17   t15 24.547078     forest\n18   t19 24.255295  grassland\n19   t13 23.732878  grassland\n20    t4 19.510869  grassland\n```\n:::\n:::\n\n\nSee our ggtree as a treedata object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.treedata(p) %>% as_tibble %>% as.data.frame  # ggtree -> treedata -> tibble -> dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   parent node branch.length label\n1      24    1    0.85800328    t8\n2      26    2    0.07518082   t12\n3      29    3    0.79821907    t6\n4      29    4    0.36851125   t10\n5      28    5    0.65668151    t7\n6      30    6    0.57140975    t5\n7      30    7    0.49877246    t2\n8      32    8    0.34892143   t14\n9      33    9    0.47843876   t20\n10     33   10    0.45830511    t9\n11     31   11    0.44021257   t16\n12     23   12    0.95840170    t3\n13     35   13    0.34566973   t19\n14     35   14    0.59128152   t15\n15     37   15    0.94792391   t17\n16     37   16    0.65034496    t1\n17     38   17    0.26889904   t18\n18     38   18    0.41521546   t11\n19     39   19    0.05916452    t4\n20     39   20    0.32798596   t13\n21     21   21            NA  <NA>\n22     21   22    0.72660085  <NA>\n23     22   23    0.60105407  <NA>\n24     23   24    0.97326589  <NA>\n25     24   25    0.78598378  <NA>\n26     25   26    0.66314138  <NA>\n27     26   27    0.28464361  <NA>\n28     27   28    0.84777052  <NA>\n29     28   29    0.90755876  <NA>\n30     27   30    0.89933638  <NA>\n31     25   31    0.75470704  <NA>\n32     31   32    0.58392701  <NA>\n33     32   33    0.93815542  <NA>\n34     22   34    0.43761598  <NA>\n35     34   35    0.58651720  <NA>\n36     34   36    0.68646775  <NA>\n37     36   37    0.75734748  <NA>\n38     36   38    0.33959397  <NA>\n39     21   39    0.08944358  <NA>\n```\n:::\n:::\n\n\n# Merge tree with data\n\nNow that we have a matching key in both the tree and data objects, we can join the tree with the dataframe by those matching labels using `ggtree`ʻs `full_join`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nttree <- full_join(tree, dat, by = \"label\") \nttree\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t8, t12, t6, t10, t7, t5, ...\n\nRooted; includes branch lengths.\n\nwith the following features available:\n  'size', 'habitat'.\n\n# The associated data tibble abstraction: 39 × 5\n# The 'node', 'label' and 'isTip' are from the phylo tree.\n    node label isTip  size habitat   \n   <int> <chr> <lgl> <dbl> <chr>     \n 1     1 t8    TRUE  24.8  intertidal\n 2     2 t12   TRUE  12.0  grassland \n 3     3 t6    TRUE  25.4  desert    \n 4     4 t10   TRUE  22.8  intertidal\n 5     5 t7    TRUE  19.0  grassland \n 6     6 t5    TRUE  23.0  forest    \n 7     7 t2    TRUE   6.67 desert    \n 8     8 t14   TRUE  13.8  grassland \n 9     9 t20   TRUE  16.5  intertidal\n10    10 t9    TRUE  28.6  intertidal\n# … with 29 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\nttree %>% as_tibble %>% as.data.frame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   parent node branch.length label      size    habitat\n1      24    1    0.85800328    t8 24.814669 intertidal\n2      26    2    0.07518082   t12 12.036695  grassland\n3      29    3    0.79821907    t6 25.361921     desert\n4      29    4    0.36851125   t10 22.766419 intertidal\n5      28    5    0.65668151    t7 18.973862  grassland\n6      30    6    0.57140975    t5 22.996807     forest\n7      30    7    0.49877246    t2  6.666526     desert\n8      32    8    0.34892143   t14 13.844942  grassland\n9      33    9    0.47843876   t20 16.479378 intertidal\n10     33   10    0.45830511    t9 28.550117 intertidal\n11     31   11    0.44021257   t16 29.260815     desert\n12     23   12    0.95840170    t3 14.290960     forest\n13     35   13    0.34566973   t19 24.255295  grassland\n14     35   14    0.59128152   t15 24.547078     forest\n15     37   15    0.94792391   t17 19.534304     forest\n16     37   16    0.65034496    t1 18.830934  grassland\n17     38   17    0.26889904   t18 25.539699 intertidal\n18     38   18    0.41521546   t11 25.339519     forest\n19     39   19    0.05916452    t4 19.510869  grassland\n20     39   20    0.32798596   t13 23.732878  grassland\n21     21   21            NA  <NA>        NA       <NA>\n22     21   22    0.72660085  <NA>        NA       <NA>\n23     22   23    0.60105407  <NA>        NA       <NA>\n24     23   24    0.97326589  <NA>        NA       <NA>\n25     24   25    0.78598378  <NA>        NA       <NA>\n26     25   26    0.66314138  <NA>        NA       <NA>\n27     26   27    0.28464361  <NA>        NA       <NA>\n28     27   28    0.84777052  <NA>        NA       <NA>\n29     28   29    0.90755876  <NA>        NA       <NA>\n30     27   30    0.89933638  <NA>        NA       <NA>\n31     25   31    0.75470704  <NA>        NA       <NA>\n32     31   32    0.58392701  <NA>        NA       <NA>\n33     32   33    0.93815542  <NA>        NA       <NA>\n34     22   34    0.43761598  <NA>        NA       <NA>\n35     34   35    0.58651720  <NA>        NA       <NA>\n36     34   36    0.68646775  <NA>        NA       <NA>\n37     36   37    0.75734748  <NA>        NA       <NA>\n38     36   38    0.33959397  <NA>        NA       <NA>\n39     21   39    0.08944358  <NA>        NA       <NA>\n```\n:::\n:::\n\n\nAnd thatʻs what our `treedata` object looks like flattened out! \n\n\n## Subsetting the tree\n\nFunctions:  `drop.tip()` and `keep.tip()`\n\nSuppose we want to drop all of the even tips:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntodrop <- paste(\"t\", 1:10*2, sep=\"\")\ntodrop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"t2\"  \"t4\"  \"t6\"  \"t8\"  \"t10\" \"t12\" \"t14\" \"t16\" \"t18\" \"t20\"\n```\n:::\n\n```{.r .cell-code}\nsmalltree <- drop.tip(ttree, todrop)\nsmalltree\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 10 tips and 9 internal nodes.\n\nTip labels:\n  t7, t5, t9, t3, t19, t15, ...\n\nRooted; includes branch lengths.\n\nwith the following features available:\n  'size', 'habitat'.\n\n# The associated data tibble abstraction: 19 × 5\n# The 'node', 'label' and 'isTip' are from the phylo tree.\n    node label isTip  size habitat   \n   <int> <chr> <lgl> <dbl> <chr>     \n 1     1 t7    TRUE   19.0 grassland \n 2     2 t5    TRUE   23.0 forest    \n 3     3 t9    TRUE   28.6 intertidal\n 4     4 t3    TRUE   14.3 forest    \n 5     5 t19   TRUE   24.3 grassland \n 6     6 t15   TRUE   24.5 forest    \n 7     7 t17   TRUE   19.5 forest    \n 8     8 t1    TRUE   18.8 grassland \n 9     9 t11   TRUE   25.3 forest    \n10    10 t13   TRUE   23.7 grassland \n# … with 9 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\nggtree(smalltree) + geom_tiplab()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n`drop.tip` keeps all of the metadata! `keep.tip` is imported from `ape` so it has to be converted to `phylo` and then the data joined again after. \n\n\n## Plotting with node labels\n\nThe geometries `geom_text()` and `geom_node()` are helpful for labelling all of the nodes. The function `geom_tiplab()` labels only the tips. \n\n\nAdd node labels so you know what the internal node numbers are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab() +\n    geom_text(aes(label=node), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNote: The tiplabels and the node labels crashed!\n\nThere are also `2` versions: `geom_text2()` and `geom_node2()` that allow subsetting the nodes, when you want the geometry to apply to only some of the nodes.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab() +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n`isTip` is a column of the ggtree object, so it is inherited when we provide the ggtree object. \n\n\n## Plotting with alternative tip labels \n\nThe dataframe portion of the treedata object can hold any number of columns of metadata. Perhaps you have some real names in a different column (like a display name), it is easy to swap out the tip labels. Here letʻs just use the `habitat` column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## When your tip labels get cut off\n\nAdd an x scale (usually time):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers\n    theme_tree2()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nYou can increase the size of the plot area to accommodate the longer labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers\n    theme_tree2() +\n    xlim(0,5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# Tree layouts \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: cowplot\n```\n:::\n\n```{.r .cell-code}\nplot_grid(\n  ggtree(ttree),\n  ggtree(ttree, layout=\"roundrect\"),\n  ggtree(ttree, layout=\"slanted\"),\n  ggtree(ttree, layout=\"ellipse\"),\n  ggtree(ttree, layout=\"circular\"),\n  ggtree(ttree, layout=\"fan\", open.angle=120),\n  ggtree(ttree, layout=\"equal_angle\"),\n  ggtree(ttree, layout=\"daylight\"),\n  ggtree(ttree, branch.length='none'),\n  ggtree(ttree, layout=\"ellipse\", branch.length=\"none\"),\n  ggtree(ttree, branch.length='none', layout='circular'),\n  ggtree(ttree, layout=\"daylight\", branch.length = 'none')\n)  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nAverage angle change [1] 0.166418763197171\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nAverage angle change [2] 0.0487437117877021\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nAverage angle change [1] 0.0886801592333658\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nAverage angle change [2] 0.0275655313801002\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# Plotting data on the tree\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}