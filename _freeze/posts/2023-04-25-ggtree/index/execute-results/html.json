{
  "hash": "6eaab73a345c6f005ab6d4a9936ef7a3",
  "result": {
    "markdown": "---\ntitle: \"The ggtree-verse\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"Working with trees with tidytree and plotting with ggtree\"\ndate: 2023-04-25\ncategories: [module 7, week 13, phylogenetic trees, phylo, ggtree, treedata]\nbibliography: ../refs.bib\n---\n\n\n### Acknowledgements\n\nReferences for this Material:\n\n- Treedata book by Guangchuang Yu <https://yulab-smu.top/treedata-book/>\n- <https://bioconnector.github.io/workshops/r-ggtree.html>\n\n# Learning objectives\n\n::: callout-note\n# Learning Objectives\n\n**At the end of this lesson you will:**\n\n-  Understand information content of phylogenetically structured data\n-  Understand particular R tree formats in ape, phylobase, and ouch\n-  Be able to hand-make trees\n-  Be able to import trees from nexus, newick, and other major formats in use today\n-  Be able to convert trees  from one format to another\n-   Be able to perform basic tree manipulations\n\n:::\n\n\n:::{.callout-note}\n# R packages you will need\n- `ape`\n- `ggtree`\n- `tidytree`\n- `treeio`\n:::\n\n# Overview\n\n`ggtree` is a powerful phylogenetic tree plotting package, that is used alongside `treeio` and `tidytree` packages to import/export and to manipulate phylogenetic trees, respectively. These packages allow you to subset or combine trees with data, annotate, and plot in so many different ways using the grammar of graphics. \n\nBecause itʻs written in the style of `ggplot2` and the `tidyverse`, there are a lot of functions to remember, and now there are also multiple object types. The key to working effectively with `ggtree` is to be aware of what type of object you are working with, whether it is a `dataframe`, a `tibble`, a `phylo` tree, a `treedata` tibble, or `ggtree` object. It is easy to convert between these at will if you know what you are dealing with. \n\n\n# phylo -> treedata\n\nFunctions like `read.tree` amd `read.nexus`, etc. will read in objects of class `phylo` (they are actually referencing the ape function). \n\nTo show this, letʻs first generate a random tree using `ape::rtree()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ape)\nrequire(ggtree)\nrequire(treeio)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree <- rtree(20)\nclass(tree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n\n```{.r .cell-code}\nplot(tree)  # ape plotting function\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nNote: `ggtree` can also accept `phylo` objects as arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(tree)  # ggtree plotting function\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nTo save as newick and nexus formats, `treeio` has the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreeio::write.nexus(tree, file=\"tree.nex\")\ntreeio::write.tree(tree, file=\"tree.tree\")\nlist.files()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"anolis.SSD.raw.csv\" \"bigtree.nex\"        \"ggtree_functions.R\"\n [4] \"ggtree.R\"           \"index_files\"        \"index.qmd\"         \n [7] \"index.rmarkdown\"    \"mytree.tree\"        \"rnw2qmd.R\"         \n[10] \"tree.nex\"           \"tree.tree\"         \n```\n:::\n:::\n\n\nTake a look at these files. They should be in nexus and newick formats, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_nex <- treeio::read.nexus(file=\"tree.nex\")\ntree_new <- treeio::read.newick(file=\"tree.tree\")\nclass(tree_nex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n\n```{.r .cell-code}\nclass(tree_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n:::\n\n\n::: callout-note\nIf you have trees from `iqtree`, `BEAST` etc., you should use the specialized read functions because they will capture the metadata embedded in the treeformat including support values. \n:::\n\n\n## Coverting between data types\n\n\nThe main functions for coersion are:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.phylo (tree)  # to phylo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t11, t9, t10, t2, t6, t5, ...\n\nRooted; includes branch lengths.\n```\n:::\n\n```{.r .cell-code}\nas.treedata(tree) # to treedata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t11, t9, t10, t2, t6, t5, ...\n\nRooted; includes branch lengths.\n```\n:::\n\n```{.r .cell-code}\ntreedata <- as.treedata(tree)  \nas_tibble(treedata)  # to tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 39 × 4\n   parent  node branch.length label\n    <int> <int>         <dbl> <chr>\n 1     22     1        0.279  t11  \n 2     22     2        0.127  t9   \n 3     26     3        0.300  t10  \n 4     27     4        0.435  t2   \n 5     27     5        0.553  t6   \n 6     28     6        0.764  t5   \n 7     28     7        0.499  t1   \n 8     30     8        0.0345 t7   \n 9     30     9        0.787  t16  \n10     33    10        0.871  t20  \n# … with 29 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\n\n# Simulate phenotypic data\n\n### Add tiplabels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(tree) + geom_tiplab()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Get the tip labels\n\nThere is a function `get_taxa_name()` which is very handy, but NOTE: its argument is a `ggtree` object, not a `treedata` object. \n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggtree(tree) + geom_tiplab()\nget_taxa_name(p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"t19\" \"t20\" \"t15\" \"t13\" \"t16\" \"t7\"  \"t6\"  \"t2\"  \"t10\" \"t1\"  \"t5\"  \"t4\" \n[13] \"t17\" \"t14\" \"t3\"  \"t12\" \"t18\" \"t8\"  \"t9\"  \"t11\"\n```\n:::\n\n```{.r .cell-code}\ntaxa <- get_taxa_name(p)\n```\n:::\n\n\nSimulate a data matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- length(taxa)\nsize <- rnorm(n, mean=20, sd=5)\nhabitat <- sample(c(\"desert\", \"grassland\", \"forest\", \"intertidal\"), size=n, replace=T)\ndat <- data.frame( \"label\"= taxa, size, habitat)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   label      size    habitat\n1    t19 18.925902  grassland\n2    t20 23.708948     forest\n3    t15 17.667552     forest\n4    t13 26.492428 intertidal\n5    t16 23.094844     forest\n6     t7 28.153165     desert\n7     t6 27.525594     forest\n8     t2 18.492712  grassland\n9    t10 24.009872     forest\n10    t1 16.825641  grassland\n11    t5 24.801745     forest\n12    t4  8.793568     forest\n13   t17 17.280791     desert\n14   t14 22.973981     desert\n15    t3 25.381193 intertidal\n16   t12 23.971733  grassland\n17   t18 14.399356  grassland\n18    t8 17.719463     forest\n19    t9 18.044723 intertidal\n20   t11 16.778249  grassland\n```\n:::\n:::\n\n\nSee our ggtree as a treedata object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.treedata(p) %>% as_tibble %>% as.data.frame  # ggtree -> treedata -> tibble -> dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   parent node branch.length label\n1      22    1   0.278939538   t11\n2      22    2   0.127345336    t9\n3      26    3   0.300447684   t10\n4      27    4   0.435377757    t2\n5      27    5   0.552980925    t6\n6      28    6   0.764464183    t5\n7      28    7   0.499308378    t1\n8      30    8   0.034501367    t7\n9      30    9   0.787341947   t16\n10     33   10   0.870559227   t20\n11     33   11   0.813121315   t19\n12     32   12   0.177632412   t15\n13     31   13   0.715450910   t13\n14     36   14   0.197539931    t3\n15     38   15   0.214468429   t17\n16     38   16   0.751333333    t4\n17     37   17   0.581087446   t14\n18     39   18   0.183712207   t18\n19     39   19   0.798547462   t12\n20     34   20   0.688117656    t8\n21     21   21            NA  <NA>\n22     21   22   0.412084444  <NA>\n23     21   23   0.991313945  <NA>\n24     23   24   0.847770900  <NA>\n25     24   25   0.128256809  <NA>\n26     25   26   0.611658429  <NA>\n27     26   27   0.721636676  <NA>\n28     25   28   0.355111233  <NA>\n29     24   29   0.010121288  <NA>\n30     29   30   0.344141605  <NA>\n31     29   31   0.316786686  <NA>\n32     31   32   0.058795683  <NA>\n33     32   33   0.032994980  <NA>\n34     23   34   0.798382514  <NA>\n35     34   35   0.007182305  <NA>\n36     35   36   0.930358109  <NA>\n37     36   37   0.984382103  <NA>\n38     37   38   0.277136115  <NA>\n39     35   39   0.942967743  <NA>\n```\n:::\n:::\n\n\n# Merge tree with data\n\nNow that we have a matching key in both the tree and data objects, we can join the tree with the dataframe by those matching labels using `ggtree`ʻs `full_join`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nttree <- full_join(tree, dat, by = \"label\") \nttree\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t11, t9, t10, t2, t6, t5, ...\n\nRooted; includes branch lengths.\n\nwith the following features available:\n  'size', 'habitat'.\n\n# The associated data tibble abstraction: 39 × 5\n# The 'node', 'label' and 'isTip' are from the phylo tree.\n    node label isTip  size habitat   \n   <int> <chr> <lgl> <dbl> <chr>     \n 1     1 t11   TRUE   16.8 grassland \n 2     2 t9    TRUE   18.0 intertidal\n 3     3 t10   TRUE   24.0 forest    \n 4     4 t2    TRUE   18.5 grassland \n 5     5 t6    TRUE   27.5 forest    \n 6     6 t5    TRUE   24.8 forest    \n 7     7 t1    TRUE   16.8 grassland \n 8     8 t7    TRUE   28.2 desert    \n 9     9 t16   TRUE   23.1 forest    \n10    10 t20   TRUE   23.7 forest    \n# … with 29 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\nttree %>% as_tibble %>% as.data.frame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   parent node branch.length label      size    habitat\n1      22    1   0.278939538   t11 16.778249  grassland\n2      22    2   0.127345336    t9 18.044723 intertidal\n3      26    3   0.300447684   t10 24.009872     forest\n4      27    4   0.435377757    t2 18.492712  grassland\n5      27    5   0.552980925    t6 27.525594     forest\n6      28    6   0.764464183    t5 24.801745     forest\n7      28    7   0.499308378    t1 16.825641  grassland\n8      30    8   0.034501367    t7 28.153165     desert\n9      30    9   0.787341947   t16 23.094844     forest\n10     33   10   0.870559227   t20 23.708948     forest\n11     33   11   0.813121315   t19 18.925902  grassland\n12     32   12   0.177632412   t15 17.667552     forest\n13     31   13   0.715450910   t13 26.492428 intertidal\n14     36   14   0.197539931    t3 25.381193 intertidal\n15     38   15   0.214468429   t17 17.280791     desert\n16     38   16   0.751333333    t4  8.793568     forest\n17     37   17   0.581087446   t14 22.973981     desert\n18     39   18   0.183712207   t18 14.399356  grassland\n19     39   19   0.798547462   t12 23.971733  grassland\n20     34   20   0.688117656    t8 17.719463     forest\n21     21   21            NA  <NA>        NA       <NA>\n22     21   22   0.412084444  <NA>        NA       <NA>\n23     21   23   0.991313945  <NA>        NA       <NA>\n24     23   24   0.847770900  <NA>        NA       <NA>\n25     24   25   0.128256809  <NA>        NA       <NA>\n26     25   26   0.611658429  <NA>        NA       <NA>\n27     26   27   0.721636676  <NA>        NA       <NA>\n28     25   28   0.355111233  <NA>        NA       <NA>\n29     24   29   0.010121288  <NA>        NA       <NA>\n30     29   30   0.344141605  <NA>        NA       <NA>\n31     29   31   0.316786686  <NA>        NA       <NA>\n32     31   32   0.058795683  <NA>        NA       <NA>\n33     32   33   0.032994980  <NA>        NA       <NA>\n34     23   34   0.798382514  <NA>        NA       <NA>\n35     34   35   0.007182305  <NA>        NA       <NA>\n36     35   36   0.930358109  <NA>        NA       <NA>\n37     36   37   0.984382103  <NA>        NA       <NA>\n38     37   38   0.277136115  <NA>        NA       <NA>\n39     35   39   0.942967743  <NA>        NA       <NA>\n```\n:::\n:::\n\n\nAnd thatʻs what our `treedata` object looks like flattened out! \n\n\n## Subsetting the tree\n\nFunctions:  `drop.tip()` and `keep.tip()`\n\nSuppose we want to drop all of the even tips:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntodrop <- paste(\"t\", 1:10*2, sep=\"\")\ntodrop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"t2\"  \"t4\"  \"t6\"  \"t8\"  \"t10\" \"t12\" \"t14\" \"t16\" \"t18\" \"t20\"\n```\n:::\n\n```{.r .cell-code}\nsmalltree <- drop.tip(ttree, todrop)\nsmalltree\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 10 tips and 9 internal nodes.\n\nTip labels:\n  t11, t9, t5, t1, t7, t19, ...\n\nRooted; includes branch lengths.\n\nwith the following features available:\n  'size', 'habitat'.\n\n# The associated data tibble abstraction: 19 × 5\n# The 'node', 'label' and 'isTip' are from the phylo tree.\n    node label isTip  size habitat   \n   <int> <chr> <lgl> <dbl> <chr>     \n 1     1 t11   TRUE   16.8 grassland \n 2     2 t9    TRUE   18.0 intertidal\n 3     3 t5    TRUE   24.8 forest    \n 4     4 t1    TRUE   16.8 grassland \n 5     5 t7    TRUE   28.2 desert    \n 6     6 t19   TRUE   18.9 grassland \n 7     7 t15   TRUE   17.7 forest    \n 8     8 t13   TRUE   26.5 intertidal\n 9     9 t3    TRUE   25.4 intertidal\n10    10 t17   TRUE   17.3 desert    \n# … with 9 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\nggtree(smalltree) + geom_tiplab()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n`drop.tip` keeps all of the metadata! `keep.tip` is imported from `ape` so it has to be converted to `phylo` and then the data joined again after. \n\n\n## Plotting with node labels\n\nThe geometries `geom_text()` and `geom_node()` are helpful for labelling all of the nodes. The function `geom_tiplab()` labels only the tips. \n\n\nAdd node labels so you know what the internal node numbers are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab() +\n    geom_text(aes(label=node), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNote: The tiplabels and the node labels crashed!\n\nThere are also `2` versions: `geom_text2()` and `geom_node2()` that allow subsetting the nodes, when you want the geometry to apply to only some of the nodes.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab() +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n`isTip` is a column of the ggtree object, so it is inherited when we provide the ggtree object. \n\n\n## Plotting with alternative tip labels \n\nThe dataframe portion of the treedata object can hold any number of columns of metadata. Perhaps you have some real names in a different column (like a display name), it is easy to swap out the tip labels. Here letʻs just use the `habitat` column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## When your tip labels get cut off\n\nAdd an x scale (usually time):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers\n    theme_tree2()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nYou can increase the size of the plot area to accommodate the longer labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers\n    theme_tree2() +\n    xlim(0,5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# Tree layouts \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(cowplot)\n\nplot_grid(\n  ggtree(ttree),\n  ggtree(ttree, layout=\"roundrect\"),\n  ggtree(ttree, layout=\"slanted\"),\n  ggtree(ttree, layout=\"ellipse\"),\n  ggtree(ttree, layout=\"circular\"),\n  ggtree(ttree, layout=\"fan\", open.angle=120),\n  ggtree(ttree, layout=\"equal_angle\"),\n  ggtree(ttree, layout=\"daylight\"),\n  ggtree(ttree, branch.length='none'),\n  ggtree(ttree, layout=\"ellipse\", branch.length=\"none\"),\n  ggtree(ttree, branch.length='none', layout='circular'),\n  ggtree(ttree, layout=\"daylight\", branch.length = 'none')\n)  \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# Plotting data on the tree\n\nNEED TO WORK ON THIS A BIT MORE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ggplot2)\nsmdat <- smalltree %>% as_tibble \n\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers\n    theme_tree2() +\n    xlim(0,5) +\n    geom_facet(panel = \"Size\", data=smdat, geom = geom_col, \n                aes(x = size), orientation = 'y', width = .6)\n```\n:::\n\n\n# Example datasets\n\nsave to your working directory:\n\n[bigtree.nex](bigtree.nex)\n[anolis.SSD.raw.csv](anolis.SSD.raw.csv)\n[ggtree.R](ggtree.R)\n\nThis is an example of a typical workflow. We have carefully collected phenotypic data, and someone has published a massive phylogeny. We need to subset the tree to just the taxa we want to work on.   \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}