{
  "hash": "b862fb9e8e59e7ff50cac5f54a7582fe",
  "result": {
    "markdown": "---\ntitle: \"The ggtree-verse\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"Working with trees with tidytree and plotting with ggtree\"\ndate: 2023-04-25\ncategories: [module 7, week 13, phylogenetic trees, phylo, ggtree, treedata]\nbibliography: ../refs.bib\n---\n\n\n### Acknowledgements\n\nReferences for this Material:\n\n- Treedata book by Guangchuang Yu [@Yu:2022] <https://yulab-smu.top/treedata-book/>\n- <https://bioconnector.github.io/workshops/r-ggtree.html>\n\n# Learning objectives\n\n::: callout-note\n# Learning Objectives\n\n**At the end of this lesson you will:**\n\n-  Understand information content of phylogenetically structured data\n-  Understand particular R tree formats in ape, phylobase, and ouch\n-  Be able to hand-make trees\n-  Be able to import trees from nexus, newick, and other major formats in use today\n-  Be able to convert trees  from one format to another\n-   Be able to perform basic tree manipulations\n\n:::\n\n\n:::{.callout-note}\n# R packages you will need\n- `ape`\n- `ggtree`\n- `tidytree`\n- `treeio`\n:::\n\n# Overview\n\n`ggtree` is a powerful phylogenetic tree plotting package, that is used alongside `treeio` and `tidytree` packages to import/export and to manipulate phylogenetic trees, respectively. These packages allow you to subset or combine trees with data, annotate, and plot in so many different ways using the grammar of graphics. \n\nBecause itʻs written in the style of `ggplot2` and the `tidyverse`, there are a lot of functions to remember, and now there are also multiple object types. The key to working effectively with `ggtree` is to be aware of what type of object you are working with, whether it is a `dataframe`, a `tibble`, a `phylo` tree, a `treedata` tibble, or `ggtree` object. It is easy to convert between these at will if you know what you are dealing with. \n\n\n# phylo -> treedata\n\nFunctions like `read.tree` amd `read.nexus`, etc. will read in objects of class `phylo` (they are actually referencing the ape function). \n\nTo show this, letʻs first generate a random tree using `ape::rtree()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ape)\nrequire(ggtree)\nrequire(treeio)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree <- rtree(20)\nclass(tree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n\n```{.r .cell-code}\nplot(tree)  # ape plotting function\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nNote: `ggtree` can also accept `phylo` objects as arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(tree)  # ggtree plotting function\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nTo save as newick and nexus formats, `treeio` has the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreeio::write.nexus(tree, file=\"tree.nex\")\ntreeio::write.tree(tree, file=\"tree.tree\")\nlist.files()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"_index.qmd\"         \"anolis.SSD.raw.csv\" \"bigtree.nex\"       \n [4] \"ggtree_functions.R\" \"ggtree.R\"           \"index_files\"       \n [7] \"index.qmd\"          \"index.rmarkdown\"    \"tree.nex\"          \n[10] \"tree.tree\"         \n```\n:::\n:::\n\n\nTake a look at these files. They should be in nexus and newick formats, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_nex <- treeio::read.nexus(file=\"tree.nex\")\ntree_new <- treeio::read.newick(file=\"tree.tree\")\nclass(tree_nex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n\n```{.r .cell-code}\nclass(tree_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"phylo\"\n```\n:::\n:::\n\n\n::: callout-note\nIf you have trees from `iqtree`, `BEAST` etc., you should use the specialized read functions because they will capture the metadata embedded in the treeformat including support values. \n:::\n\n\n## Coverting between data types\n\n\nThe main functions for coersion are:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.phylo (tree)  # to phylo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t20, t10, t3, t7, t6, t18, ...\n\nRooted; includes branch lengths.\n```\n:::\n\n```{.r .cell-code}\nas.treedata(tree) # to treedata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t20, t10, t3, t7, t6, t18, ...\n\nRooted; includes branch lengths.\n```\n:::\n\n```{.r .cell-code}\ntreedata <- as.treedata(tree)  \nas_tibble(treedata)  # to tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 39 × 4\n   parent  node branch.length label\n    <int> <int>         <dbl> <chr>\n 1     22     1       0.915   t20  \n 2     26     2       0.532   t10  \n 3     26     3       0.847   t3   \n 4     25     4       0.118   t7   \n 5     28     5       0.690   t6   \n 6     28     6       0.725   t18  \n 7     29     7       0.261   t14  \n 8     31     8       0.00314 t9   \n 9     31     9       0.0128  t4   \n10     30    10       0.289   t12  \n# … with 29 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\n\n# Simulate phenotypic data\n\n### Add tiplabels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(tree) + geom_tiplab()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Get the tip labels\n\nThere is a function `get_taxa_name()` which is very handy, but NOTE: its argument is a `ggtree` object, not a `treedata` object. \n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggtree(tree) + geom_tiplab()\nget_taxa_name(p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"t4\"  \"t9\"  \"t12\" \"t14\" \"t18\" \"t6\"  \"t3\"  \"t10\" \"t7\"  \"t17\" \"t15\" \"t13\"\n[13] \"t11\" \"t5\"  \"t2\"  \"t16\" \"t20\" \"t1\"  \"t8\"  \"t19\"\n```\n:::\n\n```{.r .cell-code}\ntaxa <- get_taxa_name(p)\n```\n:::\n\n\nSimulate a data matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- length(taxa)\nsize <- rnorm(n, mean=20, sd=5)\nhabitat <- sample(c(\"desert\", \"grassland\", \"forest\", \"intertidal\"), size=n, replace=T)\ndat <- data.frame( \"label\"= taxa, size, habitat)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   label      size    habitat\n1     t4 13.190731     desert\n2     t9 19.541849  grassland\n3    t12 24.957978 intertidal\n4    t14 14.831695     forest\n5    t18 21.221452     desert\n6     t6 10.671196 intertidal\n7     t3 15.308488 intertidal\n8    t10 19.347808     desert\n9     t7 21.088887     forest\n10   t17  7.394603     desert\n11   t15 14.215988 intertidal\n12   t13 11.341547     desert\n13   t11 17.769369 intertidal\n14    t5 13.667986  grassland\n15    t2 18.265933  grassland\n16   t16 18.950921     desert\n17   t20 21.236842 intertidal\n18    t1 17.947431  grassland\n19    t8 11.629983 intertidal\n20   t19 13.964597     forest\n```\n:::\n:::\n\n\nSee our ggtree as a treedata object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.treedata(p) %>% as_tibble %>% as.data.frame  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   parent node branch.length label\n1      22    1   0.914660785   t20\n2      26    2   0.531915339   t10\n3      26    3   0.847355583    t3\n4      25    4   0.117541116    t7\n5      28    5   0.689902873    t6\n6      28    6   0.725284685   t18\n7      29    7   0.260759907   t14\n8      31    8   0.003144709    t9\n9      31    9   0.012793490    t4\n10     30   10   0.289318340   t12\n11     33   11   0.102822345   t16\n12     33   12   0.361748627    t2\n13     34   13   0.406217780    t5\n14     36   14   0.855577735   t13\n15     37   15   0.122123984   t15\n16     37   16   0.055801166   t17\n17     35   17   0.411075242   t11\n18     38   18   0.613953796   t19\n19     39   19   0.453259011    t8\n20     39   20   0.470733995    t1\n21     21   21            NA  <NA>\n22     21   22   0.768506521  <NA>\n23     22   23   0.153267556  <NA>\n24     23   24   0.854931734  <NA>\n25     24   25   0.451706708  <NA>\n26     25   26   0.354669122  <NA>\n27     24   27   0.472259514  <NA>\n28     27   28   0.512345967  <NA>\n29     27   29   0.681458147  <NA>\n30     29   30   0.226860373  <NA>\n31     30   31   0.391176049  <NA>\n32     23   32   0.034940638  <NA>\n33     32   33   0.130967953  <NA>\n34     32   34   0.677282662  <NA>\n35     34   35   0.356319352  <NA>\n36     35   36   0.147734449  <NA>\n37     36   37   0.980167842  <NA>\n38     21   38   0.107984108  <NA>\n39     38   39   0.106352382  <NA>\n```\n:::\n\n```{.r .cell-code}\n  # ggtree -> treedata -> tibble -> dataframe\n```\n:::\n\n\n# Merge tree with data\n\nNow that we have a matching key in both the tree and data objects, we can join the tree with the dataframe by those matching labels using `ggtree`ʻs `full_join`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nttree <- full_join(tree, dat, by = \"label\") \nttree\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 20 tips and 19 internal nodes.\n\nTip labels:\n  t20, t10, t3, t7, t6, t18, ...\n\nRooted; includes branch lengths.\n\nwith the following features available:\n  'size', 'habitat'.\n\n# The associated data tibble abstraction: 39 × 5\n# The 'node', 'label' and 'isTip' are from the phylo tree.\n    node label isTip  size habitat   \n   <int> <chr> <lgl> <dbl> <chr>     \n 1     1 t20   TRUE   21.2 intertidal\n 2     2 t10   TRUE   19.3 desert    \n 3     3 t3    TRUE   15.3 intertidal\n 4     4 t7    TRUE   21.1 forest    \n 5     5 t6    TRUE   10.7 intertidal\n 6     6 t18   TRUE   21.2 desert    \n 7     7 t14   TRUE   14.8 forest    \n 8     8 t9    TRUE   19.5 grassland \n 9     9 t4    TRUE   13.2 desert    \n10    10 t12   TRUE   25.0 intertidal\n# … with 29 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\nttree %>% as_tibble %>% as.data.frame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   parent node branch.length label      size    habitat\n1      22    1   0.914660785   t20 21.236842 intertidal\n2      26    2   0.531915339   t10 19.347808     desert\n3      26    3   0.847355583    t3 15.308488 intertidal\n4      25    4   0.117541116    t7 21.088887     forest\n5      28    5   0.689902873    t6 10.671196 intertidal\n6      28    6   0.725284685   t18 21.221452     desert\n7      29    7   0.260759907   t14 14.831695     forest\n8      31    8   0.003144709    t9 19.541849  grassland\n9      31    9   0.012793490    t4 13.190731     desert\n10     30   10   0.289318340   t12 24.957978 intertidal\n11     33   11   0.102822345   t16 18.950921     desert\n12     33   12   0.361748627    t2 18.265933  grassland\n13     34   13   0.406217780    t5 13.667986  grassland\n14     36   14   0.855577735   t13 11.341547     desert\n15     37   15   0.122123984   t15 14.215988 intertidal\n16     37   16   0.055801166   t17  7.394603     desert\n17     35   17   0.411075242   t11 17.769369 intertidal\n18     38   18   0.613953796   t19 13.964597     forest\n19     39   19   0.453259011    t8 11.629983 intertidal\n20     39   20   0.470733995    t1 17.947431  grassland\n21     21   21            NA  <NA>        NA       <NA>\n22     21   22   0.768506521  <NA>        NA       <NA>\n23     22   23   0.153267556  <NA>        NA       <NA>\n24     23   24   0.854931734  <NA>        NA       <NA>\n25     24   25   0.451706708  <NA>        NA       <NA>\n26     25   26   0.354669122  <NA>        NA       <NA>\n27     24   27   0.472259514  <NA>        NA       <NA>\n28     27   28   0.512345967  <NA>        NA       <NA>\n29     27   29   0.681458147  <NA>        NA       <NA>\n30     29   30   0.226860373  <NA>        NA       <NA>\n31     30   31   0.391176049  <NA>        NA       <NA>\n32     23   32   0.034940638  <NA>        NA       <NA>\n33     32   33   0.130967953  <NA>        NA       <NA>\n34     32   34   0.677282662  <NA>        NA       <NA>\n35     34   35   0.356319352  <NA>        NA       <NA>\n36     35   36   0.147734449  <NA>        NA       <NA>\n37     36   37   0.980167842  <NA>        NA       <NA>\n38     21   38   0.107984108  <NA>        NA       <NA>\n39     38   39   0.106352382  <NA>        NA       <NA>\n```\n:::\n:::\n\n\nAnd thatʻs what our `treedata` object looks like flattened out! \n\n\n## Subsetting the tree\n\nFunctions:  `drop.tip()` and `keep.tip()`\n\nSuppose we want to drop all of the even tips:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntodrop <- paste(\"t\", 1:10*2, sep=\"\")\ntodrop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"t2\"  \"t4\"  \"t6\"  \"t8\"  \"t10\" \"t12\" \"t14\" \"t16\" \"t18\" \"t20\"\n```\n:::\n\n```{.r .cell-code}\nsmalltree <- drop.tip(ttree, todrop)\nsmalltree\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'treedata' S4 object'.\n\n...@ phylo:\n\nPhylogenetic tree with 10 tips and 9 internal nodes.\n\nTip labels:\n  t3, t7, t9, t5, t13, t15, ...\n\nRooted; includes branch lengths.\n\nwith the following features available:\n  'size', 'habitat'.\n\n# The associated data tibble abstraction: 19 × 5\n# The 'node', 'label' and 'isTip' are from the phylo tree.\n    node label isTip  size habitat   \n   <int> <chr> <lgl> <dbl> <chr>     \n 1     1 t3    TRUE  15.3  intertidal\n 2     2 t7    TRUE  21.1  forest    \n 3     3 t9    TRUE  19.5  grassland \n 4     4 t5    TRUE  13.7  grassland \n 5     5 t13   TRUE  11.3  desert    \n 6     6 t15   TRUE  14.2  intertidal\n 7     7 t17   TRUE   7.39 desert    \n 8     8 t11   TRUE  17.8  intertidal\n 9     9 t19   TRUE  14.0  forest    \n10    10 t1    TRUE  17.9  grassland \n# … with 9 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\nggtree(smalltree) + geom_tiplab()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n`drop.tip` keeps all of the metadata! `keep.tip` is imported from `ape` so it has to be converted to `phylo` and then the data joined again after. \n\n\n## Plotting with node labels\n\nThe geometries `geom_text()` and `geom_node()` are helpful for labelling all of the nodes. The function `geom_tiplab()` labels only the tips. \n\n\nAdd node labels so you know what the internal node numbers are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab() +\n    geom_text(aes(label=node), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNote: The tiplabels and the node labels crashed!\n\nThere are also `2` versions: `geom_text2()` and `geom_node2()` that allow subsetting the nodes, when you want the geometry to apply to only some of the nodes.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab() +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n`isTip` is a column of the ggtree object, so it is inherited when we provide the ggtree object. \n\n\n## Plotting with alternative tip labels \n\nThe dataframe portion of the treedata object can hold any number of columns of metadata. Perhaps you have some real names in a different column (like a display name), it is easy to swap out the tip labels. Here letʻs just use the `habitat` column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## When your tip labels get cut off\n\nAdd an x scale (usually time):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers\n    theme_tree2()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nYou can increase the size of the plot area to accommodate the longer labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab(aes(label=habitat)) +\n    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers\n    theme_tree2() +\n    xlim(0,5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# Tree layouts \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(cowplot)\n\nplot_grid(\n  ggtree(ttree),\n  ggtree(ttree, branch.length='none'),\n  ggtree(ttree, layout=\"dendrogram\"),\n  ggtree(ttree, layout=\"roundrect\"),\n  ggtree(ttree, layout=\"ellipse\"),\n  ggtree(ttree, layout=\"ellipse\", branch.length=\"none\"),\n  ggtree(ttree, layout=\"circular\"),\n  ggtree(ttree, branch.length='none', layout='circular'),\n  ggtree(ttree, layout=\"fan\", open.angle=120),\n  ggtree(ttree, layout=\"inward_circular\")\n)\n```\n:::\n\n\n# Plotting data on the tree\n\n`geom_facet()` and `facet_plot()` are general methods to link graphical layers to a tree. \n\nThese functions require an input dataframe with the first column containing the taxon labels (the key which matches to the tip labels of the phylogeny). \n\nInternally these functions reorder the input data based on the tree structure so that you donʻt have to worry about the order of the rows. \n\nMultiple layers can be added to the same dataset.  Also different datasets can be added to the same figure. \n\nA table of the __geom layers__ that work with `geom_facet` is [provided here](https://yulab-smu.top/treedata-book/figures-and-tables.html#tab:facet-geom).\n\n\n## Example: plot `smalltree` with `size` in a barplot\n\nFirst make a tibble to attach to the tree. As of this writing, `geom_facet` will not accept a `treedata` object. It wants a dataframe or tibble of only the tips. But this is easy to make from the treedata. We just have to filter out the non-tip rows, then rearrange the columns to put the labels first:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ggplot2)\nrequire(dplyr)\n\nsmdat <- smalltree %>% \n           as_tibble %>% \n           filter(!is.na(label)) %>%\n           relocate(label, .before=1) \n```\n:::\n\n\nWe can then add the barplot as a panel next to the tree plot using `geom_facet`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggtree(smalltree) + \n    geom_tiplab() +\n    theme_tree2()  + \n    geom_facet(panel = \"Size\", \n               data=smdat, \n               geom = geom_col, \n               mapping=aes(x = smdat$size), \n               orientation = 'y', \n               width = .6, \n               fill=\"blue\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nThe arguments for geom_facet() are:\n\n- `panel` : The name of the panel, displayed on top\n- `data` : a `tibble` or `dataframe` containing the metadata to plot. Must have as the first column the tip labels that are found in the phylogenetic tree. \n- `geom` : a [geom layer](https://yulab-smu.top/treedata-book/figures-and-tables.html#tab:facet-geom) specifying the style of plot\n- `mapping` : the aesthetic mapping. I should not have to supply the `smdat$` here but it wonʻt work otherwise. \n- any additional parameters for the plot\n\n\n# A tree-panel and annotation example from the Tree Data Book:\n\nThis example plots a phylogeny alongside SNP (single nucleotide polymorphism) data and a barplot of some simulated data [@Yu:2022]. \n\n## The %+>% operator for ggtree objects\n\nThe %+>% operator is used to add data (`dataframe`, `tibble`) to a `ggtree` object:\n\n```{.bash}\nmy_ggtree <- my_ggtree %<+% new_data\n```\n\nThe result is a combined object that can be used for plotting, but it does not modify the original `treedata` object (which is a different object from the `ggtree` object). The `full_join()` function can be used to combine a tree with data to produce a new `treedata` object. \n\n\n## Example of the %+>% operator to add data to a ggtree object. \n\nThe package `TDbook` is the data accompanyment to [@Yu:2022]ʻs [Tree Data book](https://yulab-smu.top/treedata-book/index.html). It is available on CRAN so you can install it with the usual `install.packages(\"TDbook\")` function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ggtree)\nrequire(ggplot2)\nrequire(dplyr)\nrequire(TDbook)\n\n# load `tree_boots`, `df_tip_data`, and `df_inode_data` from 'TDbook'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggtree(tree_boots) %<+% df_tip_data + xlim(-.1, 4)\np2 <- p + geom_tiplab(offset = .6, hjust = .5) +\n    geom_tippoint(aes(shape = trophic_habit, color = trophic_habit, \n                size = mass_in_kg)) + \n    theme(legend.position = \"right\") + \n    scale_size_continuous(range = c(3, 10))\n\np2 %<+% df_inode_data + \n    geom_label(aes(label = vernacularName.y, fill = posterior)) + \n    scale_fill_gradientn(colors = RColorBrewer::brewer.pal(3, \"YlGnBu\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 7 rows containing missing values (`geom_label()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### Explore `df_info`\n\n\n`df_info` A dataframe containing sampling info for the tips of the tree. 386 rows and 6 variables, with the first column being taxa labels (`id`).\n\n`df_alleles` The allele table with original raw data to be processed to SNP data. It is a table of nucleotides with 386 rows x 385 variables. The first row contains tips labels. Column names are non-sense. The rownames (exept for the first one) contains the snp position along the genome. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## load `tree_nwk`, `df_info`, `df_alleles`, and `df_bar_data` from 'TDbook'\ntree <- tree_nwk\nsnps <- df_alleles\nsnps_strainCols <- snps[1,] \nsnps<-snps[-1,] # drop strain names\ncolnames(snps) <- snps_strainCols\n\ngapChar <- \"?\"\nsnp <- t(snps)  # not rectangular!\nlsnp <- apply(snp, 1, function(x) {\n        x != snp[1,] & x != gapChar & snp[1,] != gapChar\n    })  # different from row 1, not missing\nlsnp <- as.data.frame(lsnp) \nlsnp$pos <- as.numeric(rownames(lsnp))  # position from rownames\nlsnp <- tidyr::gather(lsnp, name, value, -pos)  \nsnp_data <- lsnp[lsnp$value, c(\"name\", \"pos\")] # only TRUEs\n```\n:::\n\n\n`snp_data` A dataframe containing SNP position data. 6482 x 2. The first column contains taxa labels coresponding to the tips of the tree  (`name`).  There are multiple rows per taxon, the second colum is the position `pos` of the snp in the genome. This is used as the x-variable in the plot. \n\nIn the dataframe `snp_data` the rows are ordered by position along the sequence (the x-dimension of this data), but the first column is the strain (taxon) name which matches the tips in the phylogenetic tree. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## visualize the tree \np <- ggtree(tree) \n\n## attach the sampling information data set \n## and add symbols colored by location\np <- p %<+% df_info + geom_tippoint(aes(color=location))\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### Add SNP and Trait plots aligned to the tree\n\nUse `geom_facet` with reference to the respective dataframes/tibbles to add plots alignted to the tree. For the SNP plot, we will use `geom_point` which allows x-y plotting, with x-coordinate determined by `pos` and the y-coordinate aligned with the taxon.  The symbol is the vertical line `|`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## visualize SNP and Trait data using dot and bar charts,\n## and align them based on tree structure\np1 <- p + geom_facet(panel = \"SNP\", data = snp_data, geom = geom_point, \n               mapping=aes(x = pos, color = location), shape = '|') \np1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n`df_bar_data` is some simulated data with an `id` column specifying the taxon names, and a `dummy_bar_value` containing some data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + geom_facet(panel = \"Trait\", data = df_bar_data, geom = geom_col, \n                aes(x = dummy_bar_value, color = location, \n                fill = location), orientation = 'y', width = .6) +\n    theme_tree2(legend.position=c(.05, .85))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n# Example datasets\n\nsave to your working directory:\n\n[bigtree.nex](bigtree.nex)  \n[anolis.SSD.raw.csv](anolis.SSD.raw.csv)  \n[ggtree.R](ggtree.R)  \n\nThis is an example of a typical workflow. We have carefully collected phenotypic data, and someone has published a massive phylogeny. We need to subset the tree to just the taxa we want to work on.   \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}