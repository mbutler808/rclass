{
  "hash": "d7f34c64d614dc226a3c8006e758abe9",
  "result": {
    "markdown": "---\ntitle: \"Intro to Geometric Morphometrics\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"Getting started with morphometrics\"\ndate: 2023-04-04\ncategories: [module 6, week 12, control structures, if else, (do) while, programming]\nbibliography: refs.bib\n---\n\n\n### Acknowledgements\n\nReferences for this Material:\n\n- Bardua et al (2019) A Practical Guide to Sliding and Surface Semilandmarks in Morphometric Analyses<https://academic.oup.com/iob/article/1/1/obz016/5526881>\n- [Emma Sherratʻs quick guide to Geomorph](https://www.researchgate.net/profile/Alexandre-Palaoro/post/Geomorph-Package-in-R/attachment/5cffb777cfe4a7968da98557/AS%3A768610867900420%401560262519604/download/Quick_Guide_to_Geomorph-3.0.pdf)\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Be able to collect landmark data\n-   Understand the terminology for landmark data\n\n:::\n\n### Preparation\n\nPackages:  \n__geomorph__   \n__rgl__    \n__Matrix__  \nPlease install if you donʻt have them. `install.packages(c(\"geomorph\",\"rgl\",\"Matrix\"), dependencies=T)`\n\nMac Users: Please also install Xquartz <https://www.xquartz.org>, a windowing system for `rgl`. \n\nFiles:  \n`red-fox-mandible-lateral.jpg`  Please [download](../../images/red-fox-mandible-lateral.jpg) into your folder for this exercise. \n[Source: Jim Russell](https://russellboneatlas.wordpress.com/home/red-fox-bone-atlas/red-fox-mandible/)\n\n# Overview\n\n__Traditional morphometrics__ uses linear measurements such as body length, hind limb length, etc. to characterize morphological variation. This works well for many questions, especially ones that relate to lever mechanics, such as locomotion or bite force, etc. but does not capture 3D variation well such as the geometric shape of a skull or the details of seed shape.  \n\n__Geometric morphometrics__ aims to characterize more complex shapes by the use of __landmarks__, locations on the specimens determined by the researcher to reveal key insights or capture the full range of variation. \n\n\nIn order to do this, we still need methods to characterize __size__ vs. __shape__. For geometric morphometrics that is typically __Procrustes superposition__. Some other differences also involve the data. Whereas one can typically take linear measurements directly on the specimen (with calipers or a ruler), collecting landmark data usually involves some image capture. \n\n# Capturing images\n\nThe most important thing is consistency and a protocol that minimizes error. While the specific protocol will vary by the type of object and technology (cameras, uCT, etc.), some general principles are :\n\n- Specimen Layout \n  + Be as __consistent__ as possible in the preparation of specimens and their arrangement\n  + Place every specimen on the same side. (Capture the same aspect of each specimen)\n  + Same pose or posture\n  + Mouths open? Closed?\n  + Fins or dewlaps exposed to show shape and articulatio, etc. \n- Size and Metadata\n  - Include a size standard (e.g., a ruler), ideally the same item, with X-Y information\n  - Include the specimen ID in the photo itself (written on a card, etc.) \n- Camera\n  - Camera in same position and same angle, preferably with a tripod\n  - Use the same camera and lens (or zoom, etc.)\n  - Make several backups (multiple flash cards, save to computer, etc.)\n  - Specimen perpendicular to camera (check level)\n  - Same lighting\n  - Take several photos as backup\n- Data Management\n  - Keep a notebook (written log) of the specimens being photographed, in order\n  - Transfer files to raw data folder for photos (in same format and same order)\n  - Name files with metadata in filenames for each specimen, save in another folder \n  - You should have Raw_Photos, Named_Photos folders.  \n\nErrors and distortions can be fixed with software, but it is much easier to minimize them at the start. \n\n# Landmarks \n\nEssential features of good landmarks:\n\nChoose landmarks that are:  \n\n-  Present on all specimens  \n-  Relevant to the question  \n-  Clearly defined (to be repeatable)  \n-  Conform to accepted best practices for your type of study (do a literature search)  \n\nHere is an example of typical landmarks:\n\n![Rodent lower jaw (mandible). Lateral view of a _Nectomys squamipes_ mandible, showing the 10 landmarks used in this work. 1) Anterior edge of the incisive alveolus; 2) Most posterior point of the diastema; 3) Junction between the mandible and the m1 root; 4) Junction between the molar base and the coronoid process; 5) Most posterior point at the articular process; 6) Most anterior point in the angular notch; 7) Most posterior point at the angular process; 8) Angular process base; 9) Inner edge of the mandibular symphysis; 10) Posterior edge of the incisive alveolus](../../images/rodentmandible.jpg)\n[Source](https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.7557)\n\n### Digitizing Landmarks on Images\n\nAcquiring landmarks usually involves some digitizing by hand (with computer assistance). For 2D landmark data the workflow is:\n\n-  Read in the image file  \n-  Set the scale   \n-  Digitize landmarks, collecting X-Y coordinate data \n\nImage files are rows and columns of pixels, the number of which is determined by the file size and resolution. Pixels therefore, form a grid which we can digitize, meaning we can indicate at which pixel our landmark of interest is. We translate the pixel coordinates into real-world distances, typically by ditigizing an object of known dimensions such as a ruler. Digitizing software typically asks the user to indicate the points on the screen and the known distances they correspond to. \n\nEasy-to use software for this purpose include `ImageJ` and `FIJI`, as well as the `geomorph` package in R.  Before doing a large project, I would try them all to see which serves your purpose the best. \n\n\n#  `geomorph` package\n\nThe package `geomorph` is widely used for geometric morphometrics, and will serve as a good example to illustrate the geometric morphometrics workflow all in R (depending on the project and the material, however, you may find it more convenient or efficient to use other software for digitizing).   \n\n\n### Digitizing landmarks in `geomorph`\n\n\nFor a quick example, letʻs do a 2D landmark collection on the Red Fox Mandible using `digitize2d()`.  Emma Sherratʻs [quick guide to Geomorph](https://www.researchgate.net/profile/Alexandre-Palaoro/post/Geomorph-Package-in-R/attachment/5cffb777cfe4a7968da98557/AS%3A768610867900420%401560262519604/download/Quick_Guide_to_Geomorph-3.0.pdf) provides a more thorough walk-through for capturing landmarks in Chapter 15.  \n\n\nThe syntax for `digitize2d()` is:\n\n`digitize2d(filelist, nlandmarks, scale = NULL, tpsfile, verbose = TRUE)`\n\nWhere:\n\n-  `filelist` : a vector of filenames of image files\n-  `nlandmarks` : the number of landmarks to digitize  \n-  `scale`  : the length of scale to use (optional)  \n-  `tpsfile` : the name of an output file to create or read \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(geomorph)\n\nfiles <- c(\"red-fox-mandible-lateral.jpg\")\n# files <- list.files(pattern = \"*.jpg\") \n             # for multiple files in your image directory\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndigitize2d( files, \n            nlandmarks=10, \n            scale=80, \n            tpsfile = \"mandible-lat.tps\", \n            verbose = TRUE) \n```\n:::\n\n\nR will now wait for you to digitize the first landmark. In verbose mode, it will ask you to _confirm_ each landmark (this can be turned off). If a landmark is missing, choose `a` for absent. If you make a mistake and choose `n`, it will ask you to redigitize it. The output will be sent to a `.tps `file.\n\n\n# TPS format\n\nTPS format is a standard morphometric data format for storing landmark coordinate data. \n\n`readland.tps()` reads TPS format and returns an array: _p_ landmarks by _k_ dimensions by _N_ specimens.  \n\nRemember an array is simply a multidimensional dataframe. Think of it here as a stack of spreadsheets. Each spreadsheet has rows for landmarks and columns for dimensions.  We have a separate spreadsheet for each specimen, making this a 3-dimensional array. \n\nThe third dimension of this array contains names for each specimen, which are obtained from the image names in the _.tps_ file.  We can read in the data that we digitized above:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- readland.tps(\"mandible-lat.tps\", specID = \"ID\", readcurves = FALSE, warnmsg = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nNo curves detected; all points appear to be fixed landmarks.\n```\n:::\n\n```{.r .cell-code}\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , ../../images/red-fox-mandible-lateral.jpg\n\n           [,1]      [,2]\n [1,] 107.29125 109.47242\n [2,] 103.69036 108.94577\n [3,] 101.66872 108.37825\n [4,]  43.63469 105.62467\n [5,]  10.59532 111.73118\n [6,]  16.56440 102.17078\n [7,]  12.09659  98.37737\n [8,]  34.05770  93.06904\n [9,]  66.20128  89.99578\n[10,] 113.50334 107.91870\n```\n:::\n:::\n\n\nNote that the name saved with the data in this case was the file name. For another example, check out the `plethodon` data included with `geomorph`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(plethodon)\nattributes(plethodon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$names\n[1] \"land\"    \"links\"   \"species\" \"site\"    \"outline\"\n```\n:::\n\n```{.r .cell-code}\nstr(plethodon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 5\n $ land   : num [1:12, 1:2, 1:40] 8.89 9.27 5.56 1.87 1.28 ...\n  ..- attr(*, \"dimnames\")=List of 3\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n $ links  : num [1:14, 1:2] 4 3 2 1 1 6 7 8 9 10 ...\n $ species: Factor w/ 2 levels \"Jord\",\"Teyah\": 1 1 1 1 1 1 1 1 1 1 ...\n $ site   : Factor w/ 2 levels \"Allo\",\"Symp\": 2 2 2 2 2 2 2 2 2 2 ...\n $ outline: num [1:3631, 1:2] 0.399 0.4 0.401 0.403 0.404 ...\n```\n:::\n:::\n\n\n3D coordinates in tps format simply have a third dimension (z in addition to x and y) in each spreadsheet (one spreadsheet or table per specimen).  \n\n![](../../images/geomorphdataarrays.png)\n\n\n[Source: Emma Sherratʻs quick guide to Geomorph](https://www.researchgate.net/profile/Alexandre-Palaoro/post/Geomorph-Package-in-R/attachment/5cffb777cfe4a7968da98557/AS%3A768610867900420%401560262519604/download/Quick_Guide_to_Geomorph-3.0.pdf)\n\n\n# Semi-Landmarks\n\nOftentimes, there is more shape variation than what is captured by the landmarks themselves, which are only points. In addition, sometimes curves and surfaces have no distinct feature that can be reliably captured as the same homologous point from specimen to specimen. For example, the curvature of a smooth shell may lack any distinct landmarks. In both of these cases, semi-landmarks can be helpful. \n\n__Semi-landmarks__ are regularly spaced points between two landmarks or along a curve or a surface.   \n  __Sliding semi-landmarks__ are spaced linearly along a curve.  \n  __Surface semi-landmarks__ are spread out evenly in 3D along a surface. \n\nNOTE: One thing to note is that any error in the landmarks will also be propagated to the semilandmarks. \n\n![Figure: Landmark and semilandmark data displayed on the caecilian _Siphonops annulatus_ BMNH 1956.1.15.88. Points are colored as follows: landmarks (red), sliding semilandmarks (“curve points,” yellow), and surface semilandmarks (“surface points,” blue). For information regarding each cranial region, see Bardua et al. (2019). BMNH, Natural History Museum, London, UK.](../../images/caecelian_skull_semilandmarks.jpeg)\n\n[Source: Bardua et al 2019](https://academic.oup.com/iob/article/1/1/obz016/5526881)\n\nAnnotated 3D version of this figure available at: <https://sketchfab.com/3d-models/add35e2e8af94839b1f577bfcee32e54>\n\nLetʻs practice digitizing 3D landmarks with the geomorph vignette: <https://cran.r-project.org/web/packages/geomorph/vignettes/geomorph.digitize3D.html>\n\n\n# Size Adjustment with Procrustes Superimposition \n\nProcrustes superimposition is the most widely used method to create size and shape variables from landmark data. The basic idea is that larger objects should have landmarks that are farther apart than the same landmarks in smaller objects. \n\n### Centroid\n\nA key concept is the __centroid__, which the center point of all of the landmarks. It is easily calculated for each specimen by taking the average of all of the landmark coordinates along each axis. For _p_ landmarks in two dimensions the coordinates of the centroid would be:\n\n$$\nC_{x} = \\frac{X_1+X_2+X_3+ ... + X_p}{p}\n$$\n$$\nC_{y} = \\frac{Y_1+Y_2+Y_3 ... + Y_p}{p}\n$$\n\n### Centroid size\n\nThe concept of __centroid size__ describes geometric size. It is calculated from the distances of each landmark from the centroid, but it is a geometric mean because it is caculated by taking the square-root of the sums of squared distances of each landmark from the centroid.  \n\n![The centroid of a triangle (with landmarks at the vertices) is the point in the center.](../../images/Triangle.Centroid.png)\n\n[Source: Wikipedia]\n\n### Shape Variables \n\nShape variables calculated from Procrustes superimposition mathematically separate scale (size) from shape by applying shape-preserving transformations to make the landmarks as similar as possible. \n\nThe concept: In order to compare differences in shape, we can remove size  (in other words, normalize by size or bring all of the specimens to the same size) with the following transformations:\n\n-  __Scale__: Bring each set of landmarks to the same size by magnifing or reducing the distances of the landmarks around their centroid.  \n-   __Translate__: Shift the landmarks in the coordinate space to place the centroids at a common point.  \n-  __Rotate__: Rotate the landmarks with an angular transformation to bring them into a common orientation. \n \n\nAt the end of Procrustes superimposition, the landmarks for the different specimens will be scaled to the same size and their coordinates will lie as close together as possible while preserving the differences in shape. The figure below illustrates these steps. \n\nThe mathematics of these transofrmations come from basic linear algebra operations on matrices, which are beyond the scope of the class, but to understand what is happening we can analogize it to univariate arithmetic.  \n\n_Scaling_ is like dividing each variable by a size variable to put all of the individuals on the same baseline with regard to size (magnitude). \n\n_Translation_ brings the centers of all of the landmarks into alignment. Think of a situation where we measured the length of specimens according to wherever they fell within the picture frame, for example if one specimen started at 2 and extended to 10, and another started at 6 and extended to 12. We could translate (or slide) each of these to place their midpoint at zero by subtracting the mean value from each of their endpoints. For the first specimen, we would subtract 6, translating the specimen from (2,10) to (-4,4), and for the second we would subtract 9, tanslating the specimen from (6,12) to (-3,3).  \n\n_Rotation_ is an angular rotation to bring a 2 or 3D object into a common orientation. For a more thorough discussion please see [@Zelditch:2004].\n\n![Figure: Procrustes superimposition. The figure shows the three transformation steps of an ordinary Procrustes fit for two configurations of landmarks. (a) Scaling of both configurations to the same size; (b) Translation to the same position of the center of gravity; (c) Rotation to the orientation that provides the minimum sum of squared distances between corresponding landmarks.](../../images/Procrustes_superimposition.png)\n\n[Source: Christian Klingenberg](https://commons.wikimedia.org/wiki/File:Procrustes_superimposition.png)\n\n::: callout-note\n## From the documentation for `gpagen()` in `geomorph`:\nGPA translates all specimens to the origin, scales them to unit-centroid size, and optimally rotates them (using a least-squares criterion) until the coordinates of corresponding points align as closely as possible. The resulting aligned Procrustes coordinates represent the shape of each specimen, and are found in a curved space related to Kendall's shape space (Kendall 1984). Typically, these are projected into a linear tangent space yielding Kendall's tangent space coordinates (i.e., Procrustes shape variables), which are used for subsequent multivariate analyses (Dryden and Mardia 1993, Rohlf 1999). \n:::\n\n# Geomorph Package\n\n### Data Structures\n\nThe package `geomorph` is written to work with standard geomorphic morphometrics data file types such as TPS and NTS, as well as others. \n\n`readland.tps()` reads morphometric data in TPS format. It returns an array for storing landmark data: _p_ landmarks X _k_ dimensions X _N_ specimens\n\nThe third dimension of this array contains names for each specimen, which are obtained from the image names in the _.tps_ file.\n\n\n### Built-in Example\n\nLetʻs look again at the built-in dataset `plethodon` that comes with `geomorph`. It has skull landmark data for 40 specimens of two species of plethdon salamanders. `plethodon` is a list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(plethodon) \nclass(plethodon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nattributes(plethodon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$names\n[1] \"land\"    \"links\"   \"species\" \"site\"    \"outline\"\n```\n:::\n\n```{.r .cell-code}\ntable(plethodon$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Jord Teyah \n   20    20 \n```\n:::\n\n```{.r .cell-code}\ndim(plethodon$land)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12  2 40\n```\n:::\n:::\n\n\nThe landmarks are in `plethodon$land`. There are twenty of each species, and from the dimensions  of `plethodon$land` we see that each of the 40 specimens has 12 landmarks in two dimensions. `plotAllSpecimens` plots the coordinates of all samples, so we can start to look at variation. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|warning: false\nplotAllSpecimens(plethodon$land)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nY.gpa <- gpagen(plethodon$land, PrinAxes = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPerforming GPA\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |======================================================================| 100%\n\nMaking projections... Finished!\n```\n:::\n\n```{.r .cell-code}\nsummary(Y.gpa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\ngpagen(A = plethodon$land, PrinAxes = FALSE) \n\n\n\nGeneralized Procrustes Analysis\nwith Partial Procrustes Superimposition\n\n12 fixed landmarks\n0 semilandmarks (sliders)\n2-dimensional landmarks\n2 GPA iterations to converge\n\n\nConsensus (mean) Configuration\n\n             X            Y\n1   0.15263287 -0.023350400\n2   0.19445064 -0.092643121\n3  -0.03361223 -0.007346212\n4  -0.28069721 -0.092850147\n5  -0.30998751 -0.061672264\n6  -0.32557841 -0.036112255\n7  -0.31804390  0.036125318\n8  -0.18947114  0.098010902\n9   0.02036829  0.099112877\n10  0.18852641  0.077278061\n11  0.35134314  0.065866346\n12  0.55006905 -0.062419105\n```\n:::\n:::\n\n\nThe summary provides the mean for each of the coordinates after GPA. We can see the mean of the coordinates among the individual coordinates by plotting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Y.gpa)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nLetʻs compare the plot of all specimens before and after Generalized Procrustes Analysis. The below plot is before GPA, on the raw landmarks `plethodon$land`:\n\n::: {.cell}\n\n```{.r .cell-code}\nplotAllSpecimens(plethodon$land)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nPlotting again after alignment with Generalized Procrustes Analysis gives a good representation of shape variation. Plotting links between the landmarks helps with visualization. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotAllSpecimens(Y.gpa$coords,links=plethodon$links)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nPCA on the procrustes coordinates (size-adjusted or shape variables) can be done with: \n\n::: {.cell}\n\n```{.r .cell-code}\npleth.pca <- gm.prcomp(Y.gpa$coords)\npleth.pca \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nOrdination type: Principal Component Analysis \nCentering by OLS mean\nOrthogonal projection of OLS residuals\nNumber of observations: 40 \nNumber of vectors 20 \n\nImportance of Components:\n                             Comp1       Comp2        Comp3        Comp4\nEigenvalues            0.001855441 0.001566597 0.0004141056 0.0002278444\nProportion of Variance 0.367433295 0.310233333 0.0820053761 0.0451200584\nCumulative Proportion  0.367433295 0.677666628 0.7596720044 0.8047920628\n                              Comp5        Comp6        Comp7        Comp8\nEigenvalues            0.0001725997 0.0001672575 0.0001549008 0.0001251132\nProportion of Variance 0.0341799312 0.0331220169 0.0306750315 0.0247761773\nCumulative Proportion  0.8389719940 0.8720940109 0.9027690424 0.9275452197\n                              Comp9       Comp10       Comp11       Comp12\nEigenvalues            8.468503e-05 6.869926e-05 5.430853e-05 4.423148e-05\nProportion of Variance 1.677019e-02 1.360452e-02 1.075473e-02 8.759165e-03\nCumulative Proportion  9.443154e-01 9.579199e-01 9.686747e-01 9.774338e-01\n                             Comp13       Comp14       Comp15       Comp16\nEigenvalues            0.0000261742 0.0000192644 1.741769e-05 1.715141e-05\nProportion of Variance 0.0051832795 0.0038149309 3.449226e-03 3.396495e-03\nCumulative Proportion  0.9826170994 0.9864320303 9.898813e-01 9.932778e-01\n                             Comp17       Comp18       Comp19       Comp20\nEigenvalues            1.555244e-05 9.253679e-06 5.336746e-06 3.802714e-06\nProportion of Variance 3.079853e-03 1.832507e-03 1.056837e-03 7.530520e-04\nCumulative Proportion  9.963576e-01 9.981901e-01 9.992469e-01 1.000000e+00\n```\n:::\n:::\n\nThere are 20 PC axes, with 67% of the total shape variation in the first two axes. A plot on PC1 vs PC2 reveals several distinct clusters, suggesting shape differences. The scores are in `pleth.pca$x`. There is a plot method for geomorph pca results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npleth.pca.plot <- plot(pleth.pca)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWe can plot additional by specifying the axes to plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2)) # set up 2x2 plots\nplot(pleth.pca, main = \"PCA\")\nplot(pleth.pca, main = \"PCA\", axis1 = 1, axis2 = 3) \n          # change PCs viewed to axes 1 vs 3\nplot(pleth.pca, main = \"PCA\", axis1 = 2, axis2 = 3) \nplot(pleth.pca, main = \"PCA\", axis1 = 3, axis2 = 4) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nThe specimens are from two species in two distinct environments, and we can test these as explanatory variables for phenotypic varation. Because there are multiple pheontypic (Y) variables, we use MANOVA (multivariate ANOVA).  reveals sig- nificant shape differences between species, between sites and in the interaction between the two factors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny<-two.d.array(Y.gpa$coords) \nlm.fit <- procD.lm(y~plethodon$species*plethodon$site, iter=99)\nsummary(lm.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nAnalysis of Variance, using Residual Randomization\nPermutation procedure: Randomization of null model residuals \nNumber of permutations: 100 \nEstimation method: Ordinary Least Squares \nSums of Squares and Cross-products: Type I \nEffect sizes (Z) based on F distributions\n\n                                 Df       SS       MS     Rsq      F      Z\nplethodon$species                 1 0.029258 0.029258 0.14856 14.544 3.9999\nplethodon$site                    1 0.064375 0.064375 0.32688 32.000 6.2349\nplethodon$species:plethodon$site  1 0.030885 0.030885 0.15682 15.352 5.3284\nResiduals                        36 0.072422 0.002012 0.36774              \nTotal                            39 0.196940                               \n                                 Pr(>F)  \nplethodon$species                  0.01 *\nplethodon$site                     0.01 *\nplethodon$species:plethodon$site   0.01 *\nResiduals                                \nTotal                                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCall: procD.lm(f1 = y ~ plethodon$species * plethodon$site, iter = 99)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nref<-mshape(Y.gpa$coords)\ngp1.mn<-mshape(Y.gpa$coords[,,1:20])\nplotRefToTarget(ref,gp1.mn,mag=2, links=plethodon$links)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n# More software \n\n<https://academic.oup.com/view-large/223239151>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}