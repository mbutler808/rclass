{
  "hash": "3acc906b5f56beaca9bac2589b37c9a6",
  "result": {
    "markdown": "\\documentclass[letterpaper]{article}\n\\SweaveOpts{eps=FALSE}\n\\SweaveOpts{keep.source=TRUE}\n\n\\usepackage{paralist}\n\\usepackage{amsmath}\n\\usepackage{authblk}\n\\usepackage{graphicx}\n\\usepackage{color}\n\\usepackage{natbib}\n\\usepackage{url}\n\\usepackage[colorlinks=true,urlcolor=blue, citecolor=red]{hyperref}\n\\usepackage{fullpage}\n\\newcommand{\\degree}{\\ensuremath{^\\circ}}\n\n%\\setlength{\\textwidth}{7.25in}\n%\\setlength{\\textheight}{8.75in}\n%\\setlength{\\evensidemargin}{-.5in}\n%\\setlength{\\oddsidemargin}{-.5in}\n%\\setlength{\\topmargin}{-.35in}\n%\\setlength{\\parskip}{.1in}\n%\\setlength{\\parindent}{0.0in}\n\n\\newcommand{\\code}{\\texttt}\n\n\\title{Scaling up with Apply Functions}\n\\author{Marguerite A. Butler}\n\n\\begin{document}\n\\maketitle\n\n%# Lists and For Loops\n\n## Apply Functions\n\n\\code{for} loops are straightforward to understand, but they are usually slower in R and sometimes not very elegant. Another way to repeatedly execute code is via the \\code{apply()} functions. \\code{apply} functions are unique to R, and in some situations can operate on an entire object at once, which can make them fast. This is called **vectorization**. For example, think of a very simple function that calculates the square of a number:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsquare <- function( x ) {\n  return (x*x)\n  }\n```\n:::\n\n\nIf you wanted to apply it to the vector 1:10, using a for loop, it would look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxx <- vector(length=10)   ## create a container for output\nfor ( i in 1:10 ) {       ## step through i`s from 1 to 10\n  xx[i] <- square( i )    ## run square function for each i\n  }\nxx  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n:::\n:::\n\n\nThis runs the \\code{square()} function 10 times, once for each value of \\code{i} from 1 to 10. Importantly, notice that it works by going through \\code{i} one element at a time.  \n\nAlternatively we can use an \\code{apply} function, let`s try \\code{sapply()}:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply( 1:10, square ) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n:::\n:::\n\n\nThere are several different ``flavors\" of apply functions, but they all have similar forms:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply( X, FUN, ...)\n```\n:::\n\n\nWhere \\code{X} is an object, and \\code{FUN} is a function. The function is applied to each element of \\code{X}, often simultaneously (whether this happens simultaneously or not depends on whether the function written with vectorization in mind, you have to just try). \n\nAnother common type is \\code{lapply}, which operates on list objects and returns a list.  \\code{sapply} (`s` for simplify) is almost identical to \\code{lapply}, but tries to make prettier output by returning a vector or a matrix if possible (instead of a list):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply( 1:5, square ) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n\n```{.r .cell-code}\nlapply( 1:5, square )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 9\n\n[[4]]\n[1] 16\n\n[[5]]\n[1] 25\n```\n:::\n:::\n\n\nThere is also \\code{apply()} which works on matrices or arrays, and has an index argument for whether it should apply the function over rows or columns etc., \\code{tapply} to apply the function across a grouping index or treatments,  \\code{mapply} to apply to multiple lists simultaneously, \\code{outer} which applies the function to an outer product of two arrays, and more. \\code{aggregate} is actually a user-friendly wrapper for \\code{tapply}. All of the \\code{apply} functions work in the same way. Don`t get overwhelmed - I mainly use \\code{sapply} or \\code{lapply}, and \\code{aggregate}, and occasionally \\code{apply} if I need to work over rows.  That`s all you need to remember, consult the help page when you need. \n\n### Additional Arguments\n\nIf the function needs additional arguments, you just provide them separated by commas: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply( X, FUN, arg1, arg2, ...)\n```\n:::\n\n\nFor example, let`s say we wanted to sample with replacement from the vector \\code{1:5}. To do it once, we would do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(5, replace=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 5 1 1 1\n```\n:::\n:::\n\n\nTo do it 4 times, you could do: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply( c(5, 5, 5, 5), sample, replace=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    2    3    5    2\n[2,]    5    3    2    1\n[3,]    1    1    2    1\n[4,]    1    1    5    4\n[5,]    2    4    5    1\n```\n:::\n:::\n\n\n\\code{sapply} took the vector of fives and created a sample for each one. \n\n### Using homemade functions\n\nSometimes the function that you want to run inside of an apply function is more complicated and requires many lines. Suppose you wanted to run several functions or have many lines of code.  You have two choices.  First, you can write a function definition and then pass it to an apply function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfunction <- function (file, y=NULL, z=NULL) {\n  xx <- read.csv(file)\n  plot(xx, ...) \n  zz <- some_other_function (x,y,z)\n  ... \n  return (out)\n  }\nsapply(  list_of_filenames ,  myfunction, y=blah1, z=blah2) \n```\n:::\n\n\nAlternatively you could  define the function within the apply function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply( input, function(x) {\n  ...lines_of_code... \n  })\n```\n:::\n\n\nWhere \\code{x} is a single element of the \\code{input} object, so if \\code{input} is a vector, \\code{x} would be one element of the vector.  But if \\code{input} is a list, it would be the first list element, etc. Apply functions work really nicely with lists, and many times they handle dataframes nicely as well.   \n\nTo return to one of our first examples, to code the \\code{square} function inside of the \\code{sapply} it would simply be:\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply ( 1:10, function(x)  x*x )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n:::\n:::\n\n Where \\code{\\{\\}} around \\code{{x*x}} are optional here because it`s only one line.  This is much cleaner and more elegant than:\n \n\n::: {.cell}\n\n```{.r .cell-code}\nxx <- vector(length=10)   ## create a container for output\nfor ( i in 1:10 ) {       ## step through i`s from 1 to 10\n  xx[i] <- square( i )    ## run square function for each i\n  }\nxx  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n:::\n:::\n\n\nFurthermore, it`s often easier to understand assigning the output object, because the entire object is returned, not filled element by element:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxx <- sapply ( 1:10, function(x)  x*x )\n```\n:::\n\n\nThis is another advantage of thinking of the manipulation on the whole object rather than pieces of it. \n\n\n## Exercises\n\\begin{enumerate}\n-  Perform the following computation using an apply function.\n\n::: {.cell}\n\n```{.r .cell-code}\nmylist <- vector(\"list\")   ## creates a null (empty) list\nfor (i in 1:4) {\n   mylist[i] <- list(data.frame(x=rnorm(3), y=rnorm(3)))  \n}\n```\n:::\n\n-  Plot x as a function of y for each dataframe using an apply function. \n-  Using an apply function, compute an anova on \\code{x $\\sim$ y} on each dataframe, and save the anova output (there should be 4 of them) to a list or dataframe. \n-  Write a for loop that finds the sum of the sequence of integers from 1 to 100, then accomplish the same computation with an apply function.\n\n\\end{enumerate}\n\n\\end{document}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}