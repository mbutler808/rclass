{
  "hash": "3c7576fdd587293ae006e88338905de2",
  "result": {
    "markdown": "---\ntitle: \"All about trees\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"Getting trees in to R and understanding their formats\"\ndate: 2023-04-18\ncategories: [module 7, week 13, phylogenetic trees, nexus, fasta, newick, beast, iqtree]\nbibliography: ../refs.bib\n---\n\n\n### Acknowledgements\n\nReferences for this Material:\n\n- This was adapted from the chapter \"All about trees\" written by Brian OʻMeara from the manual \"Getting started in R for Phylogenetics\" by Marguerite A. Butler, Brian C. O’Meara, Jason Pienaar, Michael Alfaro, Graham Slater, and Todd Oakley\n\n\n# Learning objectives\n\n::: callout-note\n# Learning Objectives\n\n**At the end of this lesson you will:**\n\n-  Understand information content of phylogenetically structured data\n-  Understand particular R tree formats in ape, phylobase, and ouch\n-  Be able to hand-make trees\n-  Be able to import trees from nexus, newick, and other major formats in use today\n-  Be able to convert trees  from one format to another\n-   Be able to perform basic tree manipulations\n\n:::\n\n\n:::{.callout-note}\n# R packages you will need\n- `ape`\n- `ouch`\n:::\n\n# Tree vocabulary\n\nIn nature, a tree is a large perennial woody plant. It has roots, a main trunk, branches, and leaves.\nIn graph theory, a tree is a network where there is only one path between any two nodes (in other words, a network with no loops or cycles).\n\nIn phylogenetics, we use ideas and terminology from both graph theory and nature: \n\n- **Terminal taxa** are also known as **leaves**, **terminals**, **OTU**s (\"**Operational Taxonomic Units**\"), **tips**, or simply **taxa**. \n- **Branches** are also called **edges** or __internodes__. \n- **Internal** nodes (places where two or more branches connect) are also known as __vertices__ and sometimes simply **nodes** (technically, leaves are also nodes). \n- A **rooted** tree has one node designated as the **root**, and all other nodes are descended from this root. Traditionally, the root node has at least two descendants; it may also have a subtending branch (an ancestral branch).\n- An **unrooted** tree has no root designated, making the oldest ancestor ambiguous.  \n- A tree where every internal node has two and only two descendants is known as a **binary** or **bifurcating** tree. \n- A tree where at least one internal node has more than two descendants is said to be **multifurcating**; such a node is a **polytomy**. \n- Trees in phylogenetics generally represent either **species trees** (a history of the splitting of interbreeding populations) or **gene trees** (a history of the coalescence of gene copies). In both cases, it is generally believed that the true process is bifurcating, so that each split results in two descendants. Thus, polytomies on trees are generally taken as representing _uncertainty in the relationships_. However in the case of adaptive radiations, and other __rapidly speciating processes__, the true process may be approaching multifurcation.\n-  __Branches__ may have **lengths**; these lengths may correspond to _time_, _amount of change_ (e.g., mutations) in some set of characters, _number of speciation events_, or some other measure. \n-  A tree where all __branch lengths__ from root to tips are equal is known as an **ultrametric** tree. \n-  A tree without branch lengths is known as a **topology**. \n-  A **monophyletic clade** is an ancestor and all its descendants. \n-  Any **edge** or __branch__ corresponds to a **bipartition**: _a division of the tree into two parts connected by that edge_ (if a root were inserted on the edge, then each of those parts would be a clade).\n\n# Newick format\n\nA very basic tree format is __Newick__ (`.tree`), named after the [seafood restaurant](https://www.newicks.com) in New Hampshire where it was formalized in 1986 by James Archie, William H. E. Day, Joseph Felsenstein, Wayne Maddison, Christopher Meacham, F. James Rohlf, and David Swofford - the second meeting was at the restaurant; it is also called New Hampshire format for that reason). It is widely used in graph theory as well. It is simply a string. Each nesting on the tree corresponds to a parenthetical statement. For example, for this tree (drawn brute-force):\n\n![Photo from the Newick restaurant [home page](https://www.newicks.com)](http://www.newicks.com/Web2014/Ed7.1.jpg)\n\n\nNOTE: You would never construct a `phylo` tree as below, this is just to illustrate its structure (see following sections for how to read in trees): \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ape)\nrequire(ouch)\nrequire(treeio)\n# simpletree <- rcoal(length(LETTERS[1:7]), rooted = TRUE, tip.label = LETTERS[1:7], br = \"coalescent\")\n\nsimpletree<-structure(list(\n    edge = matrix(\n      c(8, 9, 10, 10, 9, 11, 11, 8, 12, 12, 13, 13, \n        9, 10, 1, 2, 11, 3, 4, 12, 5, 13, 6, 7),\n      nrow=12L), \n    tip.label = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"), \n    Nnode = 6L\n  ), \n    class = \"phylo\")\nplot(simpletree,no.margin=TRUE)\n```\n\n::: {.cell-output-display}\n![A simple tree](index_files/figure-html/fig-simpletree-1.png){#fig-simpletree width=672}\n:::\n:::\n\n\nTaxa G and F form a __clade__, as do G, F, and E, as do A and B, and so forth. Thus, to create a Newick string, just go down the tree, nesting as you go:\n\n__(G,F)__\n\n__((G,F),E)__\n\nother side:\n\n__(A,B)__\n\n__(C,D)__\n\n__((A,B),(C,D))__\n\nall together:\n\n__(((G,F),E),((A,B),(C,D)))__\n\nAnd that's it (it will be clearer in the lecture)\nIf a tree has branch lengths, these are entered following the descendant clade. For example, if the branch leading to G has length 1.0, we would write `G:1.0` rather than just `G`. If the tree is ultrametric, and the branch below the common ancestor of G and F is of length `1.1`, and the branch below that of length `3.5`, we could write (note: a semicolon `;` ends the newick string):\n\n`((G:1.0,F:1.0):1.1,E:2.1):3.5;`\n\nOne aspect of the Newick (and most tree) representation is that there are many ways of representing the same tree. At every node, one can rotate the descendant branches (switching the left and right positions) and get the same tree (for example, imagine switching the G and E labels). Thus, the Newick strings\n\n__((G,F),E)__\n\nand\n\n__((F,G),E)__\n\ndescribe the same trees, though it might not be easy to tell at first glance. This is generally an issue for any tree representation. While Newick strings are compact and easy to understand, they also don't lend themselves to easy _tree traversal_ (moving up or down the tree). In most analysis software that performs computations along trees, some other representation is used.\n\n\n# NEXUS -- More soon\n\nThe NEXUS format (`*.nex` or `*.nxs`) is widely used in bioinformatics. Many phylogenetics programs use nexus format including $PAUP^*$, MrBayes, Mesquite, MacClade, etc., and many more can read nexus.  \n\nOne of the key features is that it is very _extensible_ with information in __blocks__. We will only be concerned with blocks of DNA sequence data, but any type of information can be added.  This flexibilityy, however, can be a curse when you encounter new extensions to the format that your code did not anticipate. However, for the most part we will be using packages that read in nexus so you can reasonable hope that someone has dealt with the headache for you. \n\nNexus files are often used as inputs to phylogenetic programs. In that case, they typically only have a TAXA block and a DATA block. In our IQTREE2 example we also had a partition file in nexus format. But they can also return the output of the phylogenetic reconstruction, in that case they will have a TREES block as well. \n\n### Nexus syntax:\n\nA NEXUS file begins with `#NEXUS` on the first line. \n\n__Blocks__ of information follow, tyically on multiple lines, enclosed by a __BEGIN blockname;__ and __END;__ (Key words are case-insensitive).\n\nComments are enclosed by square brackets `[comments]`\n\nTypical blocks:\n\n-  __TAXA__: The taxa block contains the names of the taxa.\n-  __DATA__: The data block contains a data matrix (we will use DNA sequences).\n-  __TREES__: The trees block contains one or more phylogenetic trees in newick format.\n\nFor example [From Wikipedia](https://en.wikipedia.org/wiki/Nexus_file):\n\n```{.bash}\n#NEXUS\nBegin TAXA;\n  Dimensions ntax=4;\n  TaxLabels SpaceDog SpaceCat SpaceOrc SpaceElf;\nEnd;\n\nBegin data;\n  Dimensions nchar=15;\n  Format datatype=dna missing=? gap=- matchchar=.;\n  Matrix\n    [ When a position is a \"matchchar\", it means that it is the same as the first entry at the same position. ]\n    SpaceDog   atgctagctagctcg\n    SpaceCat   ......??...-.a.\n    SpaceOrc   ...t.......-.g. [ same as atgttagctag-tgg ]\n    SpaceElf   ...t.......-.a.           \n  ;\nEnd;\n\nBEGIN TREES;\n  Tree tree1 = (((SpaceDog,SpaceCat),SpaceOrc,SpaceElf));\nEND; \n```  \n\n\n# `phylo` (`ape` 5.0 or above)\n\nThe [`ape` package](http://ape-package.ird.fr) [@Paradis:2019] uses a different representation of trees. It uses R `structures`, `lists`, `matrices`, and `vectors` to store a tree. Each node in the tree receives a number. For example, here is the tree from before in `ape` format. \n\nHere is `simpletree` with the node numbers printed. It is printed with the following commands:\n\n\n::: {.cell caption='A simple tree with ape\\'s numbering of nodes included'}\n\n```{.r .cell-code}\nplot(simpletree,no.margin=TRUE)\nnodelabels()\ntiplabels()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/simpletreeplotnodelabels-1.png){width=672}\n:::\n:::\n\n\nFor a tree with __N tips__, the tips have __numbers 1...N__ and the __nodes__ have __numbers greater than N__ (this is in contrast to how this was done in early (<1.9) versions of `ape`). These numbers  are used to store information about the tree's structure. \n\nTo do this, a matrix is created, with height corresponding to the number of internal and terminal nodes and width 2. The first column of the matrix has the node at the beginning of the branch, the second has the node at the end of the branch. For example, for our simple tree, this matrix is\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpletree$edge\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2]\n [1,]    8    9\n [2,]    9   10\n [3,]   10    1\n [4,]   10    2\n [5,]    9   11\n [6,]   11    3\n [7,]   11    4\n [8,]    8   12\n [9,]   12    5\n[10,]   12   13\n[11,]   13    6\n[12,]   13    7\n```\n:::\n:::\n\nThis alone is enough for a basic topology. However, it might be nice to know what the taxa actually are, rather than just numbers. To do this, a character vector with as many entries as the number of tips is used. In the example tree, this is\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpletree$tip.label\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n```\n:::\n:::\n\nIt's possible that internal nodes have labels, too (for example, the most recent common ancestor of a set of birds might be labeled Aves). If so, an optional `node.label` is used.\nIf branch lengths are known, they are included as the numeric vector `edge.length`. Letʻs some add using ape functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpletreebrlen<-compute.brlen(simpletree)\nsimpletreebrlen$edge.length<-3*simpletreebrlen$edge.length\nsimpletree<-simpletreebrlen\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpletree$edge.length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.5 1.0 0.5 0.5 1.0 0.5 0.5 2.0 1.0 0.5 0.5 0.5\n```\n:::\n:::\n\nFinally, there are a few other elements (`Nnode`, the number of internal nodes; `class=phylo`) to set the class. To dump the the internal representation of phylo tree to screen, you can use `unclass()` which strips the class attribute (the S4 analog is `attributes`): \n\n::: {.cell}\n\n```{.r .cell-code}\nunclass(simpletree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$edge\n      [,1] [,2]\n [1,]    8    9\n [2,]    9   10\n [3,]   10    1\n [4,]   10    2\n [5,]    9   11\n [6,]   11    3\n [7,]   11    4\n [8,]    8   12\n [9,]   12    5\n[10,]   12   13\n[11,]   13    6\n[12,]   13    7\n\n$tip.label\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n\n$Nnode\n[1] 6\n\n$edge.length\n [1] 1.5 1.0 0.5 0.5 1.0 0.5 0.5 2.0 1.0 0.5 0.5 0.5\n```\n:::\n:::\n\n`phylo` trees are S3 objects. We'll be learning more about them later, but an important thing to know is that you directly access any element of them by using the `$` operator (as was done above). Optional elements, or even elements of your own devising, can be added to them, too, using the same operator.\n\n### Getting trees into phylo format\n\n`ape` has many of functions for reading in trees (the `read.` series) and writing trees to file (the `write.` series). The most commonly used are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.nexus(file, tree.names = NULL, force.multi = FALSE)\nread.tree(file = \"\", text = NULL, tree.names = NULL, skip = 0,\n    comment.char = \"\", keep.multi = FALSE, ...)\nread.FASTA(file, type = \"DNA\")\nread.GenBank(access.nb, seq.names = access.nb, species.names = TRUE,\n             as.character = FALSE, chunk.size = 400, quiet = TRUE)    \nwrite.nexus(..., file = \"\", translate = TRUE)\nwrite.tree(tree, file = \"\", append = FALSE,\n           digits = 10, tree.names = FALSE)\n```\n:::\n\n\nTo see more, invoke the package help page `?ape` and look under `read.` and `write.`\n\nExamples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.tree(simpletree, \"mytree.tree\")\ntree <- read.tree(\"mytree.tree\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree2 <- read.tree(text=\"((G:1.0,F:1.0):1.1,E:2.1):3.5;\")\nplot(tree2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n`phylo` is widely used in other packages as well. `ape` itself has many functions as it was written primarily to perform phylogenetic comparative analyses. \n\n#### Methods \n\nIn line with the style of object-oriented programming, R has a generic function convention that will dispatch the correct function after looking at the class of the first object passed to it as an argument. For example, when you tell it to `plot(vector_object)` R takes a look -- \"oh, youʻre a vector, Iʻll send you to the plotting method for vectors\". \n\nThe developer of the class (usually bundled in a package) has to write all of the generic methods for their new class. You can see all of the methods available for S3 classes like `phylo` like so: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmethods(class=class(simpletree)) # same as methods(class=\"phylo\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in findGeneric(nm, envir = as.environment(w)): 'drop.tip' is a formal\ngeneric function; S3 methods will not likely be found\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] +                    all.equal            ancestor            \n [4] as_tibble            as.evonet            as.hclust           \n [7] as.matching          as.treedata          as.ultrametric      \n[10] c                    child                coalescent.intervals\n[13] coerce               cophenetic           degree              \n[16] di2multi             drop.tip             full_join           \n[19] identify             initialize           is.binary           \n[22] is.rooted            is.ultrametric       isTip               \n[25] keep.tip             makeLabel            MRCA                \n[28] multi2di             Nedge                Nnode               \n[31] nodeid               nodelab              Ntip                \n[34] offspring            parent               plot                \n[37] print                reorder              root                \n[40] rootnode             show                 skyline             \n[43] slotsFromS3          summary              tree_subset         \n[46] unroot               updateLabel          vcv                 \nsee '?methods' for accessing help and source code\n```\n:::\n:::\n\n\nRemember these are functions, so these are all functions that are written to work with any `phylo` object. \n\nTry some, like `Ntip(simpletree)`.  Both `drop.tip` and `keep.tip` are really helpful for cutting your tree down to a subset of taxa. \n\n# ouchtree (`ouch` version 2.0 or above)\n\nTrees in the package `ouch` [@Butler:2004,@King:2022] are of class `ouchtree`, and are written as an S4 object, as opposed to the S3 object class used by `ape`. \n\nWhereas S3 objects can be created on the fly by putting primitive object types together, S4 objects are created by a constructor function that puts the object together in a more structured way and importantly, _checks that the object is actually constructed correctly_.  This makes it a lot easier for developers to reliably depend on objects of that class. \n\n### Building ouchtree format from dataframes\n\nThe `ouchtree()` function is the constructor for objects of class `ouchtree`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nouchtree(nodes, ancestors, times, labels = as.character(nodes))\n```\n:::\n\n__The `ouchtree` function only has four arguments__, one of them optional. \n\n- `nodes`: a character vector of node ids (including internal nodes). Unlike `ape`, the leaves do not need to have smaller ids than internal nodes. \n- `ancestors`: a character vector of node ids of the ancestors for the nodes in the `nodes` vector. The `nodes` and `ancestors` vectors almost correspond to the second and first columns of the `ape` `edge` matrix, respectively, with the exception that `ouchtree` includes the root node with an ancestor of `NA`. \n- `times`: represents the height of each node from the root. Remember that `ape`'s `edge.length` vector has the length of the branch subtending each node; instead, `ouchtree` has the sum of the lengths of all branches connecting a given node to the root. Again, the root node is included in `ouchtree` (with height 0) but not in ape. \n- `labels`: is a vector of labels for both tips and internal nodes. If internal nodes do not have names, they get a label of `<NA>`.\n\nWe can use `ouch`ʻs built-in dataset `anolis.ssd`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(anolis.ssd)\nclass(anolis.ssd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nanolis.ssd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   node species  log.SSD ancestor   time OU.1 OU.7\n1     1    <NA>       NA       NA 0.0000   ns  anc\n2     2    <NA>       NA        1 0.1614   ns  anc\n3     3    <NA>       NA        2 0.1845   ns  anc\n4     4    <NA>       NA        3 0.4778   ns  anc\n5     5    <NA>       NA        3 0.3909   ns  anc\n6     6    <NA>       NA        3 0.5026   ns  anc\n7     7    <NA>       NA        3 0.2372   ns  anc\n8     8    <NA>       NA        7 0.6986   ns  anc\n9     9    <NA>       NA        7 0.4864   ns  anc\n10   10    <NA>       NA        9 0.6838   ns  anc\n11   11    <NA>       NA        3 0.2783   ns  anc\n12   12    <NA>       NA       11 0.5529   ns  anc\n13   13    <NA>       NA       11 0.4259   ns  anc\n14   14    <NA>       NA        3 0.2826   ns  anc\n15   15    <NA>       NA       14 0.3998   ns  anc\n16   16      oc -0.00512        1 1.0000   ns   tw\n17   17      eq  0.08454        2 1.0000   ns   cg\n18   18      co  0.24703        4 1.0000   ns   tc\n19   19     aln  0.24837        4 1.0000   ns   tc\n20   20      ol  0.09844        5 1.0000   ns   gb\n21   21      in  0.06137        5 1.0000   ns   tw\n22   22      cu  0.09501        6 1.0000   ns   cg\n23   23      ri  0.08947        6 1.0000   ns   cg\n24   24      sa  0.28893        8 1.0000   ns   tg\n25   25      op  0.15963        8 1.0000   ns   gb\n26   26      va  0.14766        9 1.0000   ns   tw\n27   27      li  0.38873        9 1.0000   ns   tg\n28   28      ga  0.28768       10 1.0000   ns   cg\n29   29      gr  0.39786       10 1.0000   ns   tc\n30   30      br  0.17106       12 1.0000   ns   tr\n31   31      di  0.13801       12 1.0000   ns   tr\n32   32      kr  0.23478       13 1.0000   ns   gb\n33   33      cr  0.39796       13 1.0000   ns   tg\n34   34      st  0.15737       13 1.0000   ns   tc\n35   35      cy  0.26024        3 1.0000   ns   tg\n36   36     alu  0.08216       14 1.0000   ns   gb\n37   37      lo  0.13108       15 1.0000   ns   tr\n38   38      an  0.13547       15 1.0000   ns   tw\n```\n:::\n:::\n\n\nThis is a dataframe containing sexual size dimorphism data on 38 species of `Anolis` lizard [@Butler:2004]. The tree information is provided by `node`, `species`, `ancestor`, and `time`.  The `log.SSD` contains the phenotypic data we are interested in studying, and the other vectors (`OU.1`, `OU.7`) contain hypotheses for the evolution of these phenotypes (they are potential covariates). (More on this later).\n\nWe construct the ouchtree like so, and check with a plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree <- with(anolis.ssd,ouchtree(node,ancestor,time/max(time),species))\nplot(tree)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Converting from `ape` to `ouch`\n\nHowever, most people donʻt know how to easily convert their newick or nexus format trees to a dataframe (and would be afraid to make errors), so probably the most commonly used method to obtain ouchtrees is to read in the treefile to `phylo` format using `ape`, then use ouchʻs `ape2ouch()` function. \n\nFor example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nosimpletree<-ape2ouch(tree=simpletree)\n```\n:::\n\nOur example tree, when converted to ouchtree format, is\n\n::: {.cell}\n\n```{.r .cell-code}\nosimpletree\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   nodes ancestors     times labels\n1      1      <NA> 0.0000000       \n2      2         3 0.8333333       \n3      3         1 0.6666667       \n4      4         6 0.8333333       \n5      5         6 0.8333333       \n6      6         1 0.5000000       \n7      7         2 1.0000000      G\n8      8         2 1.0000000      F\n9      9         3 1.0000000      E\n10    10         4 1.0000000      D\n11    11         4 1.0000000      C\n12    12         5 1.0000000      B\n13    13         5 1.0000000      A\n```\n:::\n:::\n\n\nNote that the print method for the tree displays the vectors used to construct the tree (the user input). \n\n### Coerce to data.frame\n\nouchtree objects can also be coerced to dataframes, which is helpful for adding hypotheses or metadata. Because `ouchtree` is an S4 object, to coerce it to a dataframe you use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas(osimpletree, \"data.frame\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   nodes ancestors     times labels\n1      1      <NA> 0.0000000       \n2      2         3 0.8333333       \n3      3         1 0.6666667       \n4      4         6 0.8333333       \n5      5         6 0.8333333       \n6      6         1 0.5000000       \n7      7         2 1.0000000      G\n8      8         2 1.0000000      F\n9      9         3 1.0000000      E\n10    10         4 1.0000000      D\n11    11         4 1.0000000      C\n12    12         5 1.0000000      B\n13    13         5 1.0000000      A\n```\n:::\n:::\n\n\n### Hidden components of `ouchtree`\n\n`ouch` was written primarily to perform computations along phylogenies to test models of evolution, and thus the `ouctree` object constructor creates many informational matrices and vectors that are used for rapid computations. Itʻs plotting function is mainly to check that the phylogeny and models were entered correctly, but itʻs also probably the fastest plotting algorithm around. \n\nFor example, the `branch.times` matrix, created on initialization, is part of the `ouchtree` object and is a matrix showing shared amount of time on a tree between two tips (which may be the same tip). This, multiplied by a rate parameter, becomes a variance-covariance matrix under a Brownian motion model, which we'll be discussing later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(osimpletree)$branch.times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n[1,] 1.0000000 0.8333333 0.6666667 0.0000000 0.0000000 0.0000000 0.0000000\n[2,] 0.8333333 1.0000000 0.6666667 0.0000000 0.0000000 0.0000000 0.0000000\n[3,] 0.6666667 0.6666667 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n[4,] 0.0000000 0.0000000 0.0000000 1.0000000 0.8333333 0.5000000 0.5000000\n[5,] 0.0000000 0.0000000 0.0000000 0.8333333 1.0000000 0.5000000 0.5000000\n[6,] 0.0000000 0.0000000 0.0000000 0.5000000 0.5000000 1.0000000 0.8333333\n[7,] 0.0000000 0.0000000 0.0000000 0.5000000 0.5000000 0.8333333 1.0000000\n```\n:::\n:::\n\n\nThe `ouchtree()` function (from the 3-4 user supplied arguments), then initializes all of the other elements of class `ouchtree` which is defined as:\n\n- `nnodes` = 'integer' vector, number of nodes\n- `nodes` = 'character' vector, names for nodes\n- `ancestors` = 'character', names for ancestors\n- `nodelabels` = 'character', user-specified labels (i.e., species names)\n- `times` = 'numeric', time from root to node\n- `root` = 'integer', identity of the root node\n- `nterm` = 'integer', number of terminal taxa or tips\n- `term` = 'integer', vector of terminal nodes\n- `anc.numbers` = 'integer', numbers of ancestors\n- `lineages` = 'list', nodes traversed from root to each node\n- `epochs` = 'list', \n- `branch.times` = 'matrix',\n- `depth` = 'numeric'\n\n\nThe entire content of the `simpletreeouch` object can be dumped to screen using the following command (not executed here to save paper):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(simpletreeouch)\n```\n:::\n\n\nWe will return to ouch in the comparative methods section.\n\n\n# `treedata` from package `tidytree`\n\nClass \"treedata\" This class stores phylogenetic tree with associated data\n\nSlots\n\nfile -  tree file\n\ntreetext\nnewick tree string\n\nphylo\nphylo object for tree structure\n\ndata\nassociated data\n\nextraInfo\nextra information, reserve for merge_tree\n\ntip_seq\ntip sequences\n\nanc_seq\nancestral sequences\n\nseq_type\nsequence type, one of NT or AA\n\ntipseq_file\ntip sequence file\n\nancseq_file\nancestral sequence file\n\ninfo\nextra information, e.g. metadata, software version etc.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}